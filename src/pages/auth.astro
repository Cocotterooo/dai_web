---
import AuthLayout from "@/layouts/AuthLayout.astro";
import AuthTabs from "@/components/auth/AuthTabs.astro";
import LoginForm from "@/components/auth/LoginForm.astro";
import RegisterForm from "@/components/auth/RegisterForm.astro";
import SocialLogin from "@/components/auth/SocialLogin.astro";
import DAILogo from "@/components/common/DAILogo.astro";

console.log('=== PÁGINA AUTH ===');
console.log('URL:', Astro.request.url);

// Obtener parámetros de error si los hay
const url = new URL(Astro.request.url);
const errorParam = url.searchParams.get('error');
const messageParam = url.searchParams.get('message');
const emailParam = url.searchParams.get('email');

if (errorParam) {
  console.log('❌ Error detectado en URL:', errorParam, messageParam);
}

// Verificar si hay un usuario logueado pero sin confirmar email
let showEmailConfirmationMessage = false;
let userEmail = '';
let confirmationMessageType = 'default'; // 'default' o 'login_failed'

// Verificar si el error es específicamente de email no confirmado
if (errorParam === 'email_not_confirmed' && emailParam) {
  showEmailConfirmationMessage = true;
  userEmail = emailParam;
  confirmationMessageType = 'login_failed';
  console.log('⚠️ Mostrando mensaje por login fallido - email no confirmado:', userEmail);
}

// Verificar las cookies de sesión solo si no hay error de email no confirmado
const accessToken = Astro.cookies.get('sb-access-token')?.value;
const refreshToken = Astro.cookies.get('sb-refresh-token')?.value;

if (accessToken && refreshToken && !showEmailConfirmationMessage) {
  // Importar supabase aquí para usar en el servidor
  const { supabase } = await import('../lib/supabase.ts');
  
  try {
    // Configurar la sesión con los tokens
    const { data: sessionData, error: sessionError } = await supabase.auth.setSession({
      access_token: accessToken,
      refresh_token: refreshToken
    });

    if (sessionData?.session?.user && !sessionError) {
      const user = sessionData.session.user;
      userEmail = user.email || '';
      
      // Verificar si el email está confirmado
      // email_confirmed_at será null si no está confirmado
      if (!user.email_confirmed_at) {
        showEmailConfirmationMessage = true;
        confirmationMessageType = 'default';
        console.log('⚠️ Usuario logueado pero email no confirmado:', userEmail);
      }
    }
  } catch (error) {
    console.error('Error verificando estado de confirmación de email:', error);
  }
}
---

<AuthLayout>
  <div class="w-full max-w-md">
    <!-- Logo de la DAI -->
    

    <!-- Contenedor principal del formulario -->
    <div class="bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl rounded-2xl p-8">
      <AuthTabs />
      <div class="flex justify-center mb-6">
        <animated-icons
        src="https://animatedicons.co/get-icon?name=Face%20Id&style=minimalistic&token=3860ecda-3dc3-460a-94e4-0c88f5040813"
          trigger="loop"
          attributes='{"variationThumbColour":"#536DFE","variationName":"Two Tone","variationNumber":2,"numberOfGroups":2,"backgroundIsGroup":false,"strokeWidth":1,"defaultColours":{"group-1":"#FFFFFFFF","group-2":"#00ACE2FF","background":"#FFFFFF00"}}'
          height="150"
          width="150"
          speed="0.4"
        ></animated-icons>
      </div>
      
      <!-- Mensaje de confirmación de email -->
      {showEmailConfirmationMessage && (
        <div class="bg-blue-500/20 border border-blue-400/30 shadow-lg rounded-xl p-4 mb-6">
          <div class="flex items-start gap-3">
            <!-- Icono de información -->
            <div class="flex-shrink-0 mt-0.5">
              <svg class="w-4 h-4 text-blue-300" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <!-- Contenido del mensaje -->
            <div class="flex-1">
              {confirmationMessageType === 'login_failed' ? (
                <>
                  <h3 class="text-blue-200 font-semibold text-sm mb-2">
                    Debes confirmar tu dirección de email.
                  </h3>
                  <p class="text-blue-100/90 text-sm leading-relaxed">
                    Tu cuenta con el email <strong>{userEmail}</strong> aún no ha sido confirmada. 
                  </p>
                  <p class="text-blue-100/75 text-xs mt-2">
                    Por favor, revisa tu bandeja de entrada (y la carpeta de spam) y haz clic en el enlace de confirmación que te hemos enviado.
                  </p>
                  <div class="mt-3">
                    <button 
                      id="resend-confirmation-btn" 
                      class="text-blue-300 hover:text-blue-200 text-xs underline transition-colors duration-200"
                      data-email={userEmail}
                    >
                      ¿No recibiste el email? Reenviar confirmación
                    </button>
                  </div>
                </>
              ) : (
                <>
                  <h3 class="text-blue-200 font-semibold text-sm mb-2">
                    Confirma tu dirección de email
                  </h3>
                  <p class="text-blue-100/90 text-sm leading-relaxed">
                    Hemos enviado un enlace de confirmación a <strong>{userEmail}</strong>. 
                    Por favor, revisa tu bandeja de entrada (y la carpeta de spam) y haz clic en el enlace para completar tu registro.
                  </p>
                  <p class="text-blue-100/75 text-xs mt-2">
                    Una vez confirmado, podrás acceder a todas las funcionalidades de la plataforma.
                  </p>
                  <div class="mt-3">
                    <button 
                      id="resend-confirmation-btn" 
                      class="text-blue-300 hover:text-blue-200 text-xs underline transition-colors duration-200"
                      data-email={userEmail}
                    >
                      ¿No recibiste el email? Reenviar confirmación
                    </button>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      )}
      
      <LoginForm />
      <RegisterForm />
      
      <!-- Divisor -->
      <div class="flex items-center my-6">
        <div class="flex-1 border-t border-white/20"></div>
        <span class="px-4 text-white/60 text-sm">o continúa con</span>
        <div class="flex-1 border-t border-white/20"></div>
      </div>
      
      <!-- Botón de Google OAuth con Supabase -->
      <SocialLogin />
    </div>
    
    <!-- Enlace para volver al inicio -->
    <div class="text-center mt-6">
      <a href="/" class="text-white/80 hover:text-white transition-colors duration-300 text-sm">
        ← Volver al inicio
      </a>
    </div>
  </div>
</AuthLayout>

<script type="text/javascript">
  // Función para inicializar el sistema de tabs
  function initAuthSystem() {
    const tabLogin = document.querySelector('#tab-login');
    const tabRegister = document.querySelector('#tab-register');
    const formLogin = document.querySelector('#form-login');
    const formRegister = document.querySelector('#form-register');

    // Verificar que todos los elementos existen
    if (!tabLogin || !tabRegister || !formLogin || !formRegister) {
      console.error('No se pudieron encontrar todos los elementos necesarios para los tabs');
      return;
    }

    // Estado inicial - mostrar login
    let currentTab = 'login';

    // Función para cambiar entre tabs
    const switchTab = (tab) => {
      if (tab === 'login') {
        // Mostrar formulario de login
        formLogin.classList.remove('hidden');
        formRegister.classList.add('hidden');
        
        // Actualizar estado visual de los tabs
        tabLogin.classList.add('text-dai');
        tabRegister.classList.remove('text-dai');
        
        currentTab = 'login';
        console.log('Cambiado a tab de login');
      } else if (tab === 'register') {
        // Mostrar formulario de registro
        formLogin.classList.add('hidden');
        formRegister.classList.remove('hidden');
        
        // Actualizar estado visual de los tabs
        tabRegister.classList.add('text-dai');
        tabLogin.classList.remove('text-dai');
        
        currentTab = 'register';
        console.log('Cambiado a tab de registro');
      }
    };

    // Limpiar event listeners previos para evitar duplicados
    const newTabLogin = tabLogin.cloneNode(true);
    const newTabRegister = tabRegister.cloneNode(true);
    tabLogin.parentNode.replaceChild(newTabLogin, tabLogin);
    tabRegister.parentNode.replaceChild(newTabRegister, tabRegister);

    // Event listeners para los tabs
    newTabLogin.addEventListener('click', (e) => {
      e.preventDefault();
      if (currentTab !== 'login') {
        switchTab('login');
      }
    });

    newTabRegister.addEventListener('click', (e) => {
      e.preventDefault();
      if (currentTab !== 'register') {
        switchTab('register');
      }
    });

    // Escuchar eventos personalizados del componente AuthTabs
    document.addEventListener('auth-tab-changed', (e) => {
      const { tab } = e.detail;
      if (tab !== currentTab) {
        switchTab(tab);
      }
    });

    // Establecer estado inicial
    switchTab('login');
    
    //console.log('Sistema de auth tabs inicializado correctamente');
  }

  // Inicializar en carga inicial
  document.addEventListener('DOMContentLoaded', initAuthSystem);
  
  // Reinicializar después de navegación entre páginas
  document.addEventListener('astro:page-load', initAuthSystem);
  
  // Reinicializar después de cualquier cambio dinámico
  document.addEventListener('astro:after-swap', initAuthSystem);
  
  // Funciones adicionales que ya existían
  function initEmailConfirmationSystem() {
    const handleResendConfirmation = async (email) => {
      const button = document.getElementById('resend-confirmation-btn') || 
                     document.getElementById('resend-confirmation-btn-dynamic');
      if (!button) return;
      
      try {
        button.disabled = true;
        button.textContent = 'Enviando...';
        
        // Importar supabase para reenviar confirmación
        const { supabase } = await import('/src/lib/supabase.ts');
        
        const { error } = await supabase.auth.resend({
          type: 'signup',
          email: email
        });
        
        if (error) {
          console.error('Error reenviando confirmación:', error);
          button.textContent = 'Error al enviar. Inténtalo de nuevo.';
          setTimeout(() => {
            button.textContent = '¿No recibiste el email? Reenviar confirmación';
            button.disabled = false;
          }, 3000);
        } else {
          button.textContent = '✅ Confirmación reenviada';
          setTimeout(() => {
            button.textContent = '¿No recibiste el email? Reenviar confirmación';
            button.disabled = false;
          }, 5000);
        }
      } catch (error) {
        console.error('Error en reenvío:', error);
        button.textContent = 'Error al enviar. Inténtalo de nuevo.';
        button.disabled = false;
      }
    };

    // Event listener para el botón de reenvío estático
    const resendBtn = document.getElementById('resend-confirmation-btn');
    if (resendBtn) {
      resendBtn.addEventListener('click', () => {
        const email = resendBtn.getAttribute('data-email');
        if (email) {
          handleResendConfirmation(email);
        }
      });
    }
    
    // Función para verificar el estado de confirmación de email
    const checkEmailConfirmationStatus = async () => {
      try {
        // Importar supabase en el cliente
        const { supabase } = await import('/src/lib/supabase.ts');
        
        // Obtener usuario actual
        const { data: { user }, error } = await supabase.auth.getUser();
        
        if (user && !error) {
          const emailConfirmationMessage = document.querySelector('#email-confirmation-message');
          
          if (!user.email_confirmed_at) {
            // Usuario logueado pero email no confirmado
            if (!emailConfirmationMessage) {
              // Crear y mostrar el mensaje si no existe
              createEmailConfirmationMessage(user.email || '');
            }
          } else {
            // Email confirmado, ocultar mensaje si existe
            if (emailConfirmationMessage) {
              emailConfirmationMessage.remove();
            }
          }
        }
      } catch (error) {
        console.error('Error verificando estado de confirmación:', error);
      }
    };

    // Función para crear el mensaje de confirmación dinámicamente
    const createEmailConfirmationMessage = (email) => {
      const messageHTML = `
        <div id="email-confirmation-message" class="bg-blue-500/20 backdrop-blur-lg border border-blue-400/30 shadow-lg rounded-xl p-4 mb-6">
          <div class="flex items-start gap-3">
            <div class="flex-shrink-0 mt-0.5">
              <svg class="w-4 h-4 text-blue-300" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <div class="flex-1">
              <h3 class="text-blue-200 font-semibold text-sm mb-2">
                Confirma tu dirección de email
              </h3>
              <p class="text-blue-100/90 text-sm leading-relaxed">
                Hemos enviado un enlace de confirmación a <strong>${email}</strong>. 
                Por favor, revisa tu bandeja de entrada (y la carpeta de spam) y haz clic en el enlace para completar tu registro.
              </p>
              <p class="text-blue-100/75 text-xs mt-2">
                Una vez confirmado, podrás acceder a todas las funcionalidades de la plataforma.
              </p>
              <div class="mt-3">
                <button 
                  id="resend-confirmation-btn-dynamic" 
                  class="text-blue-300 hover:text-blue-200 text-xs underline transition-colors duration-200"
                  data-email="${email}"
                >
                  ¿No recibiste el email? Reenviar confirmación
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Insertar el mensaje después de los tabs y antes del formulario de login
      const authTabsContainer = document.querySelector('#auth-tabs-button')?.parentElement;
      if (authTabsContainer) {
        authTabsContainer.insertAdjacentHTML('afterend', messageHTML);
        
        // Agregar event listener al botón de reenvío dinámico
        const dynamicResendBtn = document.getElementById('resend-confirmation-btn-dynamic');
        if (dynamicResendBtn) {
          dynamicResendBtn.addEventListener('click', () => {
            const email = dynamicResendBtn.getAttribute('data-email');
            if (email) {
              handleResendConfirmation(email);
            }
          });
        }
      }
    };

    // Verificar estado inicial
    checkEmailConfirmationStatus();

    // Escuchar cambios en el estado de autenticación
    const checkAuthChanges = async () => {
      try {
        const { supabase } = await import('/src/lib/supabase.ts');
        
        supabase.auth.onAuthStateChange((event, session) => {
          //console.log('Auth state changed:', event, session?.user?.email_confirmed_at);
          
          if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
            // Verificar estado de confirmación después de un breve delay
            setTimeout(checkEmailConfirmationStatus, 1000);
          }
        });
      } catch (error) {
        console.error('Error configurando listener de auth:', error);
      }
    };

    checkAuthChanges();
  }

  // Inicializar sistema de confirmación de email
  document.addEventListener('DOMContentLoaded', initEmailConfirmationSystem);
  document.addEventListener('astro:page-load', initEmailConfirmationSystem);
  document.addEventListener('astro:after-swap', initEmailConfirmationSystem);
</script>
<script src="@/scripts/embed-animated-icons.js"></script>