---
// Componente modal para editar datos del usuario
---

<!-- Dialog nativo de HTML5 para editar datos -->
<dialog id="editDialog" class="backdrop:bg-black/50 rounded-2xl border border-white/30 bg-gray-900/95 backdrop-blur-xl p-6 text-white shadow-2xl 
                              fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 max-w-[90vw] max-h-[90vh] overflow-auto
                              open:flex open:flex-col">
    <form method="dialog" class="space-y-4">
        <div class="flex justify-between items-center mb-4">
            <h3 id="dialogTitle" class="text-xl font-semibold text-azul-brillante"></h3>
            <button type="button" id="closeBtn" 
                    class="text-gray-400 hover:text-white transition-colors text-2xl leading-none">
                √ó
            </button>
        </div>
        
        <div>
            <label id="inputLabel" class="block text-sm font-medium text-gray-300 mb-2"></label>
            <input 
                id="editInput" 
                type="text" 
                class="w-full bg-white/10 border border-white/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-azul-brillante focus:border-transparent transition-all"
                placeholder="Ingresa el nuevo valor"
            >
        </div>
        
        <div class="flex gap-3 pt-4">
            <button 
                type="button" 
                id="saveBtn"
                class="flex-1 bg-azul-brillante hover:bg-azul-brillante/80 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200">
                üíæ Guardar
            </button>
            <button 
                type="button" 
                id="cancelBtn"
                class="flex-1 bg-gray-600/50 hover:bg-gray-600/70 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200">
                ‚ùå Cancelar
            </button>
        </div>
    </form>
</dialog>

<script is:inline type="module">
// Esperar a que el DOM est√© completamente cargado
document.addEventListener('DOMContentLoaded', function() {
    // Variables globales
    let currentField = '';
    let currentValue = '';
    const dialog = document.getElementById('editDialog');
    const dialogTitle = document.getElementById('dialogTitle');
    const inputLabel = document.getElementById('inputLabel');
    const editInput = document.getElementById('editInput');

    // Mapeo de campos para mostrar nombres amigables
    const fieldLabels = {
        'name': 'Nombre completo',
        'email': 'Correo electr√≥nico',
        'dni': 'Documento de identidad',
        'phone': 'N√∫mero de tel√©fono',
    };

    // Agregar event listeners a todos los campos editables
    const editableFields = document.querySelectorAll('[data-field]');
    editableFields.forEach(field => {
        field.addEventListener('click', function() {
            const fieldName = this.getAttribute('data-field');
            const fieldValue = this.getAttribute('data-value') || '';
            openEditDialog(fieldName, fieldValue);
        });
    });

    // Funci√≥n para abrir el dialog
    function openEditDialog(field, value) {
        if (!dialog || !dialogTitle || !inputLabel || !editInput) {
            console.error('Elementos del dialog no encontrados');
            return;
        }

        currentField = field;
        currentValue = value;
        
        // Configurar el contenido del dialog
        dialogTitle.textContent = `Editar ${fieldLabels[field]}`;
        inputLabel.textContent = fieldLabels[field] + ':';
        editInput.value = value || '';
        
        // Configurar el tipo de input seg√∫n el campo
        switch(field) {
            case 'email':
                editInput.type = 'email';
                editInput.placeholder = 'ejemplo@correo.com';
                break;
            case 'phone':
                editInput.type = 'tel';
                editInput.placeholder = '+34 600 000 000';
                break;
            case 'dni':
                editInput.type = 'text';
                editInput.placeholder = '12345678A';
                break;
            default:
                editInput.type = 'text';
                editInput.placeholder = 'Ingresa el nuevo valor';
        }
        
        // Abrir dialog usando la API nativa
        dialog.showModal();
        
        // Enfocar el input
        editInput.focus();
        editInput.select();
    }

    // Funci√≥n para cerrar el dialog
    function closeEditDialog() {
        if (dialog) {
            dialog.close();
        }
        currentField = '';
        currentValue = '';
    }

    // Funci√≥n para guardar cambios
    function saveChanges() {
        if (!editInput) return;
        
        const newValue = editInput.value.trim();
        
        if (!newValue) {
            alert('Por favor, ingresa un valor v√°lido');
            return;
        }
        
        // Validaciones b√°sicas
        if (currentField === 'email' && !isValidEmail(newValue)) {
            alert('Por favor, ingresa un email v√°lido');
            return;
        }
        
        if (currentField === 'dni' && !isValidDNI(newValue)) {
            alert('Por favor, ingresa un DNI v√°lido');
            return;
        }
        
        // Actualizar el valor en la interfaz
        updateFieldValue(currentField, newValue);
        
        // Aqu√≠ podr√≠as agregar una llamada a la API para persistir el cambio
        console.log(`Campo ${currentField} actualizado de "${currentValue}" a "${newValue}"`);
        
        // Cerrar dialog
        closeEditDialog();
    }

    // Funci√≥n para actualizar el valor en la interfaz
    function updateFieldValue(field, newValue) {
        // Buscar el elemento que contiene el campo
        const fieldElement = document.querySelector(`[data-field="${field}"]`);
        if (fieldElement) {
            const valueElement = fieldElement.querySelector('.font-bold');
            if (valueElement) {
                valueElement.textContent = newValue;
                fieldElement.setAttribute('data-value', newValue);
            }
        }
    }

    // Validaciones
    function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    function isValidDNI(dni) {
        const dniRegex = /^[0-9]{8}[TRWAGMYFPDXBNJZSQVHLCKE]$/i;
        return dniRegex.test(dni);
    }

    // Event listeners para los botones del dialog
    const saveBtn = document.getElementById('saveBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    const closeBtn = document.getElementById('closeBtn');

    if (saveBtn) {
        saveBtn.addEventListener('click', saveChanges);
    }

    if (cancelBtn) {
        cancelBtn.addEventListener('click', closeEditDialog);
    }

    if (closeBtn) {
        closeBtn.addEventListener('click', closeEditDialog);
    }

    // Cerrar dialog con Escape
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && dialog && dialog.open) {
            closeEditDialog();
        }
    });

    // Enviar formulario con Enter
    if (editInput) {
        editInput.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                saveChanges();
            }
        });
    }

    // Hacer las funciones globalmente accesibles para compatibilidad
    window.openEditDialog = openEditDialog;
    window.closeEditDialog = closeEditDialog;
    window.saveChanges = saveChanges;
});
</script>
