---
// Componente modal para editar informaci√≥n del usuario
---

<!-- Dialog nativo de HTML5 para editar campos del usuario -->
<dialog id="editDialog" class="backdrop:bg-black/50 rounded-2xl border border-white/30 bg-gray-900/95 backdrop-blur-xl p-6 text-white shadow-2xl 
                              fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 max-w-[90vw] max-h-[90vh] overflow-auto
                              open:flex open:flex-col">
    <form method="dialog" class="space-y-4">
        <div class="flex justify-between items-center mb-4">
            <h3 id="dialogTitle" class="text-xl font-semibold text-azul-brillante"></h3>
            <button type="button" id="closeBtn" 
                    class="text-gray-400 hover:text-white transition-colors text-2xl leading-none">
                √ó
            </button>
        </div>
        
        <div>
            <label id="inputLabel" class="block text-sm font-medium text-gray-300 mb-2"></label>
            <input 
                id="editInput" 
                type="text" 
                class="w-full bg-white/10 border border-white/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-azul-brillante focus:border-transparent transition-all"
            >
            <p id="field-feedback" class="text-xs mt-1 transition-colors duration-300">
                <span class="text-white/60"></span>
            </p>
        </div>
        
        <div class="flex gap-3 pt-4">
            <button 
                type="button" 
                id="saveBtn"
                class="flex-1 bg-azul-brillante hover:bg-azul-brillante/80 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed">
                üíæ Guardar
            </button>
            <button 
                type="button" 
                id="cancelBtn"
                class="flex-1 bg-gray-600/50 hover:bg-gray-600/70 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200">
                ‚ùå Cancelar
            </button>
        </div>
    </form>
</dialog>

<script is:inline type="module">
// Esperar a que el DOM est√© completamente cargado
document.addEventListener('DOMContentLoaded', function() {
    // Variables globales
    let currentField = '';
    let currentValue = '';
    let isValidField = false;
    const dialog = document.getElementById('editDialog');
    const dialogTitle = document.getElementById('dialogTitle');
    const inputLabel = document.getElementById('inputLabel');
    const editInput = document.getElementById('editInput');
    const saveBtn = document.getElementById('saveBtn');
    const feedback = document.getElementById('field-feedback');

    // Configuraci√≥n de campos
    const fieldConfig = {
        'full_name': {
            title: 'Editar Nombre Completo',
            label: 'Nombre completo:',
            placeholder: 'Juan P√©rez Garc√≠a',
            type: 'text',
            maxlength: 100,
            helpText: 'Debe contener al menos 2 palabras',
            validation: validateFullName,
            apiEndpoint: '/api/profile/update-profile'
        },
        'dni': {
            title: 'Editar DNI',
            label: 'Documento de identidad (DNI):',
            placeholder: '12345678A',
            type: 'text',
            maxlength: 9,
            pattern: '[0-9]{8}[A-Za-z]',
            helpText: 'Formato: 8 n√∫meros + 1 letra',
            validation: validateDNI,
            apiEndpoint: '/api/profile/update-dni'
        },
        'phone': {
            title: 'Editar Tel√©fono',
            label: 'N√∫mero de tel√©fono:',
            placeholder: '+34 600 123 456',
            type: 'tel',
            maxlength: 20,
            helpText: 'Formato: +34 XXX XXX XXX',
            validation: validatePhone,
            apiEndpoint: '/api/profile/update-profile'
        },
        'instagram': {
            title: 'Editar Instagram',
            label: 'Usuario de Instagram:',
            placeholder: 'usuario (sin @)',
            type: 'text',
            maxlength: 50,
            helpText: 'Solo el nombre de usuario, sin @',
            validation: validateInstagram,
            apiEndpoint: '/api/profile/update-profile'
        },
        'linkedin': {
            title: 'Editar LinkedIn',
            label: 'Perfil de LinkedIn:',
            placeholder: 'www.linkedin.com/in/usuario',
            type: 'url',
            maxlength: 200,
            helpText: 'URL completa: www.linkedin.com/in/usuario',
            validation: validateLinkedIn,
            apiEndpoint: '/api/profile/update-profile'
        },
        'tiktok': {
            title: 'Editar TikTok',
            label: 'Usuario de TikTok:',
            placeholder: 'usuario (sin @)',
            type: 'text',
            maxlength: 50,
            helpText: 'Solo el nombre de usuario, sin @',
            validation: validateTikTok,
            apiEndpoint: '/api/profile/update-profile'
        },
        'x': {
            title: 'Editar X (Twitter)',
            label: 'Usuario de X:',
            placeholder: 'usuario (sin @)',
            type: 'text',
            maxlength: 50,
            helpText: 'Solo el nombre de usuario, sin @',
            validation: validateX,
            apiEndpoint: '/api/profile/update-profile'
        }
    };

    // Funciones de validaci√≥n
    function validateFullName(value) {
        const words = value.trim().split(/\s+/);
        if (words.length < 2) {
            return { isValid: false, message: 'El nombre debe contener al menos 2 palabras' };
        }
        if (value.length < 3) {
            return { isValid: false, message: 'El nombre debe tener al menos 3 caracteres' };
        }
        return { isValid: true, message: '‚úì Nombre v√°lido' };
    }

    function validateDNI(value) {
        const dniInput = value.toUpperCase();
        const dniNumber = dniInput.slice(0, 8);
        const dniLetter = dniInput[8];
        
        if (dniInput.length === 0) {
            return { isValid: false, message: 'Formato: 8 n√∫meros + 1 letra', color: 'white/60' };
        }
        
        if (dniInput.length < 8) {
            return { isValid: false, message: 'Introduce el n√∫mero completo del DNI.', color: 'yellow-400' };
        }
        
        if (dniInput.length === 8) {
            if (/^[0-9]{8}$/.test(dniNumber)) {
                return { isValid: false, message: 'Ahora introduce la letra del DNI', color: 'blue-400' };
            } else {
                return { isValid: false, message: 'Los primeros 8 caracteres deben ser n√∫meros', color: 'red-400' };
            }
        }
        
        if (dniInput.length === 9) {
            const dniPattern = /^[0-9]{8}[A-Z]$/;
            if (dniPattern.test(dniInput)) {
                const expectedLetter = calculateDNILetter(parseInt(dniNumber));
                if (dniLetter === expectedLetter) {
                    return { isValid: true, message: '‚úì DNI v√°lido', color: 'green-400' };
                } else {
                    return { isValid: false, message: `‚úó DNI inv√°lido. La letra deber√≠a ser ${expectedLetter}`, color: 'red-400' };
                }
            } else {
                return { isValid: false, message: '‚úó Formato incorrecto. Debe ser 8 n√∫meros + 1 letra', color: 'red-400' };
            }
        }
        
        if (dniInput.length > 9) {
            return { isValid: false, message: '‚úó Demasiados caracteres. M√°ximo 9', color: 'red-400' };
        }
        
        return { isValid: false, message: 'Formato incorrecto', color: 'red-400' };
    }

    function validatePhone(value) {
        // Permitir varios formatos de tel√©fono
        const phoneRegex = /^(\+\d{1,3}[-.\s]?)?\(?\d{1,4}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,9}$/;
        if (value.length === 0) {
            return { isValid: true, message: 'Campo opcional', color: 'white/60' };
        }
        if (phoneRegex.test(value)) {
            return { isValid: true, message: '‚úì Tel√©fono v√°lido', color: 'green-400' };
        }
        return { isValid: false, message: '‚úó Formato de tel√©fono inv√°lido', color: 'red-400' };
    }

    function validateInstagram(value) {
        if (value.length === 0) {
            return { isValid: true, message: 'Campo opcional', color: 'white/60' };
        }
        const username = value.replace('@', '').trim();
        if (!/^[a-zA-Z0-9._]+$/.test(username) || username.length < 1) {
            return { isValid: false, message: '‚úó Usuario inv√°lido', color: 'red-400' };
        }
        return { isValid: true, message: '‚úì Usuario v√°lido', color: 'green-400' };
    }

    function validateTikTok(value) {
        if (value.length === 0) {
            return { isValid: true, message: 'Campo opcional', color: 'white/60' };
        }
        const username = value.replace('@', '').trim();
        if (!/^[a-zA-Z0-9._]+$/.test(username) || username.length < 1) {
            return { isValid: false, message: '‚úó Usuario inv√°lido', color: 'red-400' };
        }
        return { isValid: true, message: '‚úì Usuario v√°lido', color: 'green-400' };
    }

    function validateX(value) {
        if (value.length === 0) {
            return { isValid: true, message: 'Campo opcional', color: 'white/60' };
        }
        const username = value.replace('@', '').trim();
        if (!/^[a-zA-Z0-9_]+$/.test(username) || username.length < 1) {
            return { isValid: false, message: '‚úó Usuario inv√°lido', color: 'red-400' };
        }
        return { isValid: true, message: '‚úì Usuario v√°lido', color: 'green-400' };
    }

    function validateLinkedIn(value) {
        if (value.length === 0) {
            return { isValid: true, message: 'Campo opcional', color: 'white/60' };
        }
        const linkedinPattern = /^(https?:\/\/)?(www\.)?linkedin\.com\/in\/[a-zA-Z0-9-]+\/?$/;
        if (!linkedinPattern.test(value.trim())) {
            return { isValid: false, message: '‚úó URL inv√°lida', color: 'red-400' };
        }
        return { isValid: true, message: '‚úì URL v√°lida', color: 'green-400' };
    }

    // Funci√≥n para calcular la letra correcta del DNI
    function calculateDNILetter(dni) {
        const letters = 'TRWAGMYFPDXBNJZSQVHLCKE';
        return letters[dni % 23];
    }

    // Validaci√≥n en tiempo real
    if (editInput && feedback && saveBtn) {
        editInput.addEventListener('input', function() {
            const value = this.value;
            const config = fieldConfig[currentField];
            
            if (config && config.validation) {
                const result = config.validation(value);
                isValidField = result.isValid;
                
                // Actualizar feedback
                const color = result.color || (result.isValid ? 'green-400' : 'red-400');
                feedback.innerHTML = `<span class="text-${color}">${result.message}</span>`;
                
                // Actualizar estilos del input
                this.classList.remove('border-green-400', 'border-red-400', 'border-yellow-400', 'border-blue-400', 'border-white/30');
                this.classList.add(`border-${color.replace('text-', '')}`);
                
                // Habilitar/deshabilitar bot√≥n
                saveBtn.disabled = !result.isValid;
            }
        });

        editInput.addEventListener('blur', function() {
            if (this.value.length > 0 && !isValidField) {
                saveBtn.disabled = true;
            }
        });
    }

    // Agregar event listeners a todos los campos editables
    const editableFields = document.querySelectorAll('[data-field]');
    editableFields.forEach(field => {
        const fieldName = field.getAttribute('data-field');
        if (fieldConfig[fieldName]) {
            field.addEventListener('click', function() {
                const fieldValue = this.getAttribute('data-value') || '';
                openEditDialog(fieldName, fieldValue);
            });
        }
    });

    // Funci√≥n para abrir el dialog
    function openEditDialog(fieldName, value) {
        if (!dialog || !editInput || !fieldConfig[fieldName]) {
            console.error('Elementos del dialog no encontrados o campo no configurado');
            return;
        }

        const config = fieldConfig[fieldName];
        currentField = fieldName;
        currentValue = value;
        
        // Configurar el contenido del dialog
        dialogTitle.textContent = config.title;
        inputLabel.textContent = config.label;
        editInput.type = config.type;
        editInput.placeholder = config.placeholder;
        editInput.maxLength = config.maxlength || 255;
        if (config.pattern) {
            editInput.pattern = config.pattern;
        } else {
            editInput.removeAttribute('pattern');
        }
        
        editInput.value = value === 'No configurado' ? '' : value;
        
        // Resetear estado
        isValidField = false;
        saveBtn.disabled = true;
        feedback.innerHTML = `<span class="text-white/60">${config.helpText}</span>`;
        
        // Actualizar texto del bot√≥n
        saveBtn.textContent = `üíæ Guardar ${config.title.replace('Editar ', '')}`;
        
        // Abrir dialog
        dialog.showModal();
        
        // Enfocar el input
        editInput.focus();
        editInput.select();
        
        // Validar valor inicial si existe
        if (editInput.value) {
            editInput.dispatchEvent(new Event('input'));
        }
    }

    // Funci√≥n para cerrar el dialog
    function closeEditDialog() {
        if (dialog) {
            dialog.close();
        }
        currentField = '';
        currentValue = '';
        isValidField = false;
        if (editInput) editInput.value = '';
        if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.textContent = 'üíæ Guardar';
        }
    }

    // Funci√≥n para guardar cambios
    async function saveChanges() {
        if (!editInput || !isValidField || !currentField) {
            showMessage('Por favor, ingresa un valor v√°lido', 'error');
            return;
        }
        
        const newValue = editInput.value.trim();
        const config = fieldConfig[currentField];
        
        if (!newValue && currentField !== 'phone' && !currentField.includes('instagram') && !currentField.includes('linkedin') && !currentField.includes('tiktok') && !currentField.includes('x')) {
            showMessage('Por favor, ingresa un valor v√°lido', 'error');
            return;
        }

        // Para DNI, convertir a may√∫sculas
        const finalValue = currentField === 'dni' ? newValue.toUpperCase() : newValue;

        // Deshabilitar bot√≥n mientras se procesa
        if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.textContent = 'üíæ Guardando...';
        }
        
        try {
            console.log(`üì§ Actualizando ${currentField}:`, finalValue);

            // Preparar el body de la petici√≥n seg√∫n el endpoint
            const body = config.apiEndpoint === '/api/profile/update-dni' 
                ? { dni: finalValue }
                : { field: currentField, value: finalValue };

            const response = await fetch(config.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify(body),
            });

            const data = await response.json().catch(() => null);
            console.log("üì¶ Respuesta de la API:", data);

            if (response.ok) {
                showMessage(`${config.title.replace('Editar ', '')} actualizado correctamente. Recargando...`, 'success');
                
                // Refrescar la p√°gina despu√©s de un peque√±o delay
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                throw new Error(data?.error || `Error al actualizar ${currentField}`);
            }
        } catch (error) {
            console.error('‚ùå Error al guardar:', error);
            showMessage(`Error al actualizar: ${error.message}`, 'error');
        } finally {
            // Rehabilitar bot√≥n
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.textContent = `üíæ Guardar ${config.title.replace('Editar ', '')}`;
            }
        }
    }

    // Funci√≥n para mostrar mensajes
    function showMessage(text, type) {
        const message = document.createElement('div');
        message.className = `fixed top-4 right-4 px-4 py-2 rounded-lg text-white z-50 backdrop-filter-blur-md ${
            type === 'success' ? 'bg-green-500/50 border-green-500' : 'bg-red-500/50 border-red-500'
        }`;
        message.textContent = text;
        
        document.body.appendChild(message);
        
        setTimeout(() => {
            message.remove();
        }, 4000);
    }

    // Event listeners para los botones del dialog
    const cancelBtn = document.getElementById('cancelBtn');
    const closeBtn = document.getElementById('closeBtn');

    if (saveBtn) {
        saveBtn.addEventListener('click', saveChanges);
    }

    if (cancelBtn) {
        cancelBtn.addEventListener('click', closeEditDialog);
    }

    if (closeBtn) {
        closeBtn.addEventListener('click', closeEditDialog);
    }

    // Cerrar dialog con Escape
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && dialog && dialog.open) {
            closeEditDialog();
        }
    });

    // Enviar formulario con Enter
    if (editInput) {
        editInput.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                if (isValidField) {
                    saveChanges();
                }
            }
        });
    }

    // Hacer las funciones globalmente accesibles para compatibilidad
    window.openEditDialog = openEditDialog;
    window.closeEditDialog = closeEditDialog;
    window.saveChanges = saveChanges;
});
</script>
