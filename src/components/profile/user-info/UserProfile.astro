---
// Componente para mostrar el perfil del usuario con capacidad de edición

import EditIcon from "@/assets/icons/edit.svg";
import InstagramIcon from "@/assets/social/instagram.svg";
import LinkedInIcon from "@/assets/social/linkedin.svg";
import TikTokIcon from "@/assets/social/tiktok.svg";
import XIcon from "@/assets/social/x.svg";

interface Props {
    user: any;
    roleNames?: string[];
}

const { user, roleNames = [] } = Astro.props;

const name = user?.user_metadata?.full_name || user?.user_metadata?.name || 'No disponible';
const email = user?.user_metadata?.email;
const dni = user?.user_metadata?.dni;
const phone = user?.user_metadata?.phone;
const instagram = user?.user_metadata?.instagram;
const linkedin = user?.user_metadata?.linkedin;
const tiktok = user?.user_metadata?.tiktok;
const x = user?.user_metadata?.x;
---

<div class="bg-white/5 border border-white/20 rounded-xl p-4 justify-between h-full col-span-3 flex flex-col row-span-2 col-span-2">
    <div>
        <div class="space-y-2 grid grid-cols-5 gap-6">
            <div class="col-span-2">
                <h4 class="text-azul-brillante font-bold text-mid mb-3">Información Personal:</h4>
                <div class="space-y-2">
                    <div class="flex gap-2 items-center group cursor-pointer hover:bg-white/5 rounded-lg p-2 -mx-2 transition-all" 
                        data-field="name" data-value={name}>
                        <span class="text-gray-300 text-sm w-16">Nombre:</span>
                        <span class="text-white font-medium group-hover:text-azul-brillante transition-colors flex-1">{name}</span>
                        <EditIcon class="w-4 h-4 text-gray-400 group-hover:text-azul-brillante transition-colors" />
                    </div>
                    <div class="flex gap-2 items-center group cursor-pointer hover:bg-white/5 rounded-lg p-2 -mx-2 transition-all" 
                        data-field="email" data-value={email}>
                        <span class="text-gray-300 text-sm w-16">Email:</span>
                        <span class="text-white font-medium group-hover:text-azul-brillante transition-colors flex-1">{email}</span>
                        <EditIcon class="w-4 h-4 text-gray-400 group-hover:text-azul-brillante transition-colors" />
                    </div>
                    <div class="flex gap-2 items-center group cursor-pointer hover:bg-white/5 rounded-lg p-2 -mx-2 transition-all" 
                        data-field="dni" data-value={dni}>
                        <span class="text-gray-300 text-sm w-16">DNI:</span>
                        <span class="text-white font-medium group-hover:text-azul-brillante transition-colors flex-1">{dni || 'No configurado'}</span>
                        <EditIcon class="w-4 h-4 text-gray-400 group-hover:text-azul-brillante transition-colors" />
                    </div>
                    <div class="flex gap-2 items-center group cursor-pointer hover:bg-white/5 rounded-lg p-2 -mx-2 transition-all" 
                        data-field="phone" data-value={phone}>
                        <span class="text-gray-300 text-sm w-16">Teléfono:</span>
                        <span class="text-white font-medium group-hover:text-azul-brillante transition-colors flex-1">{phone || 'No configurado'}</span>
                        <EditIcon class="w-4 h-4 text-gray-400 group-hover:text-azul-brillante transition-colors" />
                    </div>
                </div>
            </div>
            <div class="col-span-2">
                <h4 class="text-azul-brillante font-bold text-mid mb-3">Redes Sociales:</h4>
                <div class="space-y-2">
                    <div class="flex gap-2 items-center group cursor-pointer hover:bg-white/5 rounded-lg p-2 -mx-2 transition-all" 
                        data-field="instagram" data-value={instagram}>
                        <InstagramIcon class="w-4 h-4 text-pink-500" />
                        <span class="text-gray-300 text-sm">Instagram:</span>
                        <span class="text-white font-medium group-hover:text-azul-brillante transition-colors flex-1">
                            {instagram || 'No configurado'}
                        </span>
                        <EditIcon class="w-4 h-4 text-gray-400 group-hover:text-azul-brillante transition-colors" />
                    </div>
                    <div class="flex gap-2 items-center group cursor-pointer hover:bg-white/5 rounded-lg p-2 -mx-2 transition-all" 
                        data-field="linkedin" data-value={linkedin}>
                        <LinkedInIcon class="w-4 h-4 text-blue-500" />
                        <span class="text-gray-300 text-sm">LinkedIn:</span>
                        <span class="text-white font-medium group-hover:text-azul-brillante transition-colors flex-1">
                            {linkedin || 'No configurado'}
                        </span>
                        <EditIcon class="w-4 h-4 text-gray-400 group-hover:text-azul-brillante transition-colors" />
                    </div>
                    <div class="flex gap-2 items-center group cursor-pointer hover:bg-white/5 rounded-lg p-2 -mx-2 transition-all" 
                        data-field="tiktok" data-value={tiktok}>
                        <TikTokIcon class="w-4 h-4 text-red-500" />
                        <span class="text-gray-300 text-sm">TikTok:</span>
                        <span class="text-white font-medium group-hover:text-azul-brillante transition-colors flex-1">
                            {tiktok || 'No configurado'}
                        </span>
                        <EditIcon class="w-4 h-4 text-gray-400 group-hover:text-azul-brillante transition-colors" />
                    </div>
                    <div class="flex gap-2 items-center group cursor-pointer hover:bg-white/5 rounded-lg p-2 -mx-2 transition-all" 
                        data-field="x" data-value={x}>
                        <XIcon class="w-4 h-4 text-white" />
                        <span class="text-gray-300 text-sm">X (Twitter):</span>
                        <span class="text-white font-medium group-hover:text-azul-brillante transition-colors flex-1">
                            {x || 'No configurado'}
                        </span>
                        <EditIcon class="w-4 h-4 text-gray-400 group-hover:text-azul-brillante transition-colors" />
                    </div>
                </div>
            </div>
            <div class="col-span-1">
                <h4 class="text-azul-brillante font-bold text-mid mb-3">Roles:</h4>
                <div class="space-y-2">
                    {roleNames.length > 0 ? (
                        roleNames.map(role => (
                            <div class="flex items-center">
                                <span class="inline-flex items-center px-3 py-1 text-xs font-medium text-white bg-azul-oscuro/30 border border-dai/40 rounded-full backdrop-blur-sm">
                                    {role}
                                </span>
                            </div>
                        ))
                    ) : (
                        <div class="flex items-center p-2 rounded-lg">
                            <span class="text-gray-400 text-sm">Sin roles asignados</span>
                        </div>
                    )}
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Manejar clics en campos editables
        const editableFields = document.querySelectorAll('[data-field]') as NodeListOf<HTMLElement>;
        
        editableFields.forEach((field: HTMLElement) => {
            field.addEventListener('click', function(this: HTMLElement) {
                const fieldName = this.getAttribute('data-field');
                const currentValue = this.getAttribute('data-value') || '';
                const valueSpan = this.querySelector('span:nth-child(3)') as HTMLSpanElement;
                
                if (!fieldName || !valueSpan) return;
                
                // Crear input para edición
                const input = document.createElement('input');
                input.type = fieldName === 'email' ? 'email' : 
                            fieldName === 'phone' ? 'tel' :
                            fieldName.includes('instagram') || fieldName.includes('linkedin') || 
                            fieldName.includes('tiktok') || fieldName.includes('x') ? 'url' : 'text';
                
                input.value = currentValue === 'No configurado' ? '' : currentValue;
                input.className = 'bg-white/10 border border-azul-brillante/50 rounded px-2 py-1 text-white text-sm flex-1 focus:outline-none focus:border-azul-brillante';
                
                if (fieldName.includes('instagram') || fieldName.includes('linkedin') || 
                    fieldName.includes('tiktok') || fieldName.includes('x')) {
                    input.placeholder = `URL de ${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}`;
                }
                
                // Reemplazar el span con el input
                const originalText = valueSpan.textContent || '';
                const parent = valueSpan.parentNode;
                if (!parent) return;
                
                parent.replaceChild(input, valueSpan);
                input.focus();
                
                // Manejar guardar al perder foco o presionar Enter
                const saveValue = async () => {
                    const newValue = input.value.trim();

                    try {
                        console.log("📤 Enviando actualización:", fieldName, "=", newValue);

                        const response = await fetch('/api/auth/update-profile', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                [fieldName]: newValue,
                            }),
                        });

                        console.log("📥 Respuesta cruda:", response);

                        const data = await response.json().catch(() => null);
                        console.log("📦 Respuesta JSON:", data);

                        if (response.ok) {
                            // Restaurar el span con el nuevo valor
                            const newSpan = document.createElement('span');
                            newSpan.className = 'text-white font-medium group-hover:text-azul-brillante transition-colors flex-1';
                            newSpan.textContent = newValue || 'No configurado';
                            const inputParent = input.parentNode;
                            if (inputParent) {
                                inputParent.replaceChild(newSpan, input);
                            }

                            // Actualizar el atributo data-value
                            field.setAttribute('data-value', newValue);

                            showMessage('Perfil actualizado correctamente', 'success');
                        } else {
                            throw new Error(data?.error || 'Error al actualizar el perfil');
                        }
                    } catch (error) {
                        console.error('❌ Error en saveValue:', error);

                        // Restaurar valor original
                        const newSpan = document.createElement('span');
                        newSpan.className = 'text-white font-medium group-hover:text-azul-brillante transition-colors flex-1';
                        newSpan.textContent = originalText;
                        const inputParent = input.parentNode;
                        if (inputParent) {
                            inputParent.replaceChild(newSpan, input);
                        }

                        showMessage('Error al actualizar el perfil', 'error');
                    }
                };
                
                input.addEventListener('blur', saveValue);
                input.addEventListener('keypress', function(e: KeyboardEvent) {
                    if (e.key === 'Enter') {
                        saveValue();
                    } else if (e.key === 'Escape') {
                        // Cancelar edición
                        const newSpan = document.createElement('span');
                        newSpan.className = 'text-white font-medium group-hover:text-azul-brillante transition-colors flex-1';
                        newSpan.textContent = originalText;
                        const inputParent = input.parentNode;
                        if (inputParent) {
                            inputParent.replaceChild(newSpan, input);
                        }
                    }
                });
            });
        });
        
        // Función para mostrar mensajes
        function showMessage(text: string, type: 'success' | 'error') {
            const message = document.createElement('div');
            message.className = `fixed top-4 right-4 px-4 py-2 rounded-lg text-white z-50 ${
                type === 'success' ? 'bg-green-500' : 'bg-red-500'
            }`;
            message.textContent = text;
            
            document.body.appendChild(message);
            
            setTimeout(() => {
                message.remove();
            }, 3000);
        }
    });
</script>