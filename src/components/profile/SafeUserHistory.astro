---
// Wrapper para UserHistory que maneja errores de manera segura
import UserHistory from "./user-history.astro";
import UserHistorySkeleton from "../ui/skeletons/UserHistorySkeleton.astro";

const user = Astro.locals?.user;
let hasError = false;
let errorMessage = '';

// El historial puede fallar independientemente del usuario
try {
    // Verificaciones básicas
    if (!user?.id) {
        hasError = true;
        errorMessage = 'No se puede cargar historial sin ID de usuario';
    }
} catch (error) {
    hasError = true;
    errorMessage = `Error preparando historial: ${error}`;
}
---

<div class="col-span-1 lg:col-span-10 xl:col-span-3 min-h-[300px] lg:min-h-[35rem]">
{hasError ? (
    <div>
        <UserHistorySkeleton />
        <script define:vars={{ errorMessage }}>
            console.warn('UserHistory: Mostrando skeleton debido a:', errorMessage);
        </script>
    </div>
) : (
    <div class="user-history-wrapper">
        <UserHistory />
        <script>
            // Manejo de errores del lado del cliente para historial
            document.addEventListener('DOMContentLoaded', () => {
                const wrapper = document.querySelector('.user-history-wrapper');
                if (wrapper) {
                    // Verificar si el componente se renderizó correctamente
                    const content = wrapper.innerHTML.trim();
                    if (!content || content.includes('error') || content.includes('failed')) {
                        console.warn('UserHistory: Detectado problema en renderizado');
                        
                        // Cargar historial de forma asíncrona
                        fetch('/api/profile/user-history')
                            .then(response => response.json())
                            .then(data => {
                                if (data.error) {
                                    throw new Error(data.error);
                                }
                                // Actualizar historial si es necesario
                            })
                            .catch(error => {
                                console.error('Error cargando historial:', error);
                                // Mantener skeleton visible
                            });
                    }
                }
            });
        </script>
    </div>
)}
</div>

<template data-fallback>
    <UserHistorySkeleton />
</template>
