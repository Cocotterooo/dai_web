---
interface Props {
  id: string;
  name: string;
  label: string;
  placeholder?: string;
  required?: boolean;
  options: Array<{
    value: string | number;
    label: string;
    disabled?: boolean;
  }>;
  value?: string | number;
  multiple?: boolean;
  className?: string;
}

const { 
  id, 
  name, 
  label, 
  placeholder = "Seleccionar...", 
  required = false, 
  options = [],
  value = "",
  multiple = false,
  className = "",
} = Astro.props;
---

<div class={`custom-select-container ${className}`}>
  <label for={id} class="block text-sm font-medium text-white/80 mb-2">
    {label}
    {required && <span class="text-red-400">*</span>}
  </label>
  
  <div class="relative">
    <div 
      class="custom-select w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white cursor-pointer focus:outline-none focus:ring-2 focus:ring-azul-brillante transition-all duration-200 hover:bg-white/15"
      tabindex="0"
      data-select-id={id}
    >
      <div class="select-value flex items-center justify-between">
        <span class="placeholder text-white/60">{placeholder}</span>
        <svg class="select-arrow w-5 h-5 text-white/60 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </div>
    </div>
    
    <div class="select-dropdown hidden absolute top-full left-0 right-0 mt-1 bg-slate-800 border border-white/20 rounded-lg shadow-lg z-50 max-h-48 overflow-y-auto">
      <div class="py-1">
        {options.map((option) => (
          <div 
            class="select-option px-3 py-2 text-white hover:bg-white/10 cursor-pointer transition-colors duration-150"
            data-value={option.value}
            data-disabled={option.disabled ? 'true' : 'false'}
            style={option.disabled ? 'opacity: 0.5; cursor: not-allowed;' : ''}
          >
            {option.label}
          </div>
        ))}
      </div>
    </div>
  </div>
  
  <!-- Campo hidden para el formulario -->
  <input 
    type="hidden" 
    id={id} 
    name={name} 
    value={value}
    required={required}
  />
</div>

<style>
  .custom-select-container {
    position: relative;
  }
  
  .custom-select:focus {
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
  }
  
  .select-dropdown.show {
    display: block;
  }
  
  .select-arrow.rotate {
    transform: rotate(180deg);
  }
  
  .select-option:hover:not([data-disabled="true"]) {
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .select-option.selected {
    background-color: rgba(59, 130, 246, 0.2);
    color: #60a5fa;
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    // Inicializar todos los selects custom
    document.querySelectorAll('.custom-select').forEach(initCustomSelect);
    
    function initCustomSelect(selectElement) {
      const selectId = selectElement.getAttribute('data-select-id');
      const hiddenInput = document.getElementById(selectId);
      const valueElement = selectElement.querySelector('.select-value span:first-child');
      const arrowElement = selectElement.querySelector('.select-arrow');
      const dropdown = selectElement.parentElement.querySelector('.select-dropdown');
      const options = dropdown.querySelectorAll('.select-option');
      
      // Toggle dropdown
      selectElement.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        // Cerrar otros dropdowns
        document.querySelectorAll('.select-dropdown.show').forEach(dd => {
          if (dd !== dropdown) {
            dd.classList.remove('show');
            dd.parentElement.querySelector('.select-arrow').classList.remove('rotate');
          }
        });
        
        // Toggle este dropdown
        dropdown.classList.toggle('show');
        arrowElement.classList.toggle('rotate');
      });
      
      // Seleccionar opción
      options.forEach(option => {
        option.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          if (this.getAttribute('data-disabled') === 'true') return;
          
          const value = this.getAttribute('data-value');
          const label = this.textContent;
          
          // Actualizar valor
          hiddenInput.value = value;
          valueElement.textContent = label;
          valueElement.classList.remove('placeholder');
          
          // Actualizar selección visual
          options.forEach(opt => opt.classList.remove('selected'));
          this.classList.add('selected');
          
          // Cerrar dropdown
          dropdown.classList.remove('show');
          arrowElement.classList.remove('rotate');
          
          // Disparar evento de cambio
          const changeEvent = new Event('change', { bubbles: true });
          hiddenInput.dispatchEvent(changeEvent);
        });
      });
      
      // Cerrar dropdown al hacer click fuera
      document.addEventListener('click', function(e) {
        if (!selectElement.contains(e.target) && !dropdown.contains(e.target)) {
          dropdown.classList.remove('show');
          arrowElement.classList.remove('rotate');
        }
      });
      
      // Navegación con teclado
      selectElement.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          selectElement.click();
        } else if (e.key === 'Escape') {
          dropdown.classList.remove('show');
          arrowElement.classList.remove('rotate');
        }
      });
    }
  });
</script>
