---
import IncomingBuses from '@/components/home/Buses/IncomingBuses.astro'
import CityTitle from '@/components/home/Buses/CityTitle.astro'
---
<section id="buses" class="flex flex-col w-full text-center max-w-(--breakpoint-xl) mx-auto text-white border gap-6 border-azul-brillante/20 bg-white/5 backdrop-blur-sm rounded-lg px-4 py-8 sm:px-8 items-center">
    <h1 class="text-3xl sm:text-4xl lg:text-[40px] font-extrabold text-azul-brillante text-pretty">
        Paradas de Vitrasa
    </h1>
    <p class="text-lg sm:text-xl text-pretty">
        Consulta los tiempos de llegada de los autobuses a las paradas cercanas a las dos sedes de la Escuela de Ingenier√≠a Industrial.
    </p>
    
    <div class="flex flex-col mid:flex-row gap-6 md:gap-15 w-full justify-center items-center mid:items-start">
        
        <article id="incoming-buses-cuvi" class="inset-0 flex flex-col w-fit gap-4 border-1 rounded-xl border-dai/30 p-4">
            <div>
                <h2 class="text-3xl text-azul-brillante text-center sm:text-start">Sede Campus</h2>
                <p class="text-base sm:text-lg text-center sm:text-start">Parada debajo de CINTECX</p>
            </div>
            <div class="table-fixed text-[12px] sm:text-[16px] overflow-y-auto max-h-[255px] relative">
                <IncomingBuses stopId={8700} />
            </div>
        </article>

        <article id="city-buses-content" class="flex flex-col w-fit text-start gap-1 sm:gap-4 border-1 rounded-xl border-dai/30 p-4 bg-blue-950/5 mid:h-auto">
            <CityTitle />
            <div id="industriales-table" class="text-[12px] sm:text-[16px] overflow-y-auto max-h-[255px] relative">
                <IncomingBuses stopId={14227} />
            </div>
            <div id="comercio-table" class="text-[12px] sm:text-[16px] overflow-y-auto max-h-[255px] relative">
                <IncomingBuses stopId={8460} />
            </div>
        </article>
    </div>
</section>

<script type="module" is:inline>
    import { io } from 'https://cdn.socket.io/4.8.1/socket.io.esm.min.js';

    let socket = null;
    let intervalId = null;
    const stops = [14227, 8460, 8700];
    const inminentTime = 3;
    const previousBusesMap = {};

    function initializeBusesData() {
        // Limpiar conexi√≥n y temporizador existentes
        if (socket) {
            socket.disconnect();
            socket = null;
        }
        if (intervalId) {
            clearInterval(intervalId);
            intervalId = null;
        }

		// Reinicializar el mapa de buses previos
		//Object.keys(previousBusesMap).forEach(key => delete previousBusesMap[key]);

        // Crear nueva conexi√≥n
        try {
            const socketUrl = window.location.hostname === 'localhost' 
                ? 'http://localhost:3001' : 'https://analand.net/';
            socket = io(socketUrl);
        } catch (error) {
            console.error("‚ùå Error al conectar al servidor:", error);
        }

        function createEmptyRows(tableBody, count) {
            let emptyHtml = '';
            for (let i = 0; i < count; i++) {
                emptyHtml += `
                    <tr class="border-blue-900/30 border-b last:border-b-0 transition-colors duration-200 hover:bg-blue-900/20">
                        <td class="py-2 px-4 opacity-75">
                            <div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"></div>
                        </td>
                        <td class="py-2 px-4 opacity-75">
                            <div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"></div>
                        </td>
                        <td class="py-2 px-4 opacity-75">
                            <div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"></div>
                        </td>
                    </tr>
                `;
            }
            tableBody.innerHTML = emptyHtml;
        }

        function updateTable(stopId, incomingBuses) {
			const tableBody = document.querySelector(`#incomingBuses-${stopId} tbody`);
			if (!tableBody) {
				console.warn(`‚ö†Ô∏è No se encontr√≥ tbody para stopId ${stopId}`);
				return;
			}

			// Obtener buses previos (o array vac√≠o si es la primera vez)
			const previousBuses = previousBusesMap[stopId] || [];
			let tableHtml = '';
			const flashRows = []; // Array para almacenar las filas que necesitan animaci√≥n flash

			/* console.log(`üîç Comparando buses para parada ${stopId}:`);
			console.log('Buses previos:', previousBuses);
			console.log('Buses nuevos:', incomingBuses); */

			if (incomingBuses.length > 0) {
				incomingBuses.forEach((bus, index) => {
					const isImminent = (bus.minutes !== undefined && bus.minutes <= inminentTime) || bus.minutes === null;
					let rowClass = isImminent
						? "bg-pulse animate-bg-pulse border-blue-900/30 border-b last:border-b-0 bg-blue-950/30 duration-200"
						: "border-blue-900/30 border-b last:border-b-0 transition-colors duration-400 hover:bg-blue-900/20";
					
					// Obtener el bus previo en la misma posici√≥n
					const prevBus = previousBuses[index];
					
					// Funci√≥n helper para comparar buses de manera m√°s robusta
					const busesAreEqual = (bus1, bus2) => {
						if (!bus1 || !bus2) return false;
						
						// Normalizar valores null/undefined a 0 para minutes
						const bus1Minutes = bus1.minutes === null || bus1.minutes === undefined ? 0 : bus1.minutes;
						const bus2Minutes = bus2.minutes === null || bus2.minutes === undefined ? 0 : bus2.minutes;
						
						return bus1.line === bus2.line && 
							bus1.route === bus2.route && 
							bus1Minutes === bus2Minutes;
					};

					// Detectar si es nuevo o ha cambiado
					const isNewOrChanged = !busesAreEqual(bus, prevBus);

					/*console.log(`Bus ${index}:`, {
						actual: bus,
						previo: prevBus,
						nuevo_o_cambiado: isNewOrChanged
					});*/

					// NO aplicamos las clases flash aqu√≠ inicialmente
					if (isNewOrChanged) {
						flashRows.push(index); // Marcar esta fila para animaci√≥n posterior
						// console.log(`üîÑ Bus ${index} ha cambiado, programando animaci√≥n`);
					}

					// Normalizar minutos para mostrar (null -> 0)
					const displayMinutes = bus.minutes === null ? 0 : bus.minutes;

					tableHtml += `
						<tr class="${rowClass}" data-row-index="${index}">
							<td class="py-2 px-4 text-white">${bus.line || 'N/A'}</td>
							<td class="py-2 px-4 text-white text-pretty">${bus.route || 'Sin destino'}</td>
							<td class="py-2 px-4 text-white">${displayMinutes}</td>
						</tr>
					`;
				});
			} else {
				console.log(`üò° No hay buses entrantes para ${stopId}, VITRASAAAAAAAAAAAAAA!!!!`);
			}

			// Rellenar filas vac√≠as
			const remainingRows = 5 - incomingBuses.length;
			for (let i = 0; i < remainingRows; i++) {
				const emptyRowIndex = incomingBuses.length + i;
				tableHtml += `
					<tr class="border-blue-900/15 border-b last:border-b-0 transition-colors duration-200 hover:bg-blue-900/30" data-row-index="${emptyRowIndex}">
						<td class="py-2 px-4 opacity-75">
							<div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"></div>
						</td>
						<td class="py-2 px-4 opacity-75">
							<div class="flex animate-pulse space-x-4 bg-dai/15 rounded-2xl text-center justify-center">Sin Servicio</div>
						</td>
						<td class="py-2 px-4 opacity-75">
							<div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"></div>
						</td>
					</tr>
				`;
			}

			// Primero actualizamos el HTML
			tableBody.innerHTML = tableHtml;

			// Luego aplicamos las animaciones flash con un peque√±o delay para que sea visible
			if (flashRows.length > 0) {
				setTimeout(() => {
					flashRows.forEach(rowIndex => {
						const row = tableBody.querySelector(`tr[data-row-index="${rowIndex}"]`);
						if (row) {
							row.classList.add('flash', 'flash-animation');
							// console.log(`‚ú® Aplicadas clases flash a la fila ${rowIndex} en parada ${stopId}`);
							
							// Programar la eliminaci√≥n despu√©s de 1 segundo
							setTimeout(() => {
								row.classList.remove('flash', 'flash-animation');
								// console.log(`üö´ Eliminadas clases flash de la fila ${rowIndex} en parada ${stopId}`);
							}, 1000);
						}
					});
				}, 50); // Peque√±o delay para asegurar que el DOM se ha actualizado
			}

			// Guardar el estado actual para la pr√≥xima comparaci√≥n
			// Hacer una copia profunda para evitar referencias
			previousBusesMap[stopId] = incomingBuses.map(bus => ({
				line: bus.line,
				route: bus.route,
				minutes: bus.minutes
			}));
		}

        const stopIds = {
            "8460": "Comercio",
            "14227": "Industriales",
            "8700": "CUVI-EEI"
        };

        function updateTables(data) {
            // console.log("üîÑ Actualizando tablas con datos");

            if (!data.data) {
                console.warn("‚ö†Ô∏è Datos inv√°lidos recibidos:", data);
                return;
            }

            Object.keys(stopIds).forEach((stopId) => {
                // console.log(`üîç Procesando stopId ${stopId}`);

                const stopData = data.data[stopId];
                if (!stopData || !stopData.incomingBuses) {
                    console.warn(`‚ö†Ô∏è No se encontraron datos para stopId ${stopId}`);
                    updateTable(stopId, []);
                    return;
                }

                const buses = stopData.incomingBuses.map(bus => ({
                    line: bus.idBusSAE ? bus.idBusSAE : bus.idBusLine ? bus.idBusLine : null,
                    route: bus.desBusLine ? bus.desBusLine : null,
                    minutes: bus.minutesArrive ? bus.minutesArrive : null
                }));

                // console.log(`üöå Datos para stopId ${stopId}:`, buses);
                updateTable(stopId, buses);
            });
        }

        stops.forEach((stopId) => {
            const tableBody = document.querySelector(`#incomingBuses-${stopId} tbody`);
            if (tableBody) {
                createEmptyRows(tableBody, 5);
            }
        });

        socket.on("connect", () => {
            console.log("üîå Conectado al servidor");
            console.log("üîå Conectado a:", socket.io.uri);
            document.querySelectorAll(".connection-error-overlay").forEach(el => {
                el.classList.add("hidden");
            });
            socket.emit("BusStop");
        });

        socket.on("connect_error", (err) => {
            console.error("‚ùå Error de conexi√≥n:", err.message);
            console.error(`üîß URL intentada: ${socket.io.uri}`);
            console.error("üåê Hostname actual:", window.location.hostname);
            console.error("üìç Protocolo:", window.location.protocol);
            console.error("üîç Error completo:", err);
            document.querySelectorAll(".connection-error-overlay").forEach(el => {
                el.classList.remove("hidden");
            });
        });

        socket.on("BusStop", (data) => {
            // console.log("üì° Datos recibidos:", data);
            updateTables(data);
        });

        /*intervalId = setInterval(() => {
            if (socket && socket.connected) {
                stops.forEach((stopId) => {
                    socket.emit("BusStop", { stopId });
                });
            }
        }, 15000);*/
    }

    document.addEventListener('DOMContentLoaded', initializeBusesData);
    document.addEventListener('astro:page-load', initializeBusesData);
    document.addEventListener('astro:after-swap', initializeBusesData);

    document.addEventListener('astro:before-swap', () => {
        if (socket) {
            socket.disconnect();
            socket = null;
        }
        if (intervalId) {
            clearInterval(intervalId);
            intervalId = null;
        }
    });
</script>