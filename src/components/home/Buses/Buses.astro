---
import IncomingBuses from '@/components/home/Buses/IncomingBuses.astro'
import CityTitle from '@/components/home/Buses/CityTitle.astro'
---
<section id="buses" class="flex flex-col w-full text-center max-w-(--breakpoint-xl) mx-auto text-white border gap-6 border-azul-brillante/20 bg-white/5 backdrop-blur-sm rounded-lg px-4 py-8 sm:px-8 items-center">
    <h1 class="text-3xl sm:text-4xl lg:text-[40px] font-extrabold text-azul-brillante text-pretty">
        Paradas de Vitrasa
    </h1>
	<p class="text-lg sm:text-xl text-pretty">
		Consulta los tiempos de llegada de los autobuses a las paradas cercanas a las dos sedes de la Escuela de Ingenier√≠a Industrial.
	</p>
    
    <div class="flex flex-col mid:flex-row gap-6 md:gap-15 w-full justify-center items-center mid:items-start">
        
        <!-- Bloque Campus -->
        <article id="incoming-buses-cuvi" class="inset-0 flex flex-col w-fit gap-4 border-1 rounded-xl border-dai/30 p-4">
            <div>
                <h2 class="text-3xl text-azul-brillante text-center sm:text-start">Sede Campus</h2>
                <p class="text-base sm:text-lg text-center sm:text-start">Parada debajo de CINTECX</p>
            </div>
            <div class="table-fixed text-[12px] sm:text-[16px]">
                <IncomingBuses stopId={8700} />
            </div>
        </article>

        <!-- Bloque Ciudad -->
        <article id="city-buses-content" class="flex flex-col w-fit text-start gap-1 sm:gap-4 border-1 rounded-xl border-dai/30 p-4 bg-blue-950/5">
			<CityTitle />
			<div id="industriales-table" class="text-[12px] sm:text-[16px]">
				<IncomingBuses stopId={14227} />
			</div>
			<div id="comercio-table" class="text-[12px] sm:text-[16px]">
				<IncomingBuses stopId={8460} />
			</div>
		</article>
    </div>
</section>

<script type="module" is:inline>
	import { io } from 'https://cdn.socket.io/4.8.1/socket.io.esm.min.js';

	let socket = null;
	let intervalId = null;
	const stops = [14227, 8460, 8700];
	const inminentTime = 3;
	const previousBusesMap = {};

	function initializeBusesData() {
		// Limpiar conexi√≥n existente si la hay
		if (socket) {
			socket.disconnect();
			socket = null;
		}

		// Limpiar interval existente
		if (intervalId) {
			clearInterval(intervalId);
			intervalId = null;
		}

		// Reinicializar el mapa de buses previos
		Object.keys(previousBusesMap).forEach(key => delete previousBusesMap[key]);

		// Crear nueva conexi√≥n
		try {
			// En desarrollo, usar el proxy local. En producci√≥n, usar la URL completa
			const socketUrl = window.location.hostname === 'localhost' 
				? window.location.origin // Usar el proxy local
				: 'http://daiwebbackend-backend-7dhak5-f8515d-185-249-197-109.traefik.me/';
			socket = io(socketUrl);
		} catch (error) {
			console.error("‚ùå Error al conectar al servidor:", error);
		}

		// Crear filas vac√≠as para las tablas
		function createEmptyRows(tableBody, count) {
			let emptyHtml = '';
			for (let i = 0; i < count; i++) {
				emptyHtml += `
					<tr class="border-blue-900/30 border-b last:border-b-0 transition-colors duration-200 hover:bg-blue-900/20">
						<td class="py-2 px-4 opacity-75">
							<div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"></div>
						</td>
						<td class="py-2 px-4 opacity-75">
							<div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"></div>
						</td>
						<td class="py-2 px-4 opacity-75">
							<div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"></div>
						</td>
					</tr>
				`;
			}
			tableBody.innerHTML = emptyHtml;
		}

		// Actualizar la tabla con los datos recibidos
		function updateTable(stopId, data) {
			const tableBody = document.querySelector(`#incomingBuses-${stopId} tbody`);
			if (!tableBody) {
				console.warn(`‚ö†Ô∏è No se encontr√≥ tbody para stopId ${stopId}`);
				return;
			}

			let tableHtml = '';
			const busesToDisplay = data.incomingBuses || [];
			const previousBuses = previousBusesMap[stopId] || [];

			if (busesToDisplay.length > 0) {
				busesToDisplay.forEach((bus) => {
					const isImminent = bus.minutes !== undefined && bus.minutes <= inminentTime && bus.minutes >= 0;
					let rowClass = isImminent
						? "bg-pulse animate-bg-pulse border-blue-900/30 border-b last:border-b-0 bg-blue-950/30 duration-200"
						: "border-blue-900/30 border-b last:border-b-0 transition-colors duration-400 hover:bg-blue-900/20";

					// --- Detectar cambios y nuevos buses para animarlos ---
					// 1. Encontrar todos los buses previos que coinciden en l√≠nea y ruta
					const matchingPrevious = previousBuses.filter(
						prev => prev.line === bus.line && prev.route === bus.route,
					);

					let prevBusToCompare = null;
					let isNewBus = false;

					// Si no hay buses previos que coincidan, es un bus nuevo
					if (matchingPrevious.length === 0) {
						isNewBus = true;
					} else {
						let minDiff = Infinity;
						matchingPrevious.forEach(prev => {
							const diff = Math.abs(prev.minutes - bus.minutes);
							if (diff < minDiff) {
								minDiff = diff;
								prevBusToCompare = prev;
							}
						});
					}

					// 2. A√±adir la clase de animaci√≥n si el tiempo ha cambiado o es un bus nuevo
					if ((isNewBus && bus.minutes > inminentTime) || (prevBusToCompare && prevBusToCompare.minutes !== bus.minutes && bus.minutes > inminentTime)) {
						rowClass += ' flash flash-animation';
					}

					// --- Fin de la l√≥gica de cambios --- JO DER - co√±azo
					tableHtml += `
						<tr class="${rowClass}">
							<td class="py-2 px-4 text-white">${bus.line}</td>
							<td class="py-2 px-4 text-white text-pretty">${bus.route}</td>
							<td class="py-2 px-4 text-white">${bus.minutes}</td>
						</tr>
					`;
				});

				// Rellenar filas vac√≠as si es necesario
				const remainingRows = 5 - busesToDisplay.length;
				for (let i = 0; i < remainingRows; i++) {
					tableHtml += `
						<tr class="border-blue-900/15 border-b last:border-b-0 transition-colors duration-200 hover:bg-blue-900/30">
							<td class="py-2 px-4 opacity-75"> <div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"> </div> </td>
							<td class="py-2 px-4 opacity-75"> <div class="flex animate-pulse space-x-4 bg-dai/15 rounded-2xl text-center justify-center"> Sin Servicio</div> </td>
							<td class="py-2 px-4 opacity-75"> <div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"></div> </td>
						</tr>
					`;
				}
			} else {
				for (let i = 0; i < 5; i++) {
					tableHtml += `
						<tr class="border-blue-900/15 border-b last:border-b-0 transition-colors duration-200 hover:bg-blue-900/30">
							<td class="py-2 px-4 opacity-75"> <div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"> </div> </td>
							<td class="py-2 px-4 opacity-75"> <div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"> </div> </td>
							<td class="py-2 px-4 opacity-75"> <div class="flex animate-pulse space-x-4 py-2 my-1 bg-dai/15 rounded-2xl"> </div> </td>
						</tr>
					`;
				}
			}

			tableBody.innerHTML = tableHtml;
			previousBusesMap[stopId] = [...busesToDisplay];
			console.log(`‚úÖ Tabla actualizada para stopId ${stopId}`);
		}

		// Inicializar tablas vac√≠as
		stops.forEach((stopId) => {
			const tableBody = document.querySelector(`#incomingBuses-${stopId} tbody`);
			if (tableBody) {
				createEmptyRows(tableBody, 5);
			}
		});

		socket.on("connect", () => {
			console.log("üîå Conectado al servidor");
			// Ocultar overlays de error
			document.querySelectorAll(".connection-error-overlay").forEach(el => {
				el.classList.add("hidden");
			});

			// Suscribir todas las paradas
			stops.forEach((stopId) => {
				socket.emit("BusStop", { stopId });
			});
		});

		socket.on("connect_error", (err) => {
			console.error("‚ùå Error de conexi√≥n:", err.message);
			// Mostrar overlays de error
			document.querySelectorAll(".connection-error-overlay").forEach(el => {
				el.classList.remove("hidden");
			});
		});

		socket.on("BusStop", (data) => {
			console.log("üì° Datos recibidos:", data);
			const stopId = data.id;
			if (stopId && stops.includes(stopId)) {
				updateTable(stopId, data);
			}
		});

		// Reemitir solicitudes cada 25 segundos
		intervalId = setInterval(() => {
			if (socket && socket.connected) {
				stops.forEach((stopId) => {
					socket.emit("BusStop", { stopId });
				});
			}
		}, 25000);
	}

	// Inicializar al cargar la p√°gina
	document.addEventListener('DOMContentLoaded', initializeBusesData);

	// Inicializar despu√©s de cada navegaci√≥n entre p√°ginas
	document.addEventListener('astro:page-load', initializeBusesData);

	// Tambi√©n al cambiar de p√°gina din√°micamente
	document.addEventListener('astro:after-swap', initializeBusesData);

	// Limpiar recursos al salir de la p√°gina
	document.addEventListener('astro:before-swap', () => {
		if (socket) {
			socket.disconnect();
			socket = null;
		}
		if (intervalId) {
			clearInterval(intervalId);
			intervalId = null;
		}
	});
</script>