---
// Componente de registro con campos completos
// importar input de dni/nie
import DNINIEInput from '../ui/DNI-NIE-input.astro';
import PhoneInput from '../ui/phone-input.astro';
import Button from '../ui/Button.astro';
import Input from '../ui/Input.astro';

---

<div id="form-register" class="tab-content hidden space-y-6">
  <h2 class="text-3xl font-bold text-center text-white mb-6">Crea tu cuenta</h2>
    <form id="register-form" action="/api/auth/register" method="POST" class="space-y-4" data-astro-reload>
      <div id="form-error" class="hidden mb-4 p-4 bg-red-500/20 border border-red-500/30 rounded-lg">
        <p id="error-message" class="text-red-200 text-sm"></p>
      </div>
    <!-- MARK: Nombre -->
    <div>
      <label for="fullName" class="block text-sm font-medium text-white/80 mb-1">
        Nombre completo *
      </label>
      <Input
        type="text"
        id="fullName"
        name="fullName"
        required
        variant="auth"
        placeholder="Tu nombre completo"
      />
      <p id="fullname-feedback" class="text-xs mt-1 transition-colors duration-300">
        <span class="text-white/60">Introduce al menos dos palabras (nombre y apellido)</span>
      </p>
    </div>
    <!-- MARK: Email -->
    <div>
      <label for="register-email" class="block text-sm font-medium text-white/80 mb-1">
        Email *
      </label>
      <Input
        type="email"
        id="register-email"
        name="email"
        required
        variant="auth"
        placeholder="holacaracola@gmail.com"
      />
      <p id="email-feedback" class="text-xs mt-1 transition-colors duration-300">
        <span class="text-white/60">Introduce un email válido</span>
      </p>
    </div>
  <!-- MARK: DNI/NIE -->
    <DNINIEInput />
  <!-- MARK: Teléfono -->
    <PhoneInput />
    <!-- MARK: Contraseña -->
    <div>
      <label for="register-password" class="block text-sm font-medium text-white/80 mb-1">
        Contraseña *
      </label>
      <div class="relative">
        <Input
          type="password"
          id="register-password"
          name="password"
          required
          minlength={6}
          variant="auth"
          placeholder="Mínimo 6 caracteres"
          className="pr-12"
        />
        <button
          type="button"
          id="toggle-password"
          class="absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60 hover:text-white transition-colors"
          aria-label="Mostrar/ocultar contraseña"
        >
          <svg id="eye-icon" xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-eye"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0" /><path d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6" /></svg>
          <svg id="eye-off-icon" xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-eye-off hidden"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10.585 10.587a2 2 0 0 0 2.829 2.828" /><path d="M16.681 16.673a8.717 8.717 0 0 1 -4.681 1.327c-3.6 0 -6.6 -2 -9 -6c1.272 -2.12 2.712 -3.678 4.32 -4.674m2.86 -1.146a9.055 9.055 0 0 1 1.82 -.18c3.6 0 6.6 2 9 6c-.666 1.11 -1.379 2.067 -2.138 2.87" /><path d="M3 3l18 18" /></svg>
        </button>
      </div>
    </div>
    <!-- MARK: Confirmar Contraseña -->
    <div>
      <label for="confirm-password" class="block text-sm font-medium text-white/80 mb-1">
        Confirmar contraseña *
      </label>
      <div class="relative">
        <Input
          type="password"
          id="confirm-password"
          name="confirmPassword"
          required
          minlength={6}
          variant="auth"
          placeholder="Repite tu contraseña"
          className="pr-12"
        />
        <button
          type="button"
          id="toggle-confirm-password"
          class="absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60 hover:text-white transition-colors"
          aria-label="Mostrar/ocultar confirmación de contraseña"
        >
          <svg id="eye-icon-confirm" xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-eye"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0" /><path d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6" /></svg>
          <svg id="eye-off-icon-confirm" xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-eye-off hidden"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10.585 10.587a2 2 0 0 0 2.829 2.828" /><path d="M16.681 16.673a8.717 8.717 0 0 1 -4.681 1.327c-3.6 0 -6.6 -2 -9 -6c1.272 -2.12 2.712 -3.678 4.32 -4.674m2.86 -1.146a9.055 9.055 0 0 1 1.82 -.18c3.6 0 6.6 2 9 6c-.666 1.11 -1.379 2.067 -2.138 2.87" /><path d="M3 3l18 18" /></svg>
        </button>
      </div>
      <p id="password-feedback" class="text-xs mt-1 transition-colors duration-300">
        <span class="text-white/60">Las contraseñas deben coincidir</span>
      </p>
    </div>
    <div>
      <span 
          class="text-sm text-white/60"
      >Al registrarte, aceptarás los</span>
      <a class="text-sm text-dai cursor-pointer hover:text-azul-brillante animation-all duration-300" href="/terms-and-conditions">Términos y Condiciones de Servicio.</a>
    </div>
    <!-- MARK: OK -->
      <Button 
      type="submit" 
      variant="primary" 
      size="md"
      className="w-full"
    >
      Registrarse
    </Button>
  </form>
</div>

<script is:inline type="module">
  // Validación del email en tiempo real
  document.getElementById('register-email').addEventListener('input', function() {
    const emailInput = this.value.trim();
    const feedback = document.getElementById('email-feedback');
    
    // Limpiar validación personalizada
    this.setCustomValidity('');
    
    if (emailInput.length === 0) {
      // Campo vacío
      feedback.innerHTML = '<span class="text-white/60">Introduce un email válido</span>';
      this.classList.remove('border-green-400', 'border-red-400', 'border-yellow-400');
      this.classList.add('border-white/20');
      return;
    }
    
    // Verificar si contiene @
    if (!emailInput.includes('@')) {
      feedback.innerHTML = '<span class="text-yellow-400">Falta el símbolo @</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    const parts = emailInput.split('@');
    if (parts.length !== 2) {
      feedback.innerHTML = '<span class="text-red-400">✗ Solo debe haber un símbolo @</span>';
      this.classList.remove('border-green-400', 'border-yellow-400');
      this.classList.add('border-red-400');
      this.setCustomValidity('Formato de email incorrecto.');
      return;
    }
    
    const [localPart, domainPart] = parts;
    
    // Verificar parte local (antes del @)
    if (localPart.length === 0) {
      feedback.innerHTML = '<span class="text-yellow-400">Falta el nombre antes del @</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    // Verificar dominio
    if (domainPart.length === 0) {
      feedback.innerHTML = '<span class="text-yellow-400">Falta el dominio después del @</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    if (!domainPart.includes('.')) {
      feedback.innerHTML = '<span class="text-yellow-400">El dominio necesita un punto (.)</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    const domainParts = domainPart.split('.');
    if (domainParts.some(part => part.length === 0)) {
      feedback.innerHTML = '<span class="text-red-400">✗ Formato de dominio incorrecto</span>';
      this.classList.remove('border-green-400', 'border-yellow-400');
      this.classList.add('border-red-400');
      this.setCustomValidity('Formato de dominio incorrecto.');
      return;
    }
    
    // Verificar que la extensión tenga al menos 2 caracteres
    const extension = domainParts[domainParts.length - 1];
    if (extension.length < 2) {
      feedback.innerHTML = '<span class="text-yellow-400">La extensión debe tener al menos 2 caracteres</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    // Validación completa con regex
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (emailPattern.test(emailInput)) {
      feedback.innerHTML = '<span class="text-green-400">✓ Email válido</span>';
      this.classList.remove('border-red-400', 'border-yellow-400');
      this.classList.add('border-green-400');
    } else {
      feedback.innerHTML = '<span class="text-red-400">✗ Formato de email inválido</span>';
      this.classList.remove('border-green-400', 'border-yellow-400');
      this.classList.add('border-red-400');
      this.setCustomValidity('Formato de email inválido.');
    }
  });

  // Validación del nombre completo en tiempo real
  document.getElementById('fullName').addEventListener('input', function() {
    const nameInput = this.value.trim();
    const feedback = document.getElementById('fullname-feedback');
    
    // Limpiar validación personalizada
    this.setCustomValidity('');
    
    if (nameInput.length === 0) {
      // Campo vacío
      feedback.innerHTML = '<span class="text-white/60">Introduce al menos dos palabras (nombre y apellido)</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-white/20');
      return;
    }
    
    // Dividir por espacios y filtrar palabras vacías
    const words = nameInput.split(/\s+/).filter(word => word.length > 0);
    
    if (words.length < 2) {
      feedback.innerHTML = '<span class="text-red-400">✗ Introduce al menos dos palabras</span>';
      this.classList.remove('border-green-400');
      this.classList.add('border-red-400');
      this.setCustomValidity('El nombre debe tener al menos dos palabras.');
      return;
    }
    
    // Verificar que cada palabra tenga al menos 2 caracteres
    const shortWords = words.filter(word => word.length < 2);
    if (shortWords.length > 0) {
      feedback.innerHTML = '<span class="text-yellow-400">Cada palabra debe tener al menos 2 caracteres</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    // Validación exitosa
    feedback.innerHTML = '<span class="text-green-400">✓ Nombre válido</span>';
    this.classList.remove('border-red-400', 'border-yellow-400');
    this.classList.add('border-green-400');
  });

  // Funcionalidad para mostrar/ocultar contraseña
  function setupPasswordToggle(toggleButtonId, passwordInputId, eyeIconId, eyeOffIconId) {
    const toggleBtn = document.getElementById(toggleButtonId);
    const passwordInput = document.getElementById(passwordInputId);
    const eyeIcon = document.getElementById(eyeIconId);
    const eyeOffIcon = document.getElementById(eyeOffIconId);
    
    toggleBtn.addEventListener('click', function() {
      if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        eyeIcon.classList.add('hidden');
        eyeOffIcon.classList.remove('hidden');
      } else {
        passwordInput.type = 'password';
        eyeIcon.classList.remove('hidden');
        eyeOffIcon.classList.add('hidden');
      }
    });
  }

  // Configurar toggles para ambas contraseñas
  setupPasswordToggle('toggle-password', 'register-password', 'eye-icon', 'eye-off-icon');
  setupPasswordToggle('toggle-confirm-password', 'confirm-password', 'eye-icon-confirm', 'eye-off-icon-confirm');

  // Validación de contraseñas coincidentes
  function validatePasswords() {
    const password = document.getElementById('register-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    const feedback = document.getElementById('password-feedback');
    const confirmInput = document.getElementById('confirm-password');
    
    // Limpiar validación personalizada
    confirmInput.setCustomValidity('');
    
    if (confirmPassword.length === 0) {
      feedback.innerHTML = '<span class="text-white/60">Las contraseñas deben coincidir</span>';
      confirmInput.classList.remove('border-green-400', 'border-red-400');
      confirmInput.classList.add('border-white/20');
      return;
    }
    
    if (password === confirmPassword) {
      feedback.innerHTML = '<span class="text-green-400">✓ Las contraseñas coinciden</span>';
      confirmInput.classList.remove('border-red-400');
      confirmInput.classList.add('border-green-400');
    } else {
      feedback.innerHTML = '<span class="text-red-400">✗ Las contraseñas no coinciden</span>';
      confirmInput.classList.remove('border-green-400');
      confirmInput.classList.add('border-red-400');
      confirmInput.setCustomValidity('Las contraseñas no coinciden.');
    }
  }

  // Añadir listeners para validación de contraseñas
  document.getElementById('register-password').addEventListener('input', validatePasswords);
  document.getElementById('confirm-password').addEventListener('input', validatePasswords);

  // Función para mostrar error
  function showError(message) {
    const errorDiv = document.getElementById('form-error');
    const errorMessage = document.getElementById('error-message');
    errorMessage.textContent = message;
    errorDiv.classList.remove('hidden');
    
    // Scroll al error
    errorDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  // Función para ocultar error
  function hideError() {
    document.getElementById('form-error').classList.add('hidden');
  }

  // Manejar envío del formulario
  document.getElementById('register-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    hideError();

    const formData = new FormData(this);
    const email = formData.get('email');
    const phone = formData.get('phone');
    const dni = formData.get('dni');
    const fullName = formData.get('fullName');
    const password = formData.get('password');
    const confirmPassword = formData.get('confirmPassword');

    // Validar que todos los campos estén llenos
    if (!email || !phone || !dni || !fullName || !password || !confirmPassword) {
      showError('Todos los campos son obligatorios');
      return;
    }

    // Validar nombre completo (al menos dos palabras)
    const nameWords = fullName.trim().split(/\s+/).filter(word => word.length > 0);
    if (nameWords.length < 2) {
      showError('El nombre completo debe tener al menos dos palabras');
      return;
    }

    // Validar que las contraseñas coincidan
    if (password !== confirmPassword) {
      showError('Las contraseñas no coinciden');
      return;
    }

    // Mostrar loading en el botón
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Creando cuenta...';
    submitBtn.disabled = true;

    try {
      // Enviar el formulario directamente
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        // Redirigir al éxito
        window.location.href = '/auth?message=check_email';
      } else {
        const errorText = await response.text();
        showError(errorText || 'Error al crear la cuenta');
      }

    } catch (error) {
      console.error('Error en el registro:', error);
      showError('Error de conexión. Inténtalo de nuevo.');
    } finally {
      // Restaurar botón
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }
  });
</script>