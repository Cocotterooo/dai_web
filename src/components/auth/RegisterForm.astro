---
// Componente de registro con campos completos
// importar input de dni
import DNIInput from '../ui/DNI-input.astro';
import PhoneInput from '../ui/phone-input.astro';
import Button from '../ui/Button.astro';

---

<div id="form-register" class="tab-content hidden space-y-6">
  <h2 class="text-3xl font-bold text-center text-white mb-6">Crea tu cuenta</h2>
    <form id="register-form" action="/api/auth/register" method="POST" class="space-y-4">
      <div id="form-error" class="hidden mb-4 p-4 bg-red-500/20 border border-red-500/30 rounded-lg">
        <p id="error-message" class="text-red-200 text-sm"></p>
      </div>
    <!-- MARK: Nombre -->
    <div>
      <label for="fullName" class="block text-sm font-medium text-white/80 mb-1">
        Nombre completo *
      </label>
      <input
        type="text"
        id="fullName"
        name="fullName"
        required
        class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-white/50"
        placeholder="Tu nombre completo"
      />
    </div>
    <!-- MARK: Email -->
    <div>
      <label for="register-email" class="block text-sm font-medium text-white/80 mb-1">
        Email *
      </label>
      <input
        type="email"
        id="register-email"
        name="email"
        required
        class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-white/50"
        placeholder="holacaracola@gmail.com"
      />
      <p id="email-feedback" class="text-xs mt-1 transition-colors duration-300">
        <span class="text-white/60">Introduce un email válido</span>
      </p>
    </div>
  <!-- MARK: DNI -->
    <DNIInput />
  <!-- MARK: Teléfono -->
    <PhoneInput />
    <!-- MARK: Contraseña -->
    <div>
      <label for="register-password" class="block text-sm font-medium text-white/80 mb-1">
        Contraseña *
      </label>
      <input
        type="password"
        id="register-password"
        name="password"
        required
        minlength="6"
        class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-white/50"
        placeholder="Mínimo 6 caracteres"
      />
    </div>
    <!-- MARK: OK -->
      <Button 
      type="submit" 
      variant="primary" 
      size="md"
      className="w-full"
    >
      Register
    </Button>
  </form>
</div>

<script is:inline type="module">
  // Validación del email en tiempo real
  document.getElementById('register-email').addEventListener('input', function() {
    const emailInput = this.value.trim();
    const feedback = document.getElementById('email-feedback');
    
    // Limpiar validación personalizada
    this.setCustomValidity('');
    
    if (emailInput.length === 0) {
      // Campo vacío
      feedback.innerHTML = '<span class="text-white/60">Introduce un email válido</span>';
      this.classList.remove('border-green-400', 'border-red-400', 'border-yellow-400');
      this.classList.add('border-white/20');
      return;
    }
    
    // Verificar si contiene @
    if (!emailInput.includes('@')) {
      feedback.innerHTML = '<span class="text-yellow-400">Falta el símbolo @</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    const parts = emailInput.split('@');
    if (parts.length !== 2) {
      feedback.innerHTML = '<span class="text-red-400">✗ Solo debe haber un símbolo @</span>';
      this.classList.remove('border-green-400', 'border-yellow-400');
      this.classList.add('border-red-400');
      this.setCustomValidity('Formato de email incorrecto.');
      return;
    }
    
    const [localPart, domainPart] = parts;
    
    // Verificar parte local (antes del @)
    if (localPart.length === 0) {
      feedback.innerHTML = '<span class="text-yellow-400">Falta el nombre antes del @</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    // Verificar dominio
    if (domainPart.length === 0) {
      feedback.innerHTML = '<span class="text-yellow-400">Falta el dominio después del @</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    if (!domainPart.includes('.')) {
      feedback.innerHTML = '<span class="text-yellow-400">El dominio necesita un punto (.)</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    const domainParts = domainPart.split('.');
    if (domainParts.some(part => part.length === 0)) {
      feedback.innerHTML = '<span class="text-red-400">✗ Formato de dominio incorrecto</span>';
      this.classList.remove('border-green-400', 'border-yellow-400');
      this.classList.add('border-red-400');
      this.setCustomValidity('Formato de dominio incorrecto.');
      return;
    }
    
    // Verificar que la extensión tenga al menos 2 caracteres
    const extension = domainParts[domainParts.length - 1];
    if (extension.length < 2) {
      feedback.innerHTML = '<span class="text-yellow-400">La extensión debe tener al menos 2 caracteres</span>';
      this.classList.remove('border-green-400', 'border-red-400');
      this.classList.add('border-yellow-400');
      return;
    }
    
    // Validación completa con regex
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (emailPattern.test(emailInput)) {
      feedback.innerHTML = '<span class="text-green-400">✓ Email válido</span>';
      this.classList.remove('border-red-400', 'border-yellow-400');
      this.classList.add('border-green-400');
    } else {
      feedback.innerHTML = '<span class="text-red-400">✗ Formato de email inválido</span>';
      this.classList.remove('border-green-400', 'border-yellow-400');
      this.classList.add('border-red-400');
      this.setCustomValidity('Formato de email inválido.');
    }
  });

  // Función para mostrar error
  function showError(message) {
    const errorDiv = document.getElementById('form-error');
    const errorMessage = document.getElementById('error-message');
    errorMessage.textContent = message;
    errorDiv.classList.remove('hidden');
    
    // Scroll al error
    errorDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  // Función para ocultar error
  function hideError() {
    document.getElementById('form-error').classList.add('hidden');
  }

  // Manejar envío del formulario
  document.getElementById('register-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    hideError();

    const formData = new FormData(this);
    const email = formData.get('email');
    const phone = formData.get('phone');
    const dni = formData.get('dni');
    const fullName = formData.get('fullName');
    const password = formData.get('password');

    // Validar que todos los campos estén llenos
    if (!email || !phone || !dni || !fullName || !password) {
      showError('Todos los campos son obligatorios');
      return;
    }

    // Mostrar loading en el botón
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Creando cuenta...';
    submitBtn.disabled = true;

    try {
      // Enviar el formulario directamente
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        // Redirigir al éxito
        window.location.href = '/auth?message=check_email';
      } else {
        const errorText = await response.text();
        showError(errorText || 'Error al crear la cuenta');
      }

    } catch (error) {
      console.error('Error en el registro:', error);
      showError('Error de conexión. Inténtalo de nuevo.');
    } finally {
      // Restaurar botón
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }
  });
</script>