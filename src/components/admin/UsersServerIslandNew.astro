---
import { supabase } from "@/lib/supabase";

// Server Island: todo el procesamiento se hace en el servidor
interface User {
    id: string;
    email: string;
    nombre_completo?: string;
    full_name?: string;
    name?: string;
    dni_niu?: string;
    dni?: string;
    niu?: string;
    telefono?: string;
    phone?: string;
    telephone?: string;
    grupo_clase?: string;
    class_group?: string;
    group?: string;
    avatar_url?: string;
    created_at?: string;
    user_id?: string;
    role_name?: string;
    role_id?: string;
    roles?: Array<{
        role_name: string;
        role_id: string;
    }>;
}

interface Stats {
    totalUsers: number;
    activeUsers: number;
    verifiedUsers: number;
}

let users: User[] = [];
let stats: Stats = { totalUsers: 0, activeUsers: 0, verifiedUsers: 0 };
let error = '';

try {
    // Verificar autenticaci√≥n y permisos
    const user = Astro.locals.user;
    const userRoleIds = (Astro.locals.userRoleIds as unknown as string[]) || [];
    
    if (!user) {
        throw new Error("No autorizado");
    }

    const hasPermission = userRoleIds.includes("admin") 
                       || userRoleIds.includes("dai_delegate") 
                       || userRoleIds.includes("dai_secretary")
                       || userRoleIds.includes("dai_communication_coord");

    if (!hasPermission) {
        throw new Error("Permisos insuficientes");
    }

    console.log("‚úÖ Cargando usuarios desde Server Island");

    // Obtener usuarios con roles
    const { data: usersData, error: usersError } = await supabase
        .rpc("get_users_with_roles");

    if (usersError) {
        console.error("‚ùå Error cargando usuarios:", usersError);
        throw usersError;
    }

    const rawUsers = (usersData || []) as any[];
    console.log(`üìä Filas recibidas de la base de datos: ${rawUsers.length}`);

    // Procesar usuarios que vienen duplicados por cada rol
    const usersMap = new Map();
    
    rawUsers.forEach((userRow) => {
        const userId = userRow.user_id;
        
        if (usersMap.has(userId)) {
            // Usuario ya existe, solo agregar el rol de esta fila espec√≠fica
            const existingUser = usersMap.get(userId);
            
            if (userRow.role_name) {
                const roleExists = existingUser.roles.some((role: any) => 
                    role.role_name === userRow.role_name
                );
                if (!roleExists) {
                    existingUser.roles.push({
                        role_name: userRow.role_name,
                        role_id: userRow.role_id || userRow.role_name
                    });
                }
            }
        } else {
            // Crear nuevo usuario con los datos de esta fila
            const newUser: User = {
                id: userRow.id,
                email: userRow.email,
                nombre_completo: userRow.nombre_completo || userRow.full_name || userRow.name,
                dni_niu: userRow.dni_niu || userRow.dni || userRow.niu,
                telefono: userRow.telefono || userRow.phone || userRow.telephone,
                grupo_clase: userRow.grupo_clase || userRow.class_group || userRow.group,
                avatar_url: userRow.avatar_url,
                created_at: userRow.created_at,
                roles: []
            };
            
            if (userRow.role_name) {
                newUser.roles!.push({
                    role_name: userRow.role_name,
                    role_id: userRow.role_id || userRow.role_name
                });
            }
            
            usersMap.set(userId, newUser);
        }
    });
    
    // Convertir Map a Array y ordenar por fecha de creaci√≥n (m√°s recientes primero)
    users = Array.from(usersMap.values()).sort((a, b) => 
        new Date(b.created_at || '').getTime() - new Date(a.created_at || '').getTime()
    );

    console.log(`üë• Usuarios procesados: ${users.length}`);

    // Calcular estad√≠sticas
    stats.totalUsers = users.length;
    
    // Usuarios nuevos este mes
    const currentDate = new Date();
    const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    
    stats.activeUsers = users.filter((user) => {
        if (!user.created_at) return false;
        const createdAt = new Date(user.created_at);
        return createdAt >= firstDayOfMonth;
    }).length;

    // Contar miembros DAI (usuarios con rol dai_member)
    stats.verifiedUsers = users.filter((user) => {
        return user.roles && user.roles.some((role) => role.role_name === 'dai_member');
    }).length;

    console.log("üìà Estad√≠sticas calculadas:", stats);

} catch (err) {
    console.error("‚ùå Error en UsersServerIsland:", err);
    error = err instanceof Error ? err.message : 'Error desconocido';
}

// Obtener todos los roles √∫nicos para los filtros
const allRoles = new Set<string>();
const allGroups = new Set<string>();

users.forEach(user => {
    if (user.roles && Array.isArray(user.roles)) {
        user.roles.forEach(role => {
            if (role.role_name) {
                allRoles.add(role.role_name);
            }
        });
    }
    
    const groupName = user.grupo_clase || user.class_group || user.group;
    if (groupName && typeof groupName === 'string') {
        allGroups.add(groupName);
    }
});

console.log(`üè∑Ô∏è Roles √∫nicos encontrados: ${allRoles.size}, Grupos √∫nicos: ${allGroups.size}`);
---

<!-- Server Island: contenido renderizado en el servidor -->
<div id="users-server-island" data-users={JSON.stringify(users)} data-stats={JSON.stringify(stats)} data-roles={JSON.stringify(Array.from(allRoles).sort())} data-groups={JSON.stringify(Array.from(allGroups).sort())} data-error={error}>
    {error ? (
        <div class="text-center text-red-400 py-8">
            <h3 class="text-lg font-semibold mb-2">Error al cargar usuarios</h3>
            <p>{error}</p>
        </div>
    ) : (
        <>
            <!-- Estad√≠sticas -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                <div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-6 text-center">
                    <div class="text-2xl font-bold text-dai mb-2">{stats.totalUsers}</div>
                    <div class="text-white/80 text-sm">Total Usuarios</div>
                </div>
                
                <div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-6 text-center">
                    <div class="text-2xl font-bold text-yellow-400 mb-2">{stats.activeUsers}</div>
                    <div class="text-white/80 text-sm">Nuevos este mes</div>
                </div>
                
                <div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-6 text-center">
                    <div class="text-2xl font-bold text-purple-400 mb-2">{stats.verifiedUsers}</div>
                    <div class="text-white/80 text-sm">Miembros - DAI</div>
                </div>
            </div>

            <!-- Gesti√≥n de Usuarios -->
            <div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-6">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
                    <h2 class="text-xl font-semibold text-white mb-4 sm:mb-0">Lista de Usuarios</h2>
                    <div class="flex gap-3">
                        <button 
                            id="export-users-btn"
                            class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors duration-200 flex items-center gap-2"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            Exportar
                        </button>
                        <button 
                            id="refresh-users-btn"
                            class="px-4 py-2 bg-dai hover:bg-dai/80 text-white rounded-lg transition-colors duration-200 flex items-center gap-2"
                            onclick="window.location.reload()"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            Actualizar
                        </button>
                    </div>
                </div>
                
                <!-- Filtros y b√∫squeda -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <input 
                        type="text" 
                        id="user-search"
                        placeholder="Buscar por email, nombre, DNI/NIU, ID, tel√©fono..."
                        class="w-full px-4 py-3 bg-azul-oscuro border border-white/30 rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-azul-brillante"
                    />
                    
                    <select 
                        id="role-filter"
                        class="w-full px-4 py-3 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-azul-brillante"
                    >
                        <option value="">Todos los roles</option>
                        <option value="sin-roles">Sin roles</option>
                        {Array.from(allRoles).sort().map(role => (
                            <option value={role}>{role}</option>
                        ))}
                    </select>

                    <select 
                        id="status-filter"
                        class="w-full px-4 py-3 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-azul-brillante"
                    >
                        <option value="">Todos los grupos</option>
                        {Array.from(allGroups).sort().map(group => (
                            <option value={group}>{group}</option>
                        ))}
                    </select>
                </div>

                <!-- Lista de usuarios -->
                <div id="users-list" class="space-y-4">
                    {users.length === 0 ? (
                        <div class="text-center text-white/60 py-8">
                            {error ? 'Error al cargar usuarios' : 'No se encontraron usuarios'}
                        </div>
                    ) : (
                        users.slice(0, 10).map(user => {
                            const userName = user.nombre_completo || 
                                           user.full_name || 
                                           user.name || 
                                           user.email?.split('@')[0] || 
                                           'Sin nombre';
                            
                            const initial = userName.charAt(0).toUpperCase();
                            
                            return (
                                <div class="bg-azul-oscuro border border-white/20 rounded-lg p-4">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center space-x-4 flex-1">
                                            <div class="relative">
                                                {user.avatar_url ? (
                                                    <>
                                                        <img 
                                                            src={user.avatar_url} 
                                                            alt={`Avatar de ${userName}`}
                                                            class="w-12 h-12 rounded-full object-cover border-2 border-dai/20"
                                                            onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                                                        />
                                                        <div class="w-12 h-12 bg-dai/20 rounded-full flex items-center justify-center" style="display: none;">
                                                            <span class="text-dai font-semibold text-lg">
                                                                {initial}
                                                            </span>
                                                        </div>
                                                    </>
                                                ) : (
                                                    <div class="w-12 h-12 bg-dai/20 rounded-full flex items-center justify-center">
                                                        <span class="text-dai font-semibold text-lg">
                                                            {initial}
                                                        </span>
                                                    </div>
                                                )}
                                            </div>
                                            <div class="flex-1">
                                                <div class="flex items-start justify-between">
                                                    <div>
                                                        <h4 class="text-white font-medium">{userName}</h4>
                                                        <p class="text-white/60 text-sm">{user.email || 'Sin email'}</p>
                                                        {(user.grupo_clase || user.class_group || user.group) && (
                                                            <p class="text-white/40 text-xs">
                                                                Grupo: {user.grupo_clase || user.class_group || user.group}
                                                            </p>
                                                        )}
                                                    </div>
                                                    <div class="text-right text-white/40 text-xs space-y-1 ml-4">
                                                        {(user.dni_niu || user.dni || user.niu) && (
                                                            <p>DNI/NIU: {user.dni_niu || user.dni || user.niu}</p>
                                                        )}
                                                        {(user.telefono || user.phone || user.telephone) && (
                                                            <p>Tel: {user.telefono || user.phone || user.telephone}</p>
                                                        )}
                                                    </div>
                                                </div>
                                                <div class="flex items-center space-x-2 mt-2 flex-wrap">
                                                    {user.roles && user.roles.length > 0 ? (
                                                        user.roles.map(role => (
                                                            <span class="px-2 py-1 bg-dai/20 text-dai text-xs rounded">
                                                                {role.role_name}
                                                            </span>
                                                        ))
                                                    ) : (
                                                        <span class="px-2 py-1 bg-gray-500/20 text-gray-300 text-xs rounded">
                                                            Sin roles
                                                        </span>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                        <div class="flex items-center space-x-3 ml-4">
                                            <button 
                                                data-user-id={user.id}
                                                class="user-modal-btn px-4 py-2 bg-dai hover:bg-dai/80 text-white text-sm rounded-lg transition-colors flex items-center gap-2"
                                            >
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                                </svg>
                                                Gestionar Usuario
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            );
                        })
                    )}
                </div>

                <!-- Paginaci√≥n -->
                <div id="pagination" class="justify-center mt-8 hidden">
                    <div class="flex items-center space-x-2">
                        <button id="prev-page" class="px-3 py-2 bg-white/10 text-white rounded-lg hover:bg-white/20 disabled:opacity-50" disabled>
                            Anterior
                        </button>
                        <span id="page-info" class="text-white/80 px-4">P√°gina 1 de 1</span>
                        <button id="next-page" class="px-3 py-2 bg-white/10 text-white rounded-lg hover:bg-white/20 disabled:opacity-50" disabled>
                            Siguiente
                        </button>
                    </div>
                </div>
            </div>
        </>
    )}
</div>

<script type="module">
    // JavaScript del lado del cliente para interactividad
    document.addEventListener('DOMContentLoaded', function() {
        const serverIsland = document.getElementById('users-server-island');
        
        if (!serverIsland) {
            console.error('Server island no encontrada');
            return;
        }
        
        // Obtener datos del servidor
        const allUsers = JSON.parse(serverIsland.getAttribute('data-users') || '[]');
        const stats = JSON.parse(serverIsland.getAttribute('data-stats') || '{}');
        const allRoles = JSON.parse(serverIsland.getAttribute('data-roles') || '[]');
        const allGroups = JSON.parse(serverIsland.getAttribute('data-groups') || '[]');
        const error = serverIsland.getAttribute('data-error');
        
        let filteredUsers = [...allUsers];
        let currentPage = 1;
        const usersPerPage = 10;
        let currentUser = null;

        console.log('üèùÔ∏è Datos cargados desde server island:', { 
            totalUsers: allUsers.length, 
            stats, 
            totalRoles: allRoles.length, 
            totalGroups: allGroups.length,
            hasError: !!error 
        });

        if (error) {
            console.error('‚ùå Error en server island:', error);
            return;
        }

        setupEventListeners();
        
        // Exponer funciones globalmente
        window.openUserModal = openUserModal;
        window.openAddRoleForm = openAddRoleForm;
        window.removeRole = removeRole;

        function setupEventListeners() {
            document.getElementById('user-search')?.addEventListener('input', filterUsers);
            document.getElementById('role-filter')?.addEventListener('change', filterUsers);
            document.getElementById('status-filter')?.addEventListener('change', filterUsers);
            document.getElementById('export-users-btn')?.addEventListener('click', exportUsers);
            document.getElementById('close-modal-btn')?.addEventListener('click', closeModal);
            
            document.getElementById('user-roles-modal')?.addEventListener('click', function(e) {
                if (e.target === this) closeModal();
            });

            // Event listeners para botones de gesti√≥n de usuario
            document.querySelectorAll('.user-modal-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    openUserModal(userId);
                });
            });
        }

        function filterUsers() {
            const search = document.getElementById('user-search').value.toLowerCase();
            const roleFilter = document.getElementById('role-filter').value;
            const statusFilter = document.getElementById('status-filter').value;

            filteredUsers = allUsers.filter(user => {
                // Buscar en m√∫ltiples campos
                const searchText = [
                    user.email || '',
                    user.nombre_completo || user.full_name || user.name || '',
                    user.dni_niu || user.dni || user.niu || '',
                    user.id || '',
                    user.telefono || user.phone || user.telephone || ''
                ].join(' ').toLowerCase();
                
                const matchesSearch = !search || searchText.includes(search);
                
                // Filtro por rol
                const matchesRole = !roleFilter || 
                    (roleFilter === 'sin-roles' && (!user.roles || user.roles.length === 0)) ||
                    (user.roles && user.roles.some(role => role.role_name === roleFilter));
                
                // Filtro por grupo
                const matchesStatus = !statusFilter || 
                    user.grupo_clase === statusFilter || 
                    user.class_group === statusFilter || 
                    user.group === statusFilter;

                return matchesSearch && matchesRole && matchesStatus;
            });

            currentPage = 1;
            renderUsers();
            updatePagination();
        }

        function renderUsers() {
            const startIndex = (currentPage - 1) * usersPerPage;
            const endIndex = startIndex + usersPerPage;
            const pageUsers = filteredUsers.slice(startIndex, endIndex);

            if (pageUsers.length === 0) {
                document.getElementById('users-list').innerHTML = 
                    '<div class="text-center text-white/60 py-8">No se encontraron usuarios</div>';
                return;
            }

            const html = pageUsers.map(user => {
                const userName = user.nombre_completo || 
                               user.full_name || 
                               user.name || 
                               user.email?.split('@')[0] || 
                               'Sin nombre';

                const initial = userName.charAt(0).toUpperCase();

                const renderAvatar = (user) => {
                    if (user.avatar_url) {
                        return `
                            <img 
                                src="${user.avatar_url}" 
                                alt="Avatar de ${userName}"
                                class="w-12 h-12 rounded-full object-cover border-2 border-dai/20"
                                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                            >
                            <div class="w-12 h-12 bg-dai/20 rounded-full flex items-center justify-center" style="display: none;">
                                <span class="text-dai font-semibold text-lg">
                                    ${initial}
                                </span>
                            </div>
                        `;
                    } else {
                        return `
                            <div class="w-12 h-12 bg-dai/20 rounded-full flex items-center justify-center">
                                <span class="text-dai font-semibold text-lg">
                                    ${initial}
                                </span>
                            </div>
                        `;
                    }
                };

                return `
                    <div class="bg-azul-oscuro border border-white/20 rounded-lg p-4">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-4 flex-1">
                                <div class="relative">
                                    ${renderAvatar(user)}
                                </div>
                                <div class="flex-1">
                                    <div class="flex items-start justify-between">
                                        <div>
                                            <h4 class="text-white font-medium">${userName}</h4>
                                            <p class="text-white/60 text-sm">${user.email || 'Sin email'}</p>
                                            ${(user.grupo_clase || user.class_group || user.group) ? 
                                                `<p class="text-white/40 text-xs">Grupo: ${user.grupo_clase || user.class_group || user.group}</p>` : ''
                                            }
                                        </div>
                                        <div class="text-right text-white/40 text-xs space-y-1 ml-4">
                                            ${(user.dni_niu || user.dni || user.niu) ? 
                                                `<p>DNI/NIU: ${user.dni_niu || user.dni || user.niu}</p>` : ''
                                            }
                                            ${(user.telefono || user.phone || user.telephone) ? 
                                                `<p>Tel: ${user.telefono || user.phone || user.telephone}</p>` : ''
                                            }
                                        </div>
                                    </div>
                                    <div class="flex items-center space-x-2 mt-2 flex-wrap">
                                        ${user.roles && user.roles.length > 0 ? 
                                            user.roles.map(role => `
                                                <span class="px-2 py-1 bg-dai/20 text-dai text-xs rounded">
                                                    ${role.role_name}
                                                </span>
                                            `).join('') : 
                                            '<span class="px-2 py-1 bg-gray-500/20 text-gray-300 text-xs rounded">Sin roles</span>'
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="flex items-center space-x-3 ml-4">
                                <button 
                                    data-user-id="${user.id}"
                                    class="user-modal-btn px-4 py-2 bg-dai hover:bg-dai/80 text-white text-sm rounded-lg transition-colors flex items-center gap-2"
                                >
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                    Gestionar Usuario
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            document.getElementById('users-list').innerHTML = html;
            
            // Reagregar event listeners a los nuevos botones
            document.querySelectorAll('.user-modal-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    openUserModal(userId);
                });
            });
        }

        function updatePagination() {
            const totalPages = Math.ceil(filteredUsers.length / usersPerPage);
            const paginationEl = document.getElementById('pagination');
            
            if (totalPages <= 1) {
                paginationEl.classList.add('hidden');
                paginationEl.classList.remove('flex');
                return;
            }

            paginationEl.classList.remove('hidden');
            paginationEl.classList.add('flex');
            document.getElementById('page-info').textContent = `P√°gina ${currentPage} de ${totalPages}`;
            document.getElementById('prev-page').disabled = currentPage === 1;
            document.getElementById('next-page').disabled = currentPage === totalPages;

            document.getElementById('prev-page').onclick = () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderUsers();
                    updatePagination();
                }
            };

            document.getElementById('next-page').onclick = () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    renderUsers();
                    updatePagination();
                }
            };
        }

        function openUserModal(userId) {
            currentUser = allUsers.find(user => user.id === userId);
            if (!currentUser) {
                console.error('Usuario no encontrado con ID:', userId);
                return;
            }

            const userName = currentUser.nombre_completo || 
                           currentUser.full_name || 
                           currentUser.name || 
                           currentUser.email;

            const renderModalAvatar = (user) => {
                if (user.avatar_url) {
                    return `
                        <img 
                            src="${user.avatar_url}" 
                            alt="Avatar de ${userName}"
                            class="w-16 h-16 rounded-full object-cover border-2 border-dai/20 mb-3"
                            onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                        >
                        <div class="w-16 h-16 bg-dai/20 rounded-full flex items-center justify-center mb-3" style="display: none;">
                            <span class="text-dai font-semibold text-xl">
                                ${userName.charAt(0).toUpperCase()}
                            </span>
                        </div>
                    `;
                } else {
                    return `
                        <div class="w-16 h-16 bg-dai/20 rounded-full flex items-center justify-center mb-3">
                            <span class="text-dai font-semibold text-xl">
                                ${userName.charAt(0).toUpperCase()}
                            </span>
                        </div>
                    `;
                }
            };

            const modalElement = document.getElementById('user-roles-modal');
            const modalContentElement = document.getElementById('modal-content');
            
            if (!modalElement || !modalContentElement) {
                console.error('Modal elements not found!');
                return;
            }

            modalContentElement.innerHTML = `
                <div class="mb-6">
                    <div class="flex items-center space-x-4 mb-4">
                        <div class="relative">
                            ${renderModalAvatar(currentUser)}
                        </div>
                        <div>
                            <h4 class="text-lg font-medium text-white mb-2">${userName}</h4>
                            <div class="text-white/60 space-y-1">
                                <p>üìß ${currentUser.email || 'Sin email'}</p>
                                <p>üÜî ID: ${currentUser.id}</p>
                                ${(currentUser.dni_niu || currentUser.dni || currentUser.niu) ? 
                                    `<p>ü™™ DNI/NIU: ${currentUser.dni_niu || currentUser.dni || currentUser.niu}</p>` : ''
                                }
                                ${(currentUser.telefono || currentUser.phone || currentUser.telephone) ? 
                                    `<p>üìû Tel√©fono: ${currentUser.telefono || currentUser.phone || currentUser.telephone}</p>` : ''
                                }
                                ${(currentUser.grupo_clase || currentUser.class_group || currentUser.group) ? 
                                    `<p>üéì Grupo: ${currentUser.grupo_clase || currentUser.class_group || currentUser.group}</p>` : ''
                                }
                                ${currentUser.created_at ? 
                                    `<p>üìÖ Registrado: ${new Date(currentUser.created_at).toLocaleDateString('es-ES')}</p>` : ''
                                }
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="space-y-4">
                    <div class="flex items-center justify-between">
                        <h5 class="text-white font-medium">Gesti√≥n de Roles</h5>
                        <button 
                            onclick="openAddRoleForm()"
                            class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white text-sm rounded-lg transition-colors"
                        >
                            + Agregar Rol
                        </button>
                    </div>
                    <div id="current-roles" class="space-y-2">
                        ${currentUser.roles && currentUser.roles.length > 0 ? 
                            currentUser.roles.map(role => {
                                const roleName = role.role_name;
                                const roleId = role.role_id || roleName;
                                return `
                                    <div class="flex items-center justify-between bg-white/5 p-3 rounded-lg">
                                        <span class="text-white">${roleName}</span>
                                        <button onclick="removeRole('${roleId}')" class="text-red-400 hover:text-red-300 px-2 py-1 rounded hover:bg-red-400/10">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                            </svg>
                                        </button>
                                    </div>
                                `;
                            }).join('') : 
                            '<p class="text-white/60 text-center py-4">Sin roles asignados</p>'
                        }
                    </div>
                </div>
            `;

            modalElement.classList.remove('hidden');
        }

        function openAddRoleForm() {
            alert('Funcionalidad para agregar roles - Por implementar');
        }

        function removeRole(roleId) {
            if (confirm('¬øEst√°s seguro de que quieres eliminar este rol del usuario?')) {
                console.log('Removiendo rol:', roleId, 'del usuario:', currentUser.id);
                alert('Funcionalidad para remover roles - Por implementar');
            }
        }

        function closeModal() {
            document.getElementById('user-roles-modal').classList.add('hidden');
            currentUser = null;
        }

        function exportUsers() {
            const data = filteredUsers.map(user => ({
                email: user.email || '',
                nombre: user.nombre_completo || user.full_name || user.name || '',
                dni_niu: user.dni_niu || user.dni || user.niu || '',
                telefono: user.telefono || user.phone || user.telephone || '',
                grupo_clase: user.grupo_clase || user.class_group || user.group || '',
                roles: user.roles && user.roles.length > 0 ? 
                    user.roles.map(r => r.role_name).join(', ') : 
                    'Sin roles',
                fecha_creacion: user.created_at ? 
                    new Date(user.created_at).toLocaleDateString('es-ES') : 
                    ''
            }));

            const csv = [
                ['Email', 'Nombre', 'DNI/NIU', 'Tel√©fono', 'Grupo', 'Roles', 'Fecha Creaci√≥n'],
                ...data.map(row => [
                    row.email, 
                    row.nombre, 
                    row.dni_niu, 
                    row.telefono, 
                    row.grupo_clase, 
                    row.roles, 
                    row.fecha_creacion
                ])
            ].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');

            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `usuarios_${new Date().toISOString().split('T')[0]}.csv`;
            a.click();
            window.URL.revokeObjectURL(url);
        }
    });
</script>
