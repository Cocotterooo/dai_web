---
import { supabase } from "@/lib/supabase";

// Server Island: todo el procesamiento se hace en el servidor
interface User {
    user_id: string;
    name: string | null;
    full_name: string | null;
    email: string;
    dni: string | null;
    phone: string | null;
    avatar_url: string | null;
    linkedin: string | null;
    tiktok: string | null;
    x: string | null;
    instagram: string | null;
    group_id: string | null;
    group_year: string | null;
    group_branch: string | null;
    group_site: string | null;
    degree_name: string | null;
    roles: {
        role_name: string | null;
        role_id: string | null;
        role_group: string | null;
        role_assigned_at: string | null;
    }[],
    register_date: string
}

interface Stats {
    totalUsers: number;
    newUsersLast30Days: number;
    cdUsers: number;
    xaUsers: number;
}

let users: User[] = [];
let stats: Stats = { totalUsers: 0, newUsersLast30Days: 0, cdUsers: 0, xaUsers: 0 };
let error = '';

let allRoleNames: string[] = [];
let allRoleIds: string[] = [];
let groupsData: any[] = [];

try {
    // Verificar autenticaci√≥n y permisos
    const user = Astro.locals.user;
    const userRoleIds = (Astro.locals.userRoleIds as unknown as string[]) || [];
    
    if (!user) {
        throw new Error("No autorizado");
    }

    const hasPermission = userRoleIds.includes("admin") 
                        || userRoleIds.includes("dai_delegate") 
                        || userRoleIds.includes("dai_secretary")
                        || userRoleIds.includes("dai_communication_coord");

    if (!hasPermission) {
        throw new Error("Permisos insuficientes");
    } 

    console.log("‚úÖ Cargando usuarios desde Server Island");
    
    // Obtener todos los roles existentes
    const { data: rolesData, error: rolesError } = await supabase
        .rpc("get_all_roles");
    allRoleNames = rolesData.map((role: { name: string }) => role.name);
    allRoleIds = rolesData.map((role: { id: string }) => role.id);

    if (rolesError) {
        console.error("‚ùå Error cargando roles:", rolesError);
        throw rolesError;
    }
    //console.log("‚úÖ Roles cargados:", rolesData);

    // Obtener todos los grupos XA con informaci√≥n de delegados
    console.log("üè´ Intentando cargar grupos XA...");
    try {
        const { data: groupsXAData, error: groupsError } = await supabase
            .rpc("get_all_groups_xa");

        if (groupsError) {
            console.error("‚ùå Error espec√≠fico cargando grupos:", groupsError);
            console.log("‚ö†Ô∏è Continuando sin datos de grupos...");
            groupsData = [];
        } else {
            groupsData = groupsXAData || [];
        }
    } catch (groupsException) {
        console.error("‚ùå Excepci√≥n cargando grupos:", groupsException);
        console.log("‚ö†Ô∏è La funci√≥n get_all_groups_xa puede no existir. Continuando sin grupos...");
        groupsData = [];
    }

    // Obtener usuarios con roles
    const { data: usersData, error: usersError } = await supabase
        .rpc("get_users_with_all_info");

    if (usersError) {
        console.error("‚ùå Error cargando usuarios:", usersError);
        throw usersError;
    }
    const rawUsers = (usersData || []) as User[];
    console.log(`üìä Filas recibidas de la base de datos: ${rawUsers.length}`);
;
    // Ordenar por fecha de creaci√≥n (m√°s recientes primero)
    users = Array.from(rawUsers.values()).sort((a, b) => 
        new Date(b.register_date || '').getTime() - new Date(a.register_date || '').getTime()
    );

    console.log(`üë• Usuarios procesados: ${users.length}`);

    // Calcular estad√≠sticas
    stats.totalUsers = users.length;
    
    // Usuarios nuevos √∫ltimos 30 d√≠as
    const currentDate = new Date();
    const last30Days = new Date(currentDate.setDate(currentDate.getDate() - 30));
    const newUsersLast30Days = users.filter((user) => {
        return user.register_date && new Date(user.register_date) >= last30Days;
    });
    const numberNewUsers = newUsersLast30Days.length;
    stats.newUsersLast30Days = numberNewUsers;

    // Contar miembros DAI (usuarios perdenecientes a la CD)
    stats.cdUsers = users.filter((user) => {
        return user.roles && user.roles.some((role) => role.role_group === 'CD');
    }).length;

    // Contar miembros XA (usuarios pertenecientes a la XA)
    stats.xaUsers = users.filter((user) => {
        return user.roles && user.roles.some((role) => role.role_group === 'XA');
    }).length;

    console.log("üìà Estad√≠sticas calculadas:", stats);

} catch (err) {
    console.error("‚ùå Error en UsersServerIsland:", err);
    error = err instanceof Error ? err.message : 'Error desconocido';
}

// Obtener todos los roles √∫nicos para los filtros
const allRoles = new Set<string>();
const allRoleGroups = new Set<string>();
const allDegrees = new Set<string>();
const allGroups = new Set<string>();


users.forEach(user => {
    if (user.roles && Array.isArray(user.roles)) {
        user.roles.forEach(role => {
            if (role.role_name) {
                allRoles.add(role.role_name);
            }
            if (role.role_group) {
                allRoleGroups.add(role.role_group);
            }
        });
        if (user.degree_name) {
            allDegrees.add(user.degree_name);
        }
    }
    
    const groupName = user.group_id
    if (groupName && typeof groupName === 'string') {
        allGroups.add(groupName);
    }
});

console.log(`üè∑Ô∏è Roles √∫nicos encontrados: ${allRoles.size}, Grupos √∫nicos: ${allGroups.size}`);
---

<!-- Server Island: contenido renderizado en el servidor -->
<div id="users-server-island" 
    data-users={JSON.stringify(users)} 
    data-stats={JSON.stringify(stats)} 
    data-roles={JSON.stringify(Array.from(allRoles).sort())} 
    data-role-groups={JSON.stringify(Array.from(allRoleGroups).sort())}
    data-degrees={JSON.stringify(Array.from(allDegrees).sort())}
    data-groups={JSON.stringify(Array.from(allGroups).sort())} 
    data-groups-xa={JSON.stringify(groupsData || [])}
    data-error={error}
    data-role-names={JSON.stringify(allRoleNames)}
    data-role-ids={JSON.stringify(allRoleIds)}>
    {error ? (
        <div class="text-center text-red-400 py-8">
            <h3 class="text-lg font-semibold mb-2">Error al cargar usuarios</h3>
            <p>{error}</p>
        </div>
    ) : (
        <>
            <!-- Estad√≠sticas -->
            <div class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6 mb-6 sm:mb-8">
                <div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-3 sm:p-4 lg:p-6 text-center">
                    <div class="text-lg sm:text-xl lg:text-2xl font-bold text-dai mb-1 lg:mb-2">{stats.totalUsers}</div>
                    <div class="text-white/80 text-xs sm:text-sm">Total Usuarios</div>
                </div>
                
                <div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-3 sm:p-4 lg:p-6 text-center">
                    <div class="text-lg sm:text-xl lg:text-2xl font-bold text-yellow-400 mb-1 lg:mb-2">{stats.newUsersLast30Days}</div>
                    <div class="text-white/80 text-xs sm:text-sm">Nuevos Usuarios (30 d√≠as)</div>
                </div>
                <div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-3 sm:p-4 lg:p-6 text-center">
                    <div class="text-lg sm:text-xl lg:text-2xl font-bold text-purple-400 mb-1 lg:mb-2">{stats.cdUsers}</div>
                    <div class="text-white/80 text-xs sm:text-sm">Miembros - CD</div>
                </div>
                <div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-3 sm:p-4 lg:p-6 text-center">
                    <div class="text-lg sm:text-xl lg:text-2xl font-bold text-purple-400 mb-1 lg:mb-2">{stats.xaUsers}</div>
                    <div class="text-white/80 text-xs sm:text-sm">Miembros - XA</div>
                </div>
            </div>

            <!-- Gesti√≥n de Usuarios -->
            <div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-3 sm:p-4 lg:p-6">
                <div class="flex flex-col space-y-3 sm:space-y-0 sm:flex-row sm:items-center sm:justify-between mb-4 sm:mb-6">
                    <h2 class="text-lg sm:text-xl font-semibold text-white">Lista de Usuarios</h2>
                    <div class="flex flex-col sm:flex-row gap-2 sm:gap-3">
                        <button 
                            id="export-users-btn"
                            class="w-full sm:w-auto px-3 sm:px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors duration-200 flex items-center justify-center gap-2 text-sm"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            Exportar
                        </button>
                        <button 
                            id="refresh-users-btn"
                            class="w-full sm:w-auto px-3 sm:px-4 py-2 bg-dai hover:bg-dai/80 text-white rounded-lg transition-colors duration-200 flex items-center justify-center gap-2 text-sm"
                            onclick="window.location.reload()"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            Actualizar
                        </button>
                    </div>
                </div>
                
                <!-- Filtros y b√∫squeda -->
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-3 sm:gap-4 mb-4 sm:mb-6">
                    <div class="sm:col-span-2 lg:col-span-3 xl:col-span-1">
                        <input 
                            type="text" 
                            id="user-search"
                            placeholder="Email, Nombre, DNI/NIE..."
                            class="w-full px-2 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-azul-brillante text-sm"
                        />
                    </div>
                    
                    <select 
                        id="role-filter"
                        class="w-full px-2 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-azul-brillante text-sm"
                    >
                        <option value="">Filtrar por Rol</option>
                        <option value="sin-roles">Sin roles</option>
                        {Array.from(allRoles).sort().map(role => (
                            <option value={role}>{role}</option>
                        ))}
                    </select>
                    <select 
                        id="role-group-filter"
                        class="w-full px-2 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-azul-brillante text-sm"
                    >
                        <option value="">CD / XA</option>
                        <option value="sin-roles">No CD / XA</option>
                        {Array.from(allRoleGroups).sort().map(role => (
                            <option value={role}>{role}</option>
                        ))}
                    </select>

                    <select 
                        id="degree-filter"
                        class="w-full px-2 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-azul-brillante text-sm"
                    >
                        <option value="">Grado</option>
                        <option value="sin-grados">Sin grado</option>
                        {Array.from(allDegrees).sort().map(degree => (
                            <option value={degree}>{degree}</option>
                        ))}
                    </select>

                    <select 
                        id="class-group-filter"
                        class="w-full px-2 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-azul-brillante text-sm"
                    >
                        <option value="">Grupo</option>
                        <option value="sin-grupos">Sin grupo</option>
                        {Array.from(allGroups).sort().map(group => (
                            <option value={group}>{group}</option>
                        ))}
                    </select>
                </div>

                <!-- Lista de usuarios -->
                <div id="users-list" class="space-y-2">
                    {users.length === 0 ? (
                        <div class="text-center text-white/60 py-8">
                            {error ? 'Error al cargar usuarios' : 'No se encontraron usuarios'}
                        </div>
                    ) : (
                        users.slice(0, 10).map(user => (
                            <div/>
                        ))
                    )}
                </div>

                <!-- Paginaci√≥n -->
                <div id="pagination" class="justify-center mt-6 sm:mt-8 hidden">
                    <div class="flex items-center space-x-2">
                        <button id="prev-page" class="px-2 sm:px-3 py-2 bg-white/10 text-white rounded-lg hover:bg-white/20 disabled:opacity-50 text-sm">
                            <span class="hidden sm:inline">Anterior</span>
                            <span class="sm:hidden">‚Üê</span>
                        </button>
                        <span id="page-info" class="text-white/80 px-2 sm:px-4 text-sm">P√°gina 1 de 1</span>
                        <button id="next-page" class="px-2 sm:px-3 py-2 bg-white/10 text-white rounded-lg hover:bg-white/20 disabled:opacity-50 text-sm">
                            <span class="hidden sm:inline">Siguiente</span>
                            <span class="sm:hidden">‚Üí</span>
                        </button>
                    </div>
                </div>
            </div>
        </>
    )}
</div>

<style>
/* Animaciones para la expansi√≥n de usuarios */
.user-details {
    transform-origin: top;
}

.user-manage-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(0, 255, 255, 0.15);
}

.user-manage-btn svg {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Animaci√≥n suave para el contenido interno */
.user-details > * {
    transition: opacity 0.3s ease-in-out 0.1s;
}

/* Efecto de hover en las tarjetas de usuario */
.bg-azul-oscuro\/50:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* Animaci√≥n de entrada staggered para elementos del grid */
.user-details .grid > div {
    animation: slideInFromBottom 0.4s ease-out;
}

.user-details .grid > div:nth-child(2) {
    animation-delay: 0.1s;
}

.user-details .grid > div:nth-child(3) {
    animation-delay: 0.2s;
}

@keyframes slideInFromBottom {
    0% {
        opacity: 0;
        transform: translateY(5px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Mejoras en botones de acci√≥n */
.add-role-btn, .remove-role-btn {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
}

.add-role-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(59, 130, 246, 0.2);
}

.remove-role-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(239, 68, 68, 0.2);
}

/* Mejoras responsive adicionales */
@media (max-width: 640px) {
    /* Reducir espaciado en m√≥viles */
    .user-details {
        padding-left: 0.75rem !important;
        padding-right: 0.75rem !important;
    }
    
    /* Ajustar botones en m√≥viles */
    .user-manage-btn {
        font-size: 0.75rem;
        padding: 0.5rem 0.75rem;
    }
    
    /* Mejorar legibilidad de texto en m√≥viles */
    .user-details h3 {
        font-size: 1rem;
    }
    
    /* Ajustar avatares en m√≥viles */
    .user-details img,
    .user-details > div > div:first-child > div {
        width: 3rem;
        height: 3rem;
    }
}

@media (min-width: 640px) and (max-width: 1024px) {
    /* Ajustes para tablets */
    .user-details {
        padding-left: 1.25rem !important;
        padding-right: 1.25rem !important;
    }
}

/* Mejorar la visualizaci√≥n de filtros en m√≥viles */
@media (max-width: 640px) {
    #user-search {
        margin-bottom: 0.5rem;
    }
}

/* Animaci√≥n de entrada m√°s suave para las cards */
@media (prefers-reduced-motion: no-preference) {
    .bg-azul-oscuro\/50 {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
}

/* Estados de focus mejorados para accesibilidad */
.user-manage-btn:focus-visible,
.add-role-btn:focus-visible,
.remove-role-btn:focus-visible {
    outline: 2px solid rgba(0, 255, 255, 0.5);
    outline-offset: 2px;
}

/* Mejorar contraste en enlaces */
.user-details a {
    transition: color 0.2s ease;
}

.user-details a:hover {
    text-decoration: underline;
}
</style>

<script type="module">
    // Funci√≥n compartida para renderizar una fila de usuario
    function renderUserRowHTML(user) {
        const userName = user.full_name || 
                        user.name || 
                        user.email?.split('@')[0] || 
                        'Sin nombre';

        const initial = userName.charAt(0).toUpperCase();

        const renderAvatar = (user) => {
            if (user.avatar_url) {
                return `
                    <img 
                        src="${user.avatar_url}" 
                        alt="Avatar de ${userName}"
                        class="w-20 h-20 rounded-full object-cover border-2 border-azul-brillante/45"
                        onerror="this.style.display='none'; this.nextElementSibling?.style && (this.nextElementSibling.style.display='flex');"
                    />
                    <div class="w-20 h-20 bg-dai/20 border-2 border-azul-brillante/45 rounded-full flex items-center justify-center" style="display: none;">
                        <span class="text-dai font-semibold text-4xl">
                            ${initial}
                        </span>
                    </div>
                `;
            } else {
                return `
                    <div class="w-20 h-20 bg-dai/20 border-2 border-azul-brillante/45 rounded-full flex items-center justify-center">
                        <span class="text-dai font-semibold text-4xl">
                            ${initial}
                        </span>
                    </div>
                `;
            }
        };

        return `
            <div class="bg-azul-oscuro/50 hover:bg-dai/2 transition-colors duration-300 border border-white/20 rounded-lg overflow-hidden" data-user-id="${user.user_id}">
                <div class="p-3 sm:p-4">
                    <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-3">
                        <!-- Secci√≥n izquierda: Avatar + Nombre + Email + Roles (m√≥vil y tablet) -->
                        <div class="flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-4 lg:flex-1">
                            <div class="relative flex justify-center sm:justify-start">
                                ${renderAvatar(user)}
                            </div>
                            <div class="min-w-0 flex-1">
                                <!-- Informaci√≥n b√°sica visible en mobile y tablet -->
                                <div class="flex flex-col lg:flex-row lg:items-center lg:w-full">
                                    <div class="text-center sm:text-left mb-2 lg:mb-0 min-w-[300px] lg:flex-shrink-0">
                                        <h4 class="text-white font-semibold text-sm sm:text-base truncate">${userName}</h4>
                                        <p class="text-white/60 text-xs sm:text-sm break-words">${user.email}</p>
                                    </div>
                                    
                                    <!-- Informaci√≥n adicional visible en mobile y tablet, oculta en desktop -->
                                    <div class="lg:hidden space-y-2 mt-2 w-full">
                                        <div class="grid grid-cols-2 gap-3 text-xs">
                                            <div class="text-white/60">
                                                <span class="block text-white/40">DNI/NIE:</span>
                                                <span class="text-white">${user.dni || 'No especificado'}</span>
                                            </div>
                                            <div class="text-white/60">
                                                <span class="block text-white/40">Tel√©fono:</span>
                                                <span class="text-white">${user.phone || 'No especificado'}</span>
                                            </div>
                                            <div class="text-white/60">
                                                <span class="block text-white/40">Grupo:</span>
                                                <span class="text-white">${user.group_id || 'No especificado'}</span>
                                            </div>
                                            <div class="text-white/60">
                                                <span class="block text-white/40">Grado:</span>
                                                <span class="text-white truncate" title="${user.degree_name || 'No especificado'}">${user.degree_name || 'No especificado'}</span>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Informaci√≥n adicional en desktop - Ocupar todo el espacio disponible -->
                                    <div class="hidden lg:grid lg:grid-cols-5 lg:gap-4 lg:flex-1 lg:ml-6">
                                        <div class="text-center text-white/40 text-xs space-y-1">
                                            ${user.dni ? 
                                                `<h5 class="text-white text-sm font-medium">DNI/NIE</h5>
                                                <p class="text-sm">${user.dni}</p>` : 
                                                '<span class="text-white/30 text-xs">Sin DNI</span>'
                                            }
                                        </div>
                                        <div class="text-center text-white/40 text-xs space-y-1">
                                            ${user.phone ? 
                                                `<h5 class="text-white text-sm font-medium">Tel√©fono</h5>
                                                <p class="text-sm">${user.phone}</p>` : 
                                                '<span class="text-white/30 text-xs">Sin tel√©fono</span>'
                                            }
                                        </div>
                                        <div class="text-center text-white/40 text-xs space-y-1">
                                            ${user.register_date ? 
                                                `<h5 class="text-white text-sm font-medium">Registro</h5>
                                                <p class="text-sm">${new Date(user.register_date).toLocaleDateString()}</p>
                                                ` : 
                                                '<span class="text-white/30 text-xs">Sin fecha</span>'
                                            }
                                        </div>
                                        <div class="text-center text-white/40 text-xs space-y-1">
                                            ${user.group_id ? 
                                                `<h5 class="text-white text-sm font-medium">Grupo</h5>
                                                <p class="text-sm">${user.group_id}</p>` : 
                                                '<span class="text-white/30 text-xs">Sin grupo</span>'
                                            }
                                        </div>
                                        <div class="text-center text-white/40 text-xs space-y-1">
                                            ${user.degree_name ? 
                                                `<h5 class="text-white text-sm font-medium">Grado</h5>
                                                <p class="text-sm truncate" title="${user.degree_name}">${user.degree_name}</p>` : 
                                                '<span class="text-white/30 text-xs">Sin grado</span>'
                                            }
                                        </div>
                                    </div>
                                </div>
                                <!-- Roles -->
                                <div class="flex items-center justify-center sm:justify-start space-x-2 mt-2 flex-wrap gap-1">
                                    ${user.roles && user.roles.length > 0 ? 
                                        /* En m√≥vil: mostrar solo 3 roles + contador. En desktop: mostrar todos */
                                        `<div class="lg:hidden flex items-center flex-wrap gap-1">
                                            ${user.roles.slice(0, 3).map(role => `
                                                <span class="px-2 py-1 bg-dai/20 text-dai text-xs rounded transition-all duration-200 hover:bg-dai/30">
                                                    ${role.role_name}
                                                </span>
                                            `).join('')}
                                            ${user.roles.length > 3 ? 
                                                `<span class="px-2 py-1 bg-gray-500/20 text-gray-300 text-xs rounded">+${user.roles.length - 3}</span>` : 
                                                ''
                                            }
                                        </div>
                                        <div class="hidden lg:flex items-center flex-wrap gap-1">
                                            ${user.roles.map(role => `
                                                <span class="px-2 py-1 bg-dai/20 text-dai text-xs rounded transition-all duration-200 hover:bg-dai/30">
                                                    ${role.role_name}
                                                </span>
                                            `).join('')}
                                        </div>` : 
                                        '<span class="px-2 py-1 bg-gray-500/20 text-gray-300 text-xs rounded">Sin roles</span>'
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <!-- Bot√≥n de gesti√≥n - Fijo a la derecha -->
                        <div class="flex justify-center lg:justify-end mt-3 lg:mt-0 lg:flex-shrink-0">
                            <button 
                                data-user-id="${user.user_id}"
                                class="user-manage-btn w-full sm:w-auto px-3 sm:px-4 py-2 bg-dai/20 hover:bg-dai/50 border-1 border-white/20 text-white text-sm rounded-lg transition-colors flex items-center justify-center gap-2"
                            >
                                <svg class="w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                                <span class="hidden sm:inline">Gestionar Usuario</span>
                                <span class="sm:hidden">Gestionar</span>
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Secci√≥n expandible con detalles completos del usuario -->
                <div class="user-details border-t border-white/10 bg-azul-oscuro/30 space-y-4 sm:space-y-6 overflow-hidden transition-all duration-500 ease-in-out max-h-0 opacity-0" style="padding: 0 1rem;">
                    <!-- Grid responsive para la informaci√≥n -->
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
                        <!-- Informaci√≥n personal -->
                        <div class="space-y-3 sm:space-y-4">
                            <h3 class="text-base sm:text-lg font-semibold text-white border-b border-dai/30 pb-2">Informaci√≥n Personal</h3>
                            <div class="space-y-2">
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">Nombre completo:</span>
                                    <span class="text-white font-medium text-sm break-words">${user.full_name || 'No especificado'}</span>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">Nombre usuario:</span>
                                    <span class="text-white font-medium text-sm break-words">${user.name || 'No especificado'}</span>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">Email:</span>
                                    <span class="text-white font-medium text-sm break-all">${user.email || 'No especificado'}</span>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">DNI/NIE:</span>
                                    <span class="text-white font-medium text-sm">${user.dni || 'No especificado'}</span>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">Tel√©fono:</span>
                                    <span class="text-white font-medium text-sm">${user.phone || 'No especificado'}</span>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">Fecha registro:</span>
                                    <span class="text-white font-medium text-sm">${user.register_date ? new Date(user.register_date).toLocaleString('es-ES') : 'No disponible'}</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Informaci√≥n acad√©mica -->
                        <div class="space-y-3 sm:space-y-4">
                            <h3 class="text-base sm:text-lg font-semibold text-white border-b border-dai/30 pb-2">Informaci√≥n Acad√©mica</h3>
                            <div class="space-y-2">
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">Grado:</span>
                                    <span class="text-white font-medium text-sm break-words">${user.degree_name || 'No especificado'}</span>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">Grupo:</span>
                                    <span class="text-white font-medium text-sm">${user.group_id || 'No especificado'}</span>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">A√±o:</span>
                                    <span class="text-white font-medium text-sm">${user.group_year || 'No especificado'}</span>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">Rama:</span>
                                    <span class="text-white font-medium text-sm">${user.group_branch || 'No especificado'}</span>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm min-w-fit">Campus:</span>
                                    <span class="text-white font-medium text-sm">${user.group_site || 'No especificado'}</span>
                                </div>
                            </div>
                        </div>

                        <!-- Redes sociales -->
                        <div class="space-y-3 sm:space-y-4 md:col-span-2 lg:col-span-1">
                            <h3 class="text-base sm:text-lg font-semibold text-white border-b border-dai/30 pb-2">Redes Sociales</h3>
                            <div class="space-y-2">
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm flex items-center gap-2 min-w-fit">
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                                        </svg>
                                        LinkedIn:
                                    </span>
                                    ${user.linkedin ? 
                                        `<a href="${user.linkedin}" target="_blank" class="text-dai hover:text-dai/80 font-medium text-sm truncate break-all">${user.linkedin}</a>` : 
                                        '<span class="text-white font-medium text-sm">No especificado</span>'
                                    }
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm flex items-center gap-2 min-w-fit">
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                                        </svg>
                                        Instagram:
                                    </span>
                                    ${user.instagram ? 
                                        `<a href="${user.instagram}" target="_blank" class="text-dai hover:text-dai/80 font-medium text-sm truncate break-all">${user.instagram}</a>` : 
                                        '<span class="text-white font-medium text-sm">No especificado</span>'
                                    }
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm flex items-center gap-2 min-w-fit">
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                                        </svg>
                                        X (Twitter):
                                    </span>
                                    ${user.x ? 
                                        `<a href="${user.x}" target="_blank" class="text-dai hover:text-dai/80 font-medium text-sm truncate break-all">${user.x}</a>` : 
                                        '<span class="text-white font-medium text-sm">No especificado</span>'
                                    }
                                </div>
                                <div class="flex flex-col sm:flex-row sm:gap-3 sm:items-center">
                                    <span class="text-white/60 text-sm flex items-center gap-2 min-w-fit">
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z"/>
                                        </svg>
                                        TikTok:
                                    </span>
                                    ${user.tiktok ? 
                                        `<a href="${user.tiktok}" target="_blank" class="text-dai hover:text-dai/80 font-medium text-sm truncate break-all">${user.tiktok}</a>` : 
                                        '<span class="text-white font-medium text-sm">No especificado</span>'
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Gesti√≥n de roles -->
                    <div class="space-y-3 sm:space-y-4">
                        <div class="flex flex-col sm:flex-row gap-3 sm:gap-6 sm:items-center">
                            <h3 class="text-base sm:text-lg font-semibold text-white border-b border-dai/30 pb-2 sm:border-b-0 sm:pb-0">Roles del Usuario</h3>
                            <button class="add-role-btn w-full sm:w-auto px-3 py-2 bg-azul-brillante/20 hover:bg-azul-brillante/40 border-1 border-white/20 transition-all duration-300 text-white text-sm rounded-lg flex items-center justify-center gap-2" data-user-id="${user.user_id}">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                A√±adir Rol
                            </button>
                        </div>
                        <div class="roles-container space-y-2">
                            ${user.roles && user.roles.length > 0 ? 
                                user.roles.map(role => `
                                    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between bg-dai/10 border border-dai/30 rounded-lg p-3 transition-all duration-200 hover:bg-dai/15 space-y-2 sm:space-y-0">
                                        <div class="flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-3">
                                            <div class="flex flex-wrap gap-2">
                                                <span class="px-3 py-1 bg-dai/20 text-dai text-sm rounded font-medium transition-all duration-200 hover:bg-dai/30">
                                                    ${role.role_name}
                                                </span>
                                                ${role.role_group ? 
                                                    `<span class="px-2 py-1 bg-purple-600/20 text-purple-300 text-xs rounded transition-all duration-200 hover:bg-purple-600/30">
                                                        ${role.role_group}
                                                    </span>` : ''
                                                }
                                            </div>
                                            <span class="text-white/60 text-sm text-center sm:text-left">
                                                Asignado: ${role.role_assigned_at ? new Date(role.role_assigned_at).toLocaleString('es-ES') : 'Desconocido'}
                                            </span>
                                        </div>
                                        <button class="remove-role-btn w-full sm:w-auto px-2 py-1 bg-red-700/50 hover:bg-red-700/70 border-1 border-white/20 text-white text-sm rounded-md transition-colors flex items-center justify-center gap-1" 
                                                data-user-id="${user.user_id}" 
                                                data-role-id="${role.role_id}"
                                                data-role-name="${role.role_name}"
                                                data-user-group-id="${user.group_id || ''}">
                                            <svg  xmlns="http://www.w3.org/2000/svg"  width="18"  height="18"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-trash-x"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 7h16" /><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" /><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" /><path d="M10 12l4 4m0 -4l-4 4" /></svg>
                                            Eliminar
                                        </button>
                                    </div>
                                `).join('') : 
                                '<div class="text-center text-white/60 py-4 border border-dashed border-white/20 rounded-lg">Este usuario no tiene roles asignados</div>'
                            }
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    // Variables globales para mantener estado entre transiciones
    let allUsers = [];
    let stats = {};
    let allRoles = [];
    let allRoleGroups = [];
    let allDegrees = [];
    let allGroups = [];
    let allRoleNames = [];
    let allRoleIds = [];
    let filteredUsers = [];
    let currentPage = 1;
    const usersPerPage = 10;
    let currentUser = null;
    let availableRoles = [];
    let expandedUsers = new Set(); // Para mantener usuarios expandidos

    // Funciones para gestionar el estado persistente
    function savePageState() {
        const state = {
            currentPage,
            expandedUsers: Array.from(expandedUsers),
            filters: {
                search: document.getElementById('user-search')?.value || '',
                role: document.getElementById('role-filter')?.value || '',
                roleGroup: document.getElementById('role-group-filter')?.value || '',
                degree: document.getElementById('degree-filter')?.value || '',
                classGroup: document.getElementById('class-group-filter')?.value || ''
            }
        };
        localStorage.setItem('usersPageState', JSON.stringify(state));
    }

    function loadPageState() {
        const saved = localStorage.getItem('usersPageState');
        if (saved) {
            try {
                const state = JSON.parse(saved);
                return state;
            } catch (error) {
                console.warn('Error cargando estado guardado:', error);
                return null;
            }
        }
        return null;
    }

    function restoreFilters(savedState) {
        if (!savedState || !savedState.filters) return;
        
        const { filters } = savedState;
        
        // Restaurar valores de filtros
        const searchInput = document.getElementById('user-search');
        const roleFilter = document.getElementById('role-filter');
        const roleGroupFilter = document.getElementById('role-group-filter');
        const degreeFilter = document.getElementById('degree-filter');
        const classGroupFilter = document.getElementById('class-group-filter');
        
        if (searchInput) searchInput.value = filters.search;
        if (roleFilter) roleFilter.value = filters.role;
        if (roleGroupFilter) roleGroupFilter.value = filters.roleGroup;
        if (degreeFilter) degreeFilter.value = filters.degree;
        if (classGroupFilter) classGroupFilter.value = filters.classGroup;
    }

    function restoreExpandedUsers(savedState) {
        if (!savedState || !savedState.expandedUsers || savedState.expandedUsers.length === 0) return;
        
        // Con el comportamiento de acorde√≥n, solo restaurar el √∫ltimo usuario expandido
        const lastExpandedUserId = savedState.expandedUsers[savedState.expandedUsers.length - 1];
        expandedUsers = new Set([lastExpandedUserId]);
        
        // Expandir solo el √∫ltimo usuario despu√©s de que se renderice
        setTimeout(() => {
            const button = document.querySelector(`button[data-user-id="${lastExpandedUserId}"].user-manage-btn`);
            if (button) {
                // Simular expansi√≥n sin guardar estado nuevamente
                const userCard = document.querySelector(`[data-user-id="${lastExpandedUserId}"]`);
                const detailsSection = userCard?.querySelector('.user-details');
                const chevron = button.querySelector('svg');
                
                if (detailsSection && chevron) {
                    // Aplicar expansi√≥n directamente
                    detailsSection.style.display = 'block';
                    const contentHeight = detailsSection.scrollHeight;
                    detailsSection.style.display = '';
                    
                    detailsSection.style.maxHeight = `${contentHeight + 100}px`;
                    detailsSection.style.opacity = '1';
                    detailsSection.style.paddingTop = '1.5rem';
                    detailsSection.style.paddingBottom = '1.5rem';
                    chevron.style.transform = 'rotate(180deg)';
                }
            }
        }, 100);
    }

    // Funci√≥n para inicializar la funcionalidad de usuarios
    function initializeUsersData() {
        console.log('üîÑ Inicializando funcionalidad de usuarios...');
        
        const serverIsland = document.getElementById('users-server-island');
        
        if (!serverIsland) {
            console.error('Server island no encontrada');
            return;
        }
        
        // Obtener datos del servidor
        allUsers = JSON.parse(serverIsland.getAttribute('data-users') || '[]');
        stats = JSON.parse(serverIsland.getAttribute('data-stats') || '{}');
        allRoles = JSON.parse(serverIsland.getAttribute('data-roles') || '[]');
        allRoleGroups = JSON.parse(serverIsland.getAttribute('data-role-groups') || '[]');
        allDegrees = JSON.parse(serverIsland.getAttribute('data-degrees') || '[]');
        allGroups = JSON.parse(serverIsland.getAttribute('data-groups') || '[]');
        const error = serverIsland.getAttribute('data-error');
        allRoleNames = JSON.parse(serverIsland.getAttribute('data-role-names') || '[]');
        allRoleIds = JSON.parse(serverIsland.getAttribute('data-role-ids') || '[]');

        // Cargar estado guardado
        const savedState = loadPageState();
        
        // Resetear estado base
        filteredUsers = [...allUsers];
        currentPage = savedState?.currentPage || 1;
        currentUser = null;
        availableRoles = [];
        expandedUsers = new Set(savedState?.expandedUsers || []);

        if (error) {
            console.error('‚ùå Error en server island:', error);
            return;
        }

        setupEventListeners();
        
        // Restaurar filtros guardados
        restoreFilters(savedState);
        
        // Inicializar la vista aplicando filtros si los hay
        filteredUsers = [...allUsers];
        if (savedState?.filters) {
            filterUsers(); // Esto aplicar√° los filtros restaurados
        } else {
            renderUsers();
            updatePagination();
        }
        
        // Restaurar usuarios expandidos despu√©s del renderizado
        restoreExpandedUsers(savedState);
        
        // Exponer funciones globalmente
        // window.openUserModal = openUserModal;
        // window.openAddRoleForm = openAddRoleForm;
        // window.removeRole = removeRole;

        function setupEventListeners() {
            document.getElementById('user-search')?.addEventListener('input', filterUsers);
            document.getElementById('role-filter')?.addEventListener('change', filterUsers);
            document.getElementById('role-group-filter')?.addEventListener('change', filterUsers);
            document.getElementById('degree-filter')?.addEventListener('change', filterUsers);
            document.getElementById('class-group-filter')?.addEventListener('change', filterUsers);
            document.getElementById('export-users-btn')?.addEventListener('click', exportUsers);
            
            // Event listeners para botones de gesti√≥n de usuario
            document.querySelectorAll('.user-manage-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    toggleUserDetails(userId, this);
                });
            });

            // Event listeners para botones de a√±adir rol
            document.querySelectorAll('.add-role-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const userId = this.getAttribute('data-user-id');
                    showAddRoleForm(userId);
                });
            });

            // Event listeners para botones de eliminar rol
            document.querySelectorAll('.remove-role-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const userId = this.getAttribute('data-user-id');
                    const roleId = this.getAttribute('data-role-id');
                    const roleName = this.getAttribute('data-role-name');
                    const userGroupId = this.getAttribute('data-user-group-id');
                    confirmRemoveRole(userId, roleId, roleName, userGroupId);
                });
            });
        }

        function filterUsers() {
            const search = document.getElementById('user-search').value.toLowerCase();
            const roleFilter = document.getElementById('role-filter').value;
            const roleGroupFilter = document.getElementById('role-group-filter').value;
            const degreeFilter = document.getElementById('degree-filter').value;
            const classGroupFilter = document.getElementById('class-group-filter').value;

            filteredUsers = allUsers.filter(user => {
                // Buscar en m√∫ltiples campos
                const searchText = [
                    user.email || '',
                    user.full_name || user.name || '',
                    user.dni || '',
                    user.user_id || '',
                    user.phone || ''
                ].join(' ').toLowerCase();
                
                const matchesSearch = !search || searchText.includes(search);
                
                // Filtro por rol espec√≠fico
                const matchesRole = !roleFilter || 
                    (roleFilter === 'sin-roles' && (!user.roles || user.roles.length === 0)) ||
                    (user.roles && user.roles.some(role => role.role_name === roleFilter));
                
                // Filtro por grupo de rol (CD/XA)
                const matchesRoleGroup = !roleGroupFilter ||
                    (roleGroupFilter === 'sin-roles' && (!user.roles || user.roles.length === 0 || !user.roles.some(role => role.role_group))) ||
                    (user.roles && user.roles.some(role => role.role_group === roleGroupFilter));

                // Filtro por grado
                const matchesDegree = !degreeFilter ||
                    (degreeFilter === 'sin-grados' && !user.degree_name) ||
                    user.degree_name === degreeFilter;

                // Filtro por grupo de clase
                const matchesClassGroup = !classGroupFilter ||
                    (classGroupFilter === 'sin-grupos' && !user.group_id) ||
                    user.group_id === classGroupFilter;

                return matchesSearch && matchesRole && matchesRoleGroup && matchesDegree && matchesClassGroup;
            });

            currentPage = 1;
            renderUsers();
            updatePagination();
            
            // Guardar estado de filtros
            savePageState();
        }

        function renderUsers() {
            const startIndex = (currentPage - 1) * usersPerPage;
            const endIndex = startIndex + usersPerPage;
            const pageUsers = filteredUsers.slice(startIndex, endIndex);

            if (pageUsers.length === 0) {
                document.getElementById('users-list').innerHTML = 
                    '<div class="text-center text-white/60 py-8">No se encontraron usuarios</div>';
                return;
            }

            const html = pageUsers.map(user => renderUserRowHTML(user)).join('');
            document.getElementById('users-list').innerHTML = html;
            
            // Reagregar event listeners a los nuevos botones
            document.querySelectorAll('.user-manage-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    toggleUserDetails(userId, this);
                });
            });

            document.querySelectorAll('.add-role-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const userId = this.getAttribute('data-user-id');
                    showAddRoleForm(userId);
                });
            });

            document.querySelectorAll('.remove-role-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const userId = this.getAttribute('data-user-id');
                    const roleId = this.getAttribute('data-role-id');
                    const roleName = this.getAttribute('data-role-name');
                    const userGroupId = this.getAttribute('data-user-group-id');
                    confirmRemoveRole(userId, roleId, roleName, userGroupId);
                });
            });
        }

        function updatePagination() {
            const totalPages = Math.ceil(filteredUsers.length / usersPerPage);
            const paginationEl = document.getElementById('pagination');
            
            if (totalPages <= 1 || filteredUsers.length === 0) {
                paginationEl.classList.add('hidden');
                paginationEl.classList.remove('flex');
                return;
            }

            paginationEl.classList.remove('hidden');
            paginationEl.classList.add('flex');
            document.getElementById('page-info').textContent = `P√°gina ${currentPage} de ${totalPages}`;
            document.getElementById('prev-page').disabled = currentPage === 1;
            document.getElementById('next-page').disabled = currentPage === totalPages;

            document.getElementById('prev-page').onclick = () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderUsers();
                    updatePagination();
                    // Desplazar hacia arriba suavemente
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                    // Guardar estado despu√©s del cambio de p√°gina
                    savePageState();
                }
            };

            document.getElementById('next-page').onclick = () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    renderUsers();
                    updatePagination();
                    // Desplazar hacia arriba suavemente
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                    // Guardar estado despu√©s del cambio de p√°gina
                    savePageState();
                }
            };
        }

        function exportUsers() {
            const data = filteredUsers.map(user => ({
                email: user.email || '',
                nombre: user.full_name || user.name || '',
                dni_nie: user.dni || '',
                telefono: user.phone || '',
                grupo_clase: user.group_id || '',
                grado: user.degree_name || '',
                roles: user.roles && user.roles.length > 0 ? 
                    user.roles.map(r => r.role_name).join(', ') : 
                    'Sin roles',
                fecha_creacion: user.register_date 
            }));

            const csv = [
                ['Email', 'Nombre', 'DNI/NIE', 'Tel√©fono', 'Grupo', 'Grado', 'Roles', 'Fecha Creaci√≥n'],
                ...data.map(row => [
                    row.email, 
                    row.nombre, 
                    row.dni_nie, 
                    row.telefono, 
                    row.grupo_clase,
                    row.grado, 
                    row.roles, 
                    row.fecha_creacion
                ])
            ].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
                
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `usuarios_${new Date().toISOString().split('T')[0]}.csv`;
            a.click();
            window.URL.revokeObjectURL(url);
        }

        // Funci√≥n para expandir/contraer detalles del usuario
        function toggleUserDetails(userId, button) {
            const userCard = document.querySelector(`[data-user-id="${userId}"]`);
            const detailsSection = userCard.querySelector('.user-details');
            const chevron = button.querySelector('svg');
            
            // Verificar si est√° expandido
            const isExpanded = detailsSection.style.maxHeight && detailsSection.style.maxHeight !== '0px';
            
            if (!isExpanded) {
                // PRIMERO: Cerrar todos los dem√°s usuarios expandidos
                expandedUsers.forEach(expandedUserId => {
                    if (expandedUserId !== userId) {
                        const expandedCard = document.querySelector(`[data-user-id="${expandedUserId}"]`);
                        const expandedDetailsSection = expandedCard?.querySelector('.user-details');
                        const expandedButton = document.querySelector(`button[data-user-id="${expandedUserId}"].user-manage-btn`);
                        const expandedChevron = expandedButton?.querySelector('svg');
                        
                        if (expandedDetailsSection && expandedChevron) {
                            // Contraer usuario expandido
                            expandedDetailsSection.style.maxHeight = '0px';
                            expandedDetailsSection.style.opacity = '0';
                            expandedDetailsSection.style.paddingTop = '0';
                            expandedDetailsSection.style.paddingBottom = '0';
                            expandedChevron.style.transform = 'rotate(0deg)';
                        }
                    }
                });
                
                // Limpiar la lista de expandidos y a√±adir solo el nuevo
                expandedUsers.clear();
                expandedUsers.add(userId);
                
                // SEGUNDO: Expandir el usuario actual
                detailsSection.style.display = 'block';
                const contentHeight = detailsSection.scrollHeight;
                detailsSection.style.display = '';
                
                // Aplicar animaci√≥n de expansi√≥n
                detailsSection.style.maxHeight = `${contentHeight + 100}px`;
                detailsSection.style.opacity = '1';
                detailsSection.style.paddingTop = '1rem';
                detailsSection.style.paddingBottom = '1rem';
                
                // Ajustar padding para pantallas m√°s grandes
                const mediaQuery = window.matchMedia('(min-width: 640px)');
                if (mediaQuery.matches) {
                    detailsSection.style.paddingTop = '1.5rem';
                    detailsSection.style.paddingBottom = '1.5rem';
                }
                
                // Animar chevron con efecto m√°s suave
                chevron.style.transform = 'rotate(180deg)';
                
                // Animar elementos internos con stagger
                const gridItems = detailsSection.querySelectorAll('.grid > div');
                gridItems.forEach((item, index) => {
                    item.style.animationDelay = `${index * 0.1}s`;
                });
                
            } else {
                // Contraer
                detailsSection.style.maxHeight = '0px';
                detailsSection.style.opacity = '0';
                detailsSection.style.paddingTop = '0';
                detailsSection.style.paddingBottom = '0';
                
                // Animar chevron
                chevron.style.transform = 'rotate(0deg)';
                
                // Quitar usuario de la lista de expandidos
                expandedUsers.delete(userId);
            }
            
            // Guardar estado despu√©s de cambiar expansi√≥n
            savePageState();
        }

        // Funci√≥n para mostrar formulario de a√±adir rol
        function showAddRoleForm(userId) {
            // Obtener datos desde el DOM
            const serverIsland = document.getElementById('users-server-island');
            const usersData = serverIsland ? JSON.parse(serverIsland.dataset.users || '[]') : [];
            const groupsXAData = serverIsland ? JSON.parse(serverIsland.dataset.groupsXa || '[]') : [];
            
            console.log('üè´ Grupos XA disponibles:', groupsXAData);
            
            // Encontrar el usuario espec√≠fico para ver qu√© roles ya tiene
            const targetUser = usersData.find(user => user.user_id === userId);
            const existingRoleIds = targetUser?.roles?.map(role => role.role_id) || [];
            
            console.log('üë§ Usuario objetivo:', targetUser?.email);
            console.log('üé≠ Roles existentes:', existingRoleIds);
            
            // Filtrar roles disponibles para excluir los que ya tiene el usuario
            const availableRoleNames = [];
            const availableRoleIds = [];
            
            allRoleNames.forEach((roleName, index) => {
                const roleId = allRoleIds[index];
                if (!existingRoleIds.includes(roleId)) {
                    availableRoleNames.push(roleName);
                    availableRoleIds.push(roleId);
                }
            });
            
            console.log('‚úÖ Roles disponibles para asignar:', availableRoleNames.length);
            
            // Si no hay roles disponibles, mostrar mensaje
            if (availableRoleNames.length === 0) {
                showNotification('Este usuario ya tiene todos los roles disponibles', 'info');
                return;
            }
            
            // Funci√≥n para obtener grupos disponibles seg√∫n el rol
            function getAvailableGroupsForRole(roleId) {
                const availableGroups = [];
                
                groupsXAData.forEach(group => {
                    if (roleId === 'group_delegate') {
                        // Solo a√±adir si NO tiene delegado (has_delegate es false)
                        if (!group.has_delegate) {
                            availableGroups.push({
                                id: group.id,
                                name: `${group.id.slice(2)} - ${group.id.slice(0, 1)}¬∫`
                            });
                        }
                    } else if (roleId === 'group_subdelegate') {
                        // Solo a√±adir si NO tiene subdelegado (has_subdelegate es false)
                        if (!group.has_subdelegate) {
                            availableGroups.push({
                                id: group.id,
                                name: `${group.id.slice(2)} - ${group.id.slice(0, 1)}¬∫`
                            });
                        }
                    }
                });
                
                return availableGroups;
            }
            
            // Obtener grupos generales para roles opcionales (mantener funcionalidad existente)
            const generalAvailableGroups = Array.from(new Set(usersData
                .filter(user => user.group_id && user.group_year && user.group_branch)
                .map(user => `${user.group_year}¬∫ ${user.group_branch} - ${user.group_site || 'No especificado'}`)
            )).sort();

            // Crear modal para a√±adir rol
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4';
            modal.innerHTML = `
                <div class="bg-azul-oscuro border border-white/20 rounded-xl p-4 sm:p-6 max-w-md w-full max-h-[90vh] overflow-y-auto">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-base sm:text-lg font-semibold text-white">A√±adir Rol</h3>
                        <button class="close-modal text-white/60 hover:text-white">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    ${existingRoleIds.length > 0 ? `
                    <div class="mb-4 p-3 bg-blue-900/30 border border-blue-500/30 rounded-lg">
                        <p class="text-white/80 text-sm">
                            <span class="text-blue-400">‚ÑπÔ∏è Nota:</span> Solo se muestran roles que el usuario a√∫n no tiene asignados.
                        </p>
                    </div>
                    ` : ''}
                    <form id="add-role-form" class="space-y-4">
                        <div>
                            <label class="block text-white/80 text-sm mb-2">Seleccionar Rol *</label>
                            <select name="roleId" id="roleSelect" required class="w-full px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-dai text-sm">
                                <option value="">Selecciona un rol...</option>
                                ${availableRoleNames.map((role, index) => `<option value="${availableRoleIds[index]}">${role}</option>`).join('')}
                            </select>
                        </div>
                        
                        <!-- Campo de grupo din√°mico para roles espec√≠ficos -->
                        <div id="groupField" class="hidden">
                            <label class="block text-white/80 text-sm mb-2">Seleccionar Grupo *</label>
                            <select name="requiredGroupId" id="groupSelect" class="w-full px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-dai text-sm">
                                <option value="">Selecciona un grupo...</option>
                                <!-- Las opciones se cargar√°n din√°micamente seg√∫n el rol -->
                            </select>
                            <p class="text-white/50 text-xs mt-1">
                                <span class="text-yellow-400">‚ö†Ô∏è</span> <span id="groupFieldDescription">Este rol requiere la selecci√≥n de un grupo espec√≠fico</span>
                            </p>
                        </div>
                        
                        <!-- Campo de grupo opcional (para otros roles) -->
                        ${generalAvailableGroups.length > 0 ? `
                        <div id="optionalGroupField">
                            <label class="block text-white/80 text-sm mb-2">Grupo (Opcional)</label>
                            <select name="groupId" class="w-full px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-dai text-sm">
                                <option value="">Sin grupo espec√≠fico</option>
                                ${generalAvailableGroups.map(group => `<option value="${group}">${group}</option>`).join('')}
                            </select>
                            <p class="text-white/50 text-xs mt-1">Algunos roles pueden requerir un grupo espec√≠fico</p>
                        </div>
                        ` : ''}
                        
                        <div class="flex flex-col sm:flex-row sm:justify-end space-y-2 sm:space-y-0 sm:space-x-3 pt-2">
                            <button type="button" class="close-modal w-full sm:w-auto px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors text-sm">
                                Cancelar
                            </button>
                            <button type="submit" class="w-full sm:w-auto px-4 py-2 bg-dai hover:bg-dai/80 text-white rounded-lg transition-colors text-sm">
                                A√±adir Rol
                            </button>
                        </div>
                    </form>
                </div>
            `;

            document.body.appendChild(modal);

            // Event listeners del modal
            modal.querySelectorAll('.close-modal').forEach(btn => {
                btn.addEventListener('click', () => modal.remove());
            });

            modal.addEventListener('click', (e) => {
                if (e.target === modal) modal.remove();
            });

            // L√≥gica para mostrar/ocultar campos de grupo seg√∫n el rol seleccionado
            const roleSelect = modal.querySelector('#roleSelect');
            const groupField = modal.querySelector('#groupField');
            const optionalGroupField = modal.querySelector('#optionalGroupField');
            const groupSelect = modal.querySelector('#groupSelect');
            const groupFieldDescription = modal.querySelector('#groupFieldDescription');
            
            function handleRoleChange() {
                const selectedRoleId = roleSelect.value;
                const isGroupRole = selectedRoleId === 'group_delegate' || selectedRoleId === 'group_subdelegate';
                
                if (isGroupRole) {
                    // Obtener grupos disponibles para el rol espec√≠fico
                    const availableGroupsForRole = getAvailableGroupsForRole(selectedRoleId);
                    
                    console.log('üéØ Grupos disponibles para ' + selectedRoleId + ':', availableGroupsForRole);
                    
                    // Limpiar opciones existentes
                    groupSelect.innerHTML = '<option value="">Selecciona un grupo...</option>';
                    
                    // A√±adir las nuevas opciones
                    availableGroupsForRole.forEach(group => {
                        const option = document.createElement('option');
                        option.value = group.id;
                        option.textContent = group.name;
                        groupSelect.appendChild(option);
                    });
                    
                    // Actualizar descripci√≥n seg√∫n el rol
                    if (selectedRoleId === 'group_delegate') {
                        groupFieldDescription.textContent = 'Solo se muestran grupos que NO tienen delegado asignado';
                    } else if (selectedRoleId === 'group_subdelegate') {
                        groupFieldDescription.textContent = 'Solo se muestran grupos que NO tienen subdelegado asignado';
                    }
                    
                    // Mostrar campo obligatorio y ocultar opcional
                    groupField?.classList.remove('hidden');
                    optionalGroupField?.classList.add('hidden');
                    groupSelect?.setAttribute('required', 'true');
                    
                    // Verificar si hay grupos disponibles
                    if (availableGroupsForRole.length === 0) {
                        const noGroupsMessage = selectedRoleId === 'group_delegate' ? 
                            'No hay grupos disponibles sin delegado' : 
                            'No hay grupos disponibles sin subdelegado';
                        showNotification(noGroupsMessage, 'warning');
                    }
                    
                } else {
                    // Para otros roles (no delegado/subdelegado), ocultar completamente los campos de grupo
                    groupField?.classList.add('hidden');
                    optionalGroupField?.classList.add('hidden');
                    groupSelect?.removeAttribute('required');
                    groupSelect.value = ''; // Limpiar selecci√≥n
                }
            }
            
            roleSelect?.addEventListener('change', handleRoleChange);
            
            // Ejecutar al cargar para establecer estado inicial
            handleRoleChange();

            modal.querySelector('#add-role-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(e.target);
                const roleId = formData.get('roleId');
                
                // Determinar qu√© campo de grupo usar
                let groupId = null;
                const selectedRoleId = roleId;
                const isGroupRole = selectedRoleId === 'group_delegate' || selectedRoleId === 'group_subdelegate';
                
                if (isGroupRole) {
                    groupId = formData.get('requiredGroupId');
                    
                    // Validaci√≥n adicional para roles que requieren grupo
                    if (!groupId) {
                        showNotification('Debe seleccionar un grupo para este rol', 'error');
                        return;
                    }
                } else {
                    groupId = formData.get('groupId') || null;
                }
                
                console.log('üéØ Datos del formulario:', { 
                    userId, 
                    roleId, 
                    groupId,
                    isGroupRole,
                    roleIdType: typeof roleId,
                    allRoleIds: allRoleIds,
                    allRoleNames: allRoleNames
                });
                
                await addUserRole(userId, roleId, groupId);
                modal.remove();
            });
        }

        // Funci√≥n para confirmar eliminaci√≥n de rol
        function confirmRemoveRole(userId, roleId, roleName, userGroupId) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4';
            modal.innerHTML = `
                <div class="bg-azul-oscuro border border-white/20 rounded-xl p-4 sm:p-6 max-w-md w-full">
                    <div class="flex items-start mb-4">
                        <svg class="w-6 h-6 sm:w-8 sm:h-8 text-red-500 mr-3 mt-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                        <h3 class="text-base sm:text-lg font-semibold text-white">Confirmar Eliminaci√≥n</h3>
                    </div>
                    <p class="text-white/80 mb-6 text-sm sm:text-base">
                        ¬øEst√°s seguro de que quieres eliminar el rol "<span class="font-semibold text-dai">${roleName}</span>" de este usuario?
                        Esta acci√≥n no se puede deshacer.
                    </p>
                    <div class="flex flex-col sm:flex-row sm:justify-end space-y-2 sm:space-y-0 sm:space-x-3">
                        <button class="cancel-btn w-full sm:w-auto px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors text-sm">
                            Cancelar
                        </button>
                        <button class="confirm-btn w-full sm:w-auto px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors text-sm">
                            Eliminar Rol
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

            modal.querySelector('.cancel-btn').addEventListener('click', () => modal.remove());
            modal.addEventListener('click', (e) => {
                if (e.target === modal) modal.remove();
            });

            modal.querySelector('.confirm-btn').addEventListener('click', async () => {
                // Determinar si necesitamos el groupId para roles de delegado/subdelegado
                const needsGroupId = roleId === 'group_delegate' || roleId === 'group_subdelegate';
                const groupId = needsGroupId ? userGroupId : null;
                
                // console.log('üóëÔ∏è Eliminando rol:', { userId, roleId, roleName, needsGroupId, groupId });
                
                await removeUserRole(userId, roleId, groupId);
                modal.remove();
            });
        }

        // Funci√≥n para a√±adir rol a usuario
        async function addUserRole(userId, roleId, groupId = null) {
            try {
                console.log('üîÑ A√±adiendo rol:', { userId, roleId, groupId });
                
                const requestBody = { userId, roleId };
                if (groupId) {
                    requestBody.groupId = groupId;
                }

                const response = await fetch('/api/admin/users/add-role', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestBody),
                });

                const result = await response.json();
                console.log('üìã Respuesta del servidor:', { status: response.status, result });

                if (response.ok) {
                    // Mostrar notificaci√≥n de √©xito
                    const message = result.message || 'Rol a√±adido correctamente';
                    showNotification(message, 'success');
                    console.log('‚úÖ Rol a√±adido exitosamente');
                    
                    // Recargar la p√°gina para mostrar los cambios
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    let errorMessage = result.error || 'Error al a√±adir el rol';
                    
                    // Personalizar mensajes de error espec√≠ficos
                    if (response.status === 409) {
                        errorMessage = '‚ö†Ô∏è Este usuario ya tiene el rol seleccionado';
                    } else if (response.status === 403) {
                        errorMessage = 'üö´ No tienes permisos para asignar roles';
                    } else if (response.status === 404) {
                        errorMessage = '‚ùì Usuario o rol no encontrado';
                    }
                    
                    console.error('‚ùå Error del servidor:', result);
                    showNotification(errorMessage, 'error');
                }
            } catch (error) {
                console.error('üí• Error a√±adiendo rol:', error);
                showNotification('Error de conexi√≥n al a√±adir el rol', 'error');
            }
        }

        // Funci√≥n para eliminar rol de usuario
        async function removeUserRole(userId, roleId, groupId = null) {
            try {
                const requestBody = { 
                    userId, 
                    roleId,
                    groupId: groupId // Siempre incluir groupId, incluso si es null
                };

                // console.log('üîÑ Enviando eliminaci√≥n de rol:', requestBody);

                const response = await fetch('/api/admin/users/remove-role', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestBody),
                });

                const result = await response.json();
                // console.log('üìã Respuesta del servidor:', { status: response.status, result });

                if (response.ok) {
                    // console.log('‚úÖ Rol eliminado exitosamente');
                    showNotification('Rol eliminado correctamente', 'success');
                    // Recargar la p√°gina para mostrar los cambios
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    console.error('‚ùå Error del servidor:', result);
                    showNotification(result.error || 'Error al eliminar el rol', 'error');
                }
            } catch (error) {
                console.error('Error eliminando rol:', error);
                showNotification('Error de conexi√≥n al eliminar el rol', 'error');
            }
        }

        // Funci√≥n para mostrar notificaciones
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white font-medium transition-all duration-300 transform translate-x-full ${
                type === 'success' ? 'bg-green-600' : 
                type === 'error' ? 'bg-red-600' : 
                'bg-blue-600'
            }`;
            notification.textContent = message;

            document.body.appendChild(notification);

            // Mostrar animaci√≥n
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);

            // Ocultar despu√©s de 3 segundos
            setTimeout(() => {
                notification.style.transform = 'translateX(full)';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }
    }

    // Inicializar al cargar la p√°gina
    document.addEventListener('DOMContentLoaded', initializeUsersData);

    // Inicializar despu√©s de cada navegaci√≥n entre p√°ginas
    document.addEventListener('astro:page-load', initializeUsersData);

    // Tambi√©n al cambiar de p√°gina din√°micamente
    document.addEventListener('astro:after-swap', initializeUsersData);

    // Limpiar recursos al salir de la p√°gina
    document.addEventListener('astro:before-swap', () => {
        console.log('üßπ Limpiando recursos de usuarios antes de cambio de p√°gina...');
        
        // Remover modales si existen
        const modals = document.querySelectorAll('.fixed.inset-0.bg-black\\/50');
        modals.forEach(modal => modal.remove());
        
        // Remover notificaciones si existen
        const notifications = document.querySelectorAll('.fixed.top-4.right-4.z-50');
        notifications.forEach(notification => notification.remove());
        
        // Resetear variables globales
        allUsers = [];
        stats = {};
        allRoles = [];
        allRoleGroups = [];
        allDegrees = [];
        allGroups = [];
        allRoleNames = [];
        allRoleIds = [];
        filteredUsers = [];
        currentPage = 1;
        currentUser = null;
        availableRoles = [];
        expandedUsers = new Set();
        
        console.log('‚úÖ Recursos de usuarios limpiados');
    });

    // Limpiar estado guardado cuando se navega fuera de admin
    document.addEventListener('astro:before-swap', () => {
        const currentPath = window.location.pathname;
        const nextPath = document.querySelector('link[rel="next"]')?.href || '';
        
        // Si salimos de la secci√≥n de administraci√≥n, limpiar estado guardado
        if (currentPath.includes('/admin') && !nextPath.includes('/admin')) {
            localStorage.removeItem('usersPageState');
            console.log('üßπ Estado de usuarios limpiado al salir de admin');
        }
    });
</script>
