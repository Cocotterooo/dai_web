---
import { supabase } from "@/lib/supabase";

import PrintStats from "@/components/admin/printStats.astro";
import { DEV } from "astro:env/server";


interface Props {
    campusPrinter: boolean;
    cityPrinter: boolean;
}
// Roles del usuario

const roleIds = Astro.locals.userRoleIds as string[] || [];
const campusPrinter = roleIds.includes("dai_printer_campus");
const cityPrinter = roleIds.includes("dai_printer_city");

// console.log("üîê Roles del usuario:", roleIds);

// Server Island: todo el procesamiento se hace en el servidor
interface User {
    id: string;
    name: string | null;
    full_name: string | null;
    email: string;
    dni: string | null;
    phone: string | null;
    avatar_url: string | null;
}

interface DaiFreeMember {
    user_id: string;
    name: string | null;
    full_name: string | null;
}

interface Stats {
    city: {
        prints_today: number;
        prints_last_30_days: number;
        prints_last_academic_year: number;
        prints_total: number;
    },
    campus: {
        prints_today: number;
        prints_last_30_days: number;
        prints_last_academic_year: number;
        prints_total: number;
    },
}

let freeMembers: DaiFreeMember[] = [];
let users: User[] = [];
let stats: Stats = { city: { prints_today: 0, prints_last_30_days: 0, prints_last_academic_year: 0, prints_total: 0 }, campus: { prints_today: 0, prints_last_30_days: 0, prints_last_academic_year: 0, prints_total: 0 } };
let error = '';

try {
    // Verificar autenticaci√≥n y permisos
    const user = Astro.locals.user;
    const userRoleIds = (Astro.locals.userRoleIds as unknown as string[]) || [];
    
    if (!user) {
        throw new Error("No autorizado");
    }

    const hasPermission = userRoleIds.includes("admin") 
                        || userRoleIds.includes("dai_delegate") 
                        || userRoleIds.includes("dai_secretary")
                        || userRoleIds.includes("dai_printer_campus")
                        || userRoleIds.includes("dai_printer_city");

    if (!hasPermission) {
        throw new Error("Permisos insuficientes");
    } 

    console.log("‚úÖ Cargando usuarios b√°sicos desde Server Island");

    // Obtener usuarios simples
    const { data: usersData, error: usersError } = await supabase
        .rpc("get_all_simple_users");

    if (usersError) {
        console.error("‚ùå Error cargando usuarios:", usersError);
        throw usersError;
    }
    const rawUsers = (usersData || []) as User[];
    users = rawUsers;
    console.log(`üìä Usuarios obtenidos: ${rawUsers.length}`);
    //console.log(users);

    // Obtener usuarios de la CD
    const { data: daiFreeMembers, error: daiFreeMembersError } = await supabase.rpc("get_dai_free_members_users");

    if (daiFreeMembersError) {
        console.error("‚ùå Error cargando usuarios DAI Free Members:", daiFreeMembersError);
        throw daiFreeMembersError;
    }
    freeMembers = (daiFreeMembers || []) as DaiFreeMember[];
    console.log(`üìä Miembros DAI Free Members obtenidos: ${freeMembers.length}`);
    //console.log(freeMembers);
    // Calcular estad√≠sticas
    //console.log("üìà Estad√≠sticas calculadas:", stats);

} catch (err) {
    console.error("‚ùå Error en UsersServerIsland:", err);
    error = err instanceof Error ? err.message : 'Error desconocido';
}

---

<!-- Server Island: contenido renderizado en el servidor -->
<div id="users-server-island" 
    data-users={JSON.stringify(users)} 
    data-free-members={JSON.stringify(freeMembers)}
    data-stats={JSON.stringify(stats)} 
    data-campus-printer={JSON.stringify(campusPrinter)}
    data-city-printer={JSON.stringify(cityPrinter)}
    data-error={error}>
    {error ? (
        <div class="text-center text-red-400 py-8">
            <h3 class="text-lg font-semibold mb-2">Error al cargar el panel de impresiones</h3>
            <p>{error}</p>
        </div>
    ) : (
        <>
            <!-- Estad√≠sticas -->
            <div class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6 mb-6 sm:mb-8">
                <PrintStats id="prints-today" stats={stats} title="Impresiones (Hoy)" description="Campus / Ciudad" stat1={stats.campus.prints_today} stat2={stats.city.prints_today} stat3_campus="0 / 0" stat3_city="0 / 0" textColor="text-dai"/>
                <PrintStats id="prints-last-30-days" stats={stats} title="Impresiones (√öltimos 30 D√≠as)" description="Campus / Ciudad" stat1={stats.campus.prints_last_30_days} stat2={stats.city.prints_last_30_days} stat3_campus="0 / 0" stat3_city="0 / 0" textColor="text-dai"/>
                <PrintStats id="prints-start-of-year" stats={stats} title="Impresiones (Inicio de Curso)" description="Campus / Ciudad" stat1={stats.campus.prints_last_academic_year} stat2={stats.city.prints_last_academic_year} stat3_campus="0 / 0" stat3_city="0/0" textColor="text-purple-400"/>
                <PrintStats id="prints-total" stats={stats} title="Impresiones (Totales)" description="Campus / Ciudad" stat1={stats.campus.prints_total} stat2={stats.city.prints_total} stat3_campus="0 / 0" stat3_city="0 / 0" textColor="text-purple-400"/>
            </div>

            <!-- Gesti√≥n de Impresiones -->
            <div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-3 sm:p-4 lg:p-6">
                <div class="flex flex-col space-y-3 sm:space-y-0 sm:flex-row sm:items-center sm:justify-between mb-4 sm:mb-6">
                    <h2 class="text-lg sm:text-xl font-semibold text-white">Gestor de Impresiones</h2>
                    <div class="flex flex-col sm:flex-row gap-2 sm:gap-3">
                        <button 
                            id="refresh-prints-btn"
                            class="w-full sm:w-auto px-3 sm:px-4 py-2 bg-dai hover:bg-dai/80 text-white rounded-lg transition-colors duration-200 flex items-center justify-center gap-2 text-sm"
                            onclick="window.location.reload()"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            Actualizar
                        </button>
                    </div>
                </div>
                
                <!-- Panel principal de gesti√≥n de impresiones -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                    <!-- Panel izquierdo: Datos del usuario seleccionado -->
                    <div class="bg-azul-oscuro/50 border border-white/20 rounded-lg p-4">
                        <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                            Usuario Seleccionado
                        </h3>
                        
                        <div id="selected-user-info" class="space-y-4">
                            <!-- Estado por defecto sin usuario seleccionado -->
                            <div id="no-user-selected" class="text-center py-8">
                                <div class="w-20 h-20 bg-white/10 rounded-full mx-auto mb-4 flex items-center justify-center">
                                    <svg class="w-10 h-10 text-white/40" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                </div>
                                <p class="text-white/60 text-sm">Selecciona un usuario para ver sus datos</p>
                            </div>

                            <!-- Informaci√≥n del usuario cuando est√© seleccionado -->
                            <div id="user-selected-info" class="hidden">
                                <div class="flex items-center space-x-4 mb-4">
                                    <div id="user-avatar" class="w-16 h-16 bg-dai/20 rounded-full flex items-center justify-center border-2 border-dai/30">
                                        <span id="user-initial" class="text-dai font-semibold text-xl"></span>
                                    </div>
                                    <div class="flex-1">
                                        <h4 id="user-name" class="text-white font-semibold text-lg"></h4>
                                        <p id="user-email" class="text-white/60 text-sm"></p>
                                        <p id="user-dni" class="text-white/60 text-xs"></p>
                                    </div>
                                </div>
                                
                                <div class="grid grid-cols-2 gap-4">
                                    <div class="bg-white/5 rounded-lg p-3 text-center">
                                        <div id="user-remaining-prints" class="text-2xl font-bold text-dai mb-1">--</div>
                                        <div class="text-white/60 text-xs">Restantes (Este mes)</div>
                                        <div class="text-white/40 text-xs">(P√°ginas/40 - Hojas/20)</div>
                                    </div>
                                    <div class="bg-white/5 rounded-lg p-3 text-center">
                                        <div id="user-total-prints" class="text-2xl font-bold text-purple-400 mb-1">--</div>
                                        <div class="text-white/60 text-xs">Total realizadas</div>
                                        <div class="text-white/40 text-xs">(P√°ginas - Hojas)</div>
                                    </div>
                                </div>
                                
                                <!-- Aviso de l√≠mite -->
                                <div id="limit-warning" class="hidden bg-red-500/20 border border-red-500 rounded-lg p-3 mt-4">
                                    <div class="flex items-center gap-2 text-red-300">
                                        <img src="/src/assets/icons/triangleWarning.svg" class="w-8 h-8 warning-icon">
                                        <div class="text-sm">
                                            <p class="text-red-400 font-semibold">Aviso de l√≠mite</p>
                                            <p class="text-red-300" id="limit-warning-message">
                                                Esta impresi√≥n har√° que el usuario supere su l√≠mite mensual.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                
                                {/*}<div class="space-y-2 text-sm">
                                    <div class="flex justify-between">
                                        <span class="text-white/60">Id:</span>
                                        <span id="user-id" class="text-white">--</span>
                                    </div>
                                </div>*/}
                            </div>

                            <!-- Resultados de b√∫squeda -->
                            <div id="search-results" class="hidden space-y-2 max-h-54 rounded-xl bg-azul-oscuro/50 overflow-y-auto">
                                <!-- Los resultados se cargar√°n din√°micamente aqu√≠ -->
                            </div>

                        </div>
                    </div>
                    
                    <!-- Panel derecho: B√∫squeda y datos de impresi√≥n -->
                    <div class="space-y-4">
                        <!-- B√∫squeda de usuario -->
                        <div class="bg-azul-oscuro/50 border border-white/20 rounded-lg p-4">
                            <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                </svg>
                                Buscar Usuario
                            </h3>
                            
                            <div class="space-y-3">
                                <input 
                                    type="text" 
                                    id="user-search-input"
                                    placeholder="Buscar por nombre, DNI, tel√©fono o email..."
                                    class="w-full px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-dai text-sm"
                                />
                                <button 
                                    id="search-user-btn"
                                    class="w-full px-4 py-2 bg-dai hover:bg-dai/80 text-white rounded-lg transition-colors duration-200 flex items-center justify-center gap-2 text-sm"
                                >
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                    </svg>
                                    Buscar Usuario
                                </button>
                            </div>
                        </div>
                        
                        <!-- Datos de la impresi√≥n -->
                        <div class="bg-azul-oscuro/50 border border-white/20 rounded-lg p-4">
                            <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path>
                                </svg>
                                Datos de Impresi√≥n
                            </h3>
                            
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-white/60 text-sm mb-2">N√∫mero de p√°ginas</label>
                                    <input 
                                        type="number" 
                                        id="pages-input"
                                        min="1"
                                        placeholder="Ej: 5"
                                        class="w-full px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-dai text-sm"
                                    />
                                </div>
                                
                                <div>
                                    <label class="block text-white/60 text-sm mb-2">N√∫mero de hojas</label>
                                    <input 
                                        type="number" 
                                        id="sheets-input"
                                        min="1"
                                        placeholder="Se calcula autom√°ticamente"
                                        class="w-full px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-dai text-sm"
                                    />
                                    <p class="text-white/40 text-xs mt-1">M√°ximo: n√∫mero de p√°ginas (editable para impresi√≥n a una cara)</p>
                                </div>
                                
                                <div>
                                    <label class="block text-white/60 text-sm mb-2">Tipo de impresi√≥n</label>
                                    <select 
                                        id="print-type-select"
                                        class="w-full px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-dai text-sm"
                                    >
                                        <option value="bw">Blanco y Negro</option>
                                        <option value="color">Color</option>
                                    </select>
                                </div>
                                
                                <div>
                                    <label class="block text-white/60 text-sm mb-2">Miembro CD responsable</label>
                                    <select 
                                        id="cd-member-select"
                                        class="w-full px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-dai text-sm"
                                    >
                                        <option value="">Seleccionar miembro...</option>
                                        {freeMembers.map((member: DaiFreeMember) => (
                                            <option value={member.user_id}>
                                                {member.full_name || member.user_id}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                            </div>
                            
                            <button 
                                id="register-print-btn"
                                disabled
                                class="w-full mt-4 px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-500 disabled:cursor-not-allowed text-white rounded-lg transition-colors duration-200 flex items-center justify-center gap-2 text-sm"
                            >
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                Registrar Impresi√≥n
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Secci√≥n de emails de la API -->
                <div class="bg-azul-oscuro/50 border border-white/20 rounded-lg p-4">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-white flex items-center gap-2">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                            </svg>
                            Emails de Impresi√≥n
                        </h3>
                        <button 
                            id="refresh-emails-btn"
                            class="px-3 py-1 bg-dai/20 hover:bg-dai/40 text-white rounded text-xs transition-colors duration-200"
                        >
                            Actualizar
                        </button>
                    </div>
                    
                    <div id="emails-list" class="space-y-2 max-h-60 overflow-y-auto">
                        <!-- Estado inicial -->
                        <div class="text-center py-6 text-white/60">
                            <svg class="w-8 h-8 mx-auto mb-2 text-white/40" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                            </svg>
                            <p class="text-sm">Cargar emails de la API</p>
                            <button 
                                id="load-emails-btn"
                                class="mt-2 px-4 py-2 bg-dai hover:bg-dai/80 text-white rounded-lg text-xs transition-colors duration-200"
                            >
                                Cargar Emails
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </>
    )}
</div>

<script type="module">
    
    // Variables globales
    let allUsers = [];
    let selectedUser = null;
    let currentUserStats = null; // Estad√≠sticas del usuario seleccionado
    let cdMembers = [];
    let campusPrinter = false;
    let cityPrinter = false;
    let currentStats = null;

    // #00ace2
    // MARK: Funci√≥n para cargar estad√≠sticas generales
    async function loadPrintingStats() {
        try {
            const response = await fetch('/api/printing-stats', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error('Error al cargar estad√≠sticas');
            }

            const stats = await response.json();
            currentStats = stats;
            
            // Actualizar las tarjetas de estad√≠sticas en el DOM
            updateStatsDisplay(stats);
            
        } catch (error) {
            showNotification('Error al cargar estad√≠sticas de impresi√≥n', 'error');
        }
    }

    // #00ace2
    // MARK: Funci√≥n para actualizar el display de estad√≠sticas
    function updateStatsDisplay(stats) {
        if (!stats) return;

        // Mapear las estad√≠sticas a los IDs de los elementos
        // Tratar de obtener los valores con diferentes posibles nombres de campos
        const statsMapping = [
            {
                id: 'prints-today',
                stat1: stats.ca.today.services || 0,
                stat2: stats.ci.today.services || 0,
                stat3_campus: `${stats.ca.today.pages || 0} / ${stats.ca.today.sheets || 0}`,
                stat3_city: `${stats.ci.today.pages || 0} / ${stats.ci.today.sheets || 0}`
            },
            {
                id: 'prints-last-30-days',
                stat1: stats.ca.last_month.services || 0,
                stat2: stats.ci.last_month.services || 0,
                stat3_campus: `${stats.ca.last_month.pages || 0} / ${stats.ca.last_month.sheets || 0}`,
                stat3_city: `${stats.ci.last_month.pages || 0} / ${stats.ci.last_month.sheets || 0}`
            },
            {
                id: 'prints-start-of-year',
                stat1: stats.ca.last_academic_year.services || 0,
                stat2: stats.ci.last_academic_year.services || 0,
                stat3_campus: `${stats.ca.last_academic_year.pages || 0} / ${stats.ca.last_academic_year.sheets || 0}`,
                stat3_city: `${stats.ci.last_academic_year.pages || 0} / ${stats.ci.last_academic_year.sheets || 0}`
            },
            {
                id: 'prints-total',
                stat1: stats.ca.all.services || 0,
                stat2: stats.ci.all.services || 0,
                stat3_campus: `${stats.ca.all.pages || 0} / ${stats.ca.all.sheets || 0}`,
                stat3_city: `${stats.ci.all.pages || 0} / ${stats.ci.all.sheets || 0}`
            }
        ];

        // Actualizar cada tarjeta de estad√≠sticas
        statsMapping.forEach(({ id, stat1, stat2, stat3_campus, stat3_city }) => {
            // Actualizar el elemento stats12 (stat1 / stat2)
            const stats12Element = document.getElementById(`${id}-stats12`);
            if (stats12Element) {
                // Cambiar colores: Campus (azul) / Ciudad (morado)
                stats12Element.innerHTML = `<span class="text-dai">${stat1}</span> / <span class="text-purple-400">${stat2}</span>`;
            }
            
            // Actualizar el elemento stats3
            const stats3Element = document.getElementById(`${id}-stats3_campus`);
            if (stats3Element) {
                stats3Element.textContent = stat3_campus;
            }

            const stats3ElementCity = document.getElementById(`${id}-stats3_city`);
            if (stats3ElementCity) {
                stats3ElementCity.textContent = stat3_city;
            }
        });
        
        //console.log('üìä Estad√≠sticas actualizadas en el DOM');
    }

    // #00ace2
    //  Funci√≥n de inicializaci√≥n
    function initializePrintManager() {
        //console.log('üñ®Ô∏è Inicializando Print Manager...');
        
        // Cargar datos del server island
        const serverIsland = document.getElementById('users-server-island');
        if (!serverIsland) {
            console.error('‚ùå No se encontr√≥ el server island');
            return;
        }

        try {
            console.log()
            const usersData = JSON.parse(serverIsland.getAttribute('data-users') || '[]');
            const error = serverIsland.getAttribute('data-error');
            campusPrinter = JSON.parse(serverIsland.getAttribute('data-campus-printer') || 'false');
            cityPrinter = JSON.parse(serverIsland.getAttribute('data-city-printer') || 'false');

            if (error) {
                console.error('‚ùå Error del servidor:', error);
                return;
            }

            allUsers = usersData;
            //console.log(`üìä Usuarios cargados: ${allUsers.length}`);
            //console.log(`üñ®Ô∏è Permisos: Campus=${campusPrinter}, Ciudad=${cityPrinter}`);

            // Configurar event listeners
            setupEventListeners();
            
            // Cargar estad√≠sticas generales de impresi√≥n
            loadPrintingStats();

        } catch (err) {
            console.error('‚ùå Error inicializando Print Manager:', err);
        }
    }

    // Inicializaci√≥n inmediata si el DOM ya est√° listo
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializePrintManager);
    } else {
        initializePrintManager();
    }

    // Para navegaci√≥n de Astro
    document.addEventListener('astro:page-load', initializePrintManager);
    document.addEventListener('astro:after-swap', initializePrintManager);

    function setupEventListeners() {

        // Buscador de usuarios
        const searchInput = document.getElementById('user-search-input');
        const searchBtn = document.getElementById('search-user-btn');

        if (searchInput) {
            // B√∫squeda en tiempo real
            searchInput.addEventListener('input', handleUserSearch);
            
            // B√∫squeda al presionar Enter
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    handleUserSearch();
                }
            });
        }

        if (searchBtn) {
            searchBtn.addEventListener('click', handleUserSearch);
        }

        // C√°lculo autom√°tico de hojas
        const pagesInput = document.getElementById('pages-input');
        const sheetsInput = document.getElementById('sheets-input');

        if (pagesInput && sheetsInput) {
            pagesInput.addEventListener('input', () => {
                const pages = parseInt(pagesInput.value) || 0;
                const sheets = Math.ceil(pages / 2); // Asumiendo impresi√≥n a doble cara por defecto
                sheetsInput.value = sheets > 0 ? sheets.toString() : '';
                
                // Actualizar el m√°ximo permitido para hojas
                sheetsInput.setAttribute('max', pages.toString());
                
                updateRegisterButton();
            });

            sheetsInput.addEventListener('input', () => {
                const pages = parseInt(pagesInput.value) || 0;
                const sheets = parseInt(sheetsInput.value) || 0;
                
                // Validar que las hojas no excedan las p√°ginas
                if (sheets > pages && pages > 0) {
                    sheetsInput.value = pages.toString();
                }
                
                updateRegisterButton();
            });

        }

        // Validaci√≥n del formulario de impresi√≥n
        const printTypeSelect = document.getElementById('print-type-select');
        const cdMemberSelect = document.getElementById('cd-member-select');
        
        if (printTypeSelect) printTypeSelect.addEventListener('change', updateRegisterButton);
        if (cdMemberSelect) cdMemberSelect.addEventListener('change', updateRegisterButton);

        // Bot√≥n de registrar impresi√≥n
        const registerBtn = document.getElementById('register-print-btn');
        if (registerBtn) {
            registerBtn.addEventListener('click', handleRegisterPrint);
        }
    }


    // #00ace2
    // MARK: Funci√≥n para manejar la b√∫squeda de usuarios
    function handleUserSearch() {
        const searchInput = document.getElementById('user-search-input');
        const resultsContainer = document.getElementById('search-results');
        
        if (!searchInput || !resultsContainer) return;

        const query = searchInput.value.trim().toLowerCase();
        
        if (query.length < 2) {
            resultsContainer.innerHTML = '';
            resultsContainer.classList.add('hidden');
            return;
        }

        // Filtrar usuarios por nombre, DNI, tel√©fono y email
        const filteredUsers = allUsers.filter(user => {
            const searchableText = [
                user.full_name || user.name || '',
                user.email || '',
                user.dni || '',
                user.phone || '',
                user.id || ''
            ].join(' ').toLowerCase();

            return searchableText.includes(query);
        }).slice(0, 5); // Limitar a 5 resultados

        if (filteredUsers.length === 0) {
            resultsContainer.innerHTML = `
                <div class="text-center py-4 text-white/60 text-sm">
                    <svg class="w-6 h-6 mx-auto mb-2 text-white/40" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h10a2 2 0 012 2v14a2 2 0 01-2 2z"></path>
                    </svg>
                    No se encontraron usuarios
                </div>
            `;
        } else {
            resultsContainer.innerHTML = filteredUsers.map(user => `
                <div class="bg-azul-oscuro border border-white/20 rounded-lg p-2 cursor-pointer hover:bg-azul-oscuro/80 transition-colors duration-200" 
                    onclick="selectUser('${user.email}')">
                    <div class="flex items-center space-x-2">
                        ${user.avatar_url ? 
                            `<img src="${user.avatar_url}" alt="Avatar" class="w-16 h-16 rounded-full object-cover border border-dai/30">` :
                            `<div class="w-16 h-16 bg-dai/20 rounded-full flex items-center justify-center border border-dai/30">
                                <span class="text-dai font-semibold text-[2rem]">
                                    ${(user.full_name || user.name || user.email).charAt(0).toUpperCase()}
                                </span>
                            </div>`
                        }
                        <div class="flex-1 min-w-0">
                            <div class="text-white font-medium text-xs truncate">
                                ${user.full_name || user.name || 'Sin nombre'}
                            </div>
                            <div class="text-white/60 text-xs truncate">${user.email}</div>
                            ${user.dni ? `<div class="text-white/40 text-xs">DNI: ${user.dni}</div>` : ''}
                            ${user.phone ? `<div class="text-white/40 text-xs">Tel: ${user.phone}</div>` : ''}
                        </div>
                        <svg class="w-3 h-3 text-dai" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                    </div>
                </div>
            `).join('');
        }

        resultsContainer.classList.remove('hidden');
    }

    // Funci√≥n global para seleccionar usuario (necesaria para onclick)
    window.selectUser = function(userEmail) {
        const user = allUsers.find(u => u.email === userEmail);
        if (!user) return;

        selectedUser = user;
        displaySelectedUser(user);
        
        // Ocultar resultados de b√∫squeda
        const resultsContainer = document.getElementById('search-results');
        if (resultsContainer) {
            resultsContainer.classList.add('hidden');
        }

        // Limpiar input de b√∫squeda
        const searchInput = document.getElementById('user-search-input');
        if (searchInput) {
            searchInput.value = '';
        }

        updateRegisterButton();
    };

    // #00ace2
    // MARK: Cargar miembros de la CD
    function displaySelectedUser(user) {
        // Ocultar estado "sin usuario seleccionado"
        const noUserSelected = document.getElementById('no-user-selected');
        const userSelectedInfo = document.getElementById('user-selected-info');
        
        if (noUserSelected) noUserSelected.classList.add('hidden');
        if (userSelectedInfo) userSelectedInfo.classList.remove('hidden');

        // Actualizar informaci√≥n del usuario
        const userAvatar = document.getElementById('user-avatar');
        const userInitial = document.getElementById('user-initial');
        const userName = document.getElementById('user-name');
        const userEmail = document.getElementById('user-email');
        const userDni = document.getElementById('user-dni');
        const userPhone = document.getElementById('user-phone');
        const userGroup = document.getElementById('user-id');
        const userDegree = document.getElementById('user-degree');

        // Actualizar avatar
        if (userAvatar) {
            if (user.avatar_url) {
                // Si hay avatar, mostrar imagen
                userAvatar.innerHTML = `<img src="${user.avatar_url}" alt="Avatar de ${user.full_name || user.name || user.email}" class="w-16 h-16 rounded-full object-cover">`;
                userAvatar.className = "w-16 h-16 rounded-full";
            } else {
                // Si no hay avatar, mostrar inicial con fondo como en el buscador
                userAvatar.innerHTML = `<span class="text-dai font-semibold text-xl">${(user.full_name || user.name || user.email).charAt(0).toUpperCase()}</span>`;
                userAvatar.className = "w-16 h-16 bg-dai/20 rounded-full flex items-center justify-center border-2 border-dai/30";
            }
        }
        
        if (userName) {
            userName.textContent = user.full_name || user.name || 'Sin nombre';
        }
        
        if (userEmail) {
            userEmail.textContent = user.email;
        }
        
        if (userDni) {
            userDni.textContent = user.dni ? `DNI: ${user.dni}` : 'DNI: No disponible';
        }
        
        if (userPhone) {
            userPhone.textContent = user.phone || 'No disponible';
        }

        if (userGroup) {
            userGroup.textContent = user.id || '--';
        }

        if (userDegree) {
            userDegree.textContent = user.degree_name || '--';
        }

        // TODO: Cargar estad√≠sticas de impresi√≥n del usuario
        loadUserPrintingStats(user.id);
    }

    // #00ace2
    // MARK: Cargar estad√≠sticas de impresi√≥n del usuario
    async function loadUserPrintingStats(userId) {
        try {
            const response = await fetch('/api/print-user-stats', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ user_uuid: userId })
            });
            if (!response.ok) {
                throw new Error('Error al cargar estad√≠sticas del usuario');
            }

            const userStats = await response.json();
            console.log('üìä Estad√≠sticas del usuario:', userStats);
            
            // Almacenar estad√≠sticas del usuario actual
            currentUserStats = userStats;

            // Actualizar elementos de la interfaz
            const userRemainingPrints = document.getElementById('user-remaining-prints');
            const userTotalPrints = document.getElementById('user-total-prints');

            if (userRemainingPrints) {
                // Calcular p√°ginas restantes (40 m√°ximo por mes)
                const currentPages = userStats.pages_last_month || 0;
                const currentSheets = userStats.sheets_last_month || 0;
                const pagesRemaining = Math.max(0, 40 - currentPages);
                const sheetsRemaining = Math.max(0, 20 - currentSheets);
                
                // Cambiar color seg√∫n el estado del l√≠mite
                let textColorClass = 'text-dai'; // Color por defecto
                if (currentPages > 40 || currentSheets > 20) {
                    textColorClass = 'text-red-400'; // Rojo si ya super√≥ l√≠mite
                } else if (currentPages > 30 || currentSheets > 15) {
                    textColorClass = 'text-orange-400'; // Naranja si est√° cerca del l√≠mite
                }
                
                userRemainingPrints.className = `text-2xl font-bold ${textColorClass} mb-1`;
                userRemainingPrints.textContent = `${pagesRemaining} / ${sheetsRemaining}`;
            }

            if (userTotalPrints) {
                // Mostrar total de p√°ginas y hojas este mes
                const pagesThisMonth = userStats.pages_total || 0;
                const sheetsThisMonth = userStats.sheets_total || 0;
                
                // Cambiar color seg√∫n el estado del l√≠mite (usar last_month para verificar l√≠mite actual)
                const currentPages = userStats.pages_last_month || 0;
                const currentSheets = userStats.sheets_last_month || 0;
                let textColorClass = 'text-purple-400'; // Color por defecto
                if (currentPages > 40 || currentSheets > 20) {
                    textColorClass = 'text-red-400'; // Rojo si super√≥ l√≠mite
                } else if (currentPages > 30 || currentSheets > 15) {
                    textColorClass = 'text-orange-400'; // Naranja si est√° cerca
                }
                
                userTotalPrints.className = `text-2xl font-bold ${textColorClass} mb-1`;
                userTotalPrints.textContent = `${pagesThisMonth} / ${sheetsThisMonth}`;
            }

            // Actualizar el bot√≥n de registro despu√©s de cargar estad√≠sticas
            updateRegisterButton();

        } catch (error) {
            console.error('‚ùå Error cargando estad√≠sticas de usuario:', error);
            
            // Resetear estad√≠sticas en caso de error
            currentUserStats = null;
            
            // Mostrar valores por defecto en caso de error
            const userRemainingPrints = document.getElementById('user-remaining-prints');
            const userTotalPrints = document.getElementById('user-total-prints');
            
            if (userRemainingPrints) userRemainingPrints.textContent = '--';
            if (userTotalPrints) userTotalPrints.textContent = '--';
        }
    }

    // #00ace2
    // MARK: Habilitar o deshabilitar bot√≥n de registrar impresi√≥n
    function updateRegisterButton() {
        const registerBtn = document.getElementById('register-print-btn');
        const pagesInput = document.getElementById('pages-input');
        const sheetsInput = document.getElementById('sheets-input');
        const cdMemberSelect = document.getElementById('cd-member-select');
        const limitWarning = document.getElementById('limit-warning');
        const limitWarningMessage = document.getElementById('limit-warning-message');

        if (!registerBtn) return;

        const isFormValid = selectedUser && 
                            pagesInput?.value && 
                            parseInt(pagesInput.value) > 0 &&
                            sheetsInput?.value && 
                            parseInt(sheetsInput.value) > 0 &&
                            cdMemberSelect?.value;

        // Verificar l√≠mites y estados del usuario
        let limitStatus = 'normal'; // 'normal', 'already_exceeded', 'will_exceed'
        let exceedMessage = '';

        if (selectedUser && currentUserStats) {
            const currentPages = currentUserStats.pages_last_month || 0;
            const currentSheets = currentUserStats.sheets_last_month || 0;
            
            const pageLimit = 40;
            const sheetLimit = 20;
            
            // Verificar si YA se ha pasado del l√≠mite (sin nueva impresi√≥n)
            if (currentPages > pageLimit || currentSheets > sheetLimit) {
                limitStatus = 'already_exceeded';
                
                let exceedDetails = [];
                if (currentPages > pageLimit) {
                    exceedDetails.push(`P√°ginas: ${currentPages}/${pageLimit} (+${currentPages - pageLimit})`);
                }
                if (currentSheets > sheetLimit) {
                    exceedDetails.push(`Hojas: ${currentSheets}/${sheetLimit} (+${currentSheets - sheetLimit})`);
                }
                
                exceedMessage = `${exceedDetails.join(' | ')}`;
                
            } else if (isFormValid) {
                // Solo verificar si se va a superar si el formulario es v√°lido
                const newPages = parseInt(pagesInput.value) || 0;
                const newSheets = parseInt(sheetsInput.value) || 0;
                
                const totalPagesAfter = currentPages + newPages;
                const totalSheetsAfter = currentSheets + newSheets;
                
                if (totalPagesAfter > pageLimit || totalSheetsAfter > sheetLimit) {
                    limitStatus = 'will_exceed';
                    
                    let exceedDetails = [];
                    if (totalPagesAfter > pageLimit) {
                        exceedDetails.push(`P√°ginas: ${totalPagesAfter}/${pageLimit} (+${totalPagesAfter - pageLimit})`);
                    }
                    if (totalSheetsAfter > sheetLimit) {
                        exceedDetails.push(`Hojas: ${totalSheetsAfter}/${sheetLimit} (+${totalSheetsAfter - sheetLimit})`);
                    }
                    
                    exceedMessage = `Esta impresi√≥n har√° que el usuario supere su l√≠mite mensual. ${exceedDetails.join(' | ')}`;
                }
            }
        }

        // Mostrar/ocultar aviso de l√≠mite seg√∫n el estado
        if (limitWarning && limitWarningMessage) {
            if (limitStatus === 'already_exceeded') {
                limitWarning.classList.remove('hidden');
                limitWarning.className = 'bg-red-600/30 border border-red-400 rounded-lg p-3 mt-4'; // Rojo m√°s intenso para l√≠mite ya excedido
                limitWarningMessage.innerHTML = `
                    <p class="text-red-100 text-xs mt-1">(Todav√≠a se puede continuar registrando impresiones a este usuario)</p>
                `;
            } else if (limitStatus === 'will_exceed') {
                limitWarning.classList.remove('hidden');
                limitWarning.className = 'bg-orange-500/20 border border-orange-400 rounded-lg p-3 mt-4'; // Naranja para advertencia
                limitWarningMessage.innerHTML = `
                    <p class="text-orange-100 text-xs mt-1">${exceedMessage}</p>
                `;
            } else {
                limitWarning.classList.add('hidden');
            }
        }

        // Habilitar/deshabilitar bot√≥n seg√∫n la validez del formulario
        registerBtn.disabled = !isFormValid;
        
        if (isFormValid) {
            registerBtn.classList.remove('disabled:bg-gray-500', 'disabled:cursor-not-allowed');
            
            if (limitStatus === 'already_exceeded') {
                // Ya super√≥ l√≠mite pero se permite registrar
                registerBtn.classList.remove('bg-green-600', 'hover:bg-green-700', 'bg-orange-600', 'hover:bg-orange-700');
                registerBtn.classList.add('bg-red-600', 'hover:bg-red-700');
                registerBtn.innerHTML = `
                    <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-printer"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M17 17h2a2 2 0 0 0 2 -2v-4a2 2 0 0 0 -2 -2h-14a2 2 0 0 0 -2 2v4a2 2 0 0 0 2 2h2" /><path d="M17 9v-4a2 2 0 0 0 -2 -2h-6a2 2 0 0 0 -2 2v4" /><path d="M7 13m0 2a2 2 0 0 1 2 -2h6a2 2 0 0 1 2 2v4a2 2 0 0 1 -2 2h-6a2 2 0 0 1 -2 -2z" /></svg>
                    Registrar (L√≠mite superado)
                `;
            } else if (limitStatus === 'will_exceed') {
                // Va a exceder l√≠mite pero se permite registrar
                registerBtn.classList.remove('bg-green-600', 'hover:bg-green-700', 'bg-red-600', 'hover:bg-red-700');
                registerBtn.classList.add('bg-orange-600', 'hover:bg-orange-700');
                registerBtn.innerHTML = `
                    <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-printer"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M17 17h2a2 2 0 0 0 2 -2v-4a2 2 0 0 0 -2 -2h-14a2 2 0 0 0 -2 2v4a2 2 0 0 0 2 2h2" /><path d="M17 9v-4a2 2 0 0 0 -2 -2h-6a2 2 0 0 0 -2 2v4" /><path d="M7 13m0 2a2 2 0 0 1 2 -2h6a2 2 0 0 1 2 2v4a2 2 0 0 1 -2 2h-6a2 2 0 0 1 -2 -2z" /></svg>
                    Registrar (Superar√° el l√≠mite)
                `;
            } else {
                // Estado normal
                registerBtn.classList.remove('bg-orange-600', 'hover:bg-orange-700', 'bg-red-600', 'hover:bg-red-700');
                registerBtn.classList.add('bg-green-600', 'hover:bg-green-700');
                registerBtn.innerHTML = `
                    <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-printer"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M17 17h2a2 2 0 0 0 2 -2v-4a2 2 0 0 0 -2 -2h-14a2 2 0 0 0 -2 2v4a2 2 0 0 0 2 2h2" /><path d="M17 9v-4a2 2 0 0 0 -2 -2h-6a2 2 0 0 0 -2 2v4" /><path d="M7 13m0 2a2 2 0 0 1 2 -2h6a2 2 0 0 1 2 2v4a2 2 0 0 1 -2 2h-6a2 2 0 0 1 -2 -2z" /></svg>
                    Registrar Impresi√≥n
                `;
            }
        } else {
            registerBtn.classList.add('disabled:bg-gray-500', 'disabled:cursor-not-allowed');
            registerBtn.classList.remove('hover:bg-green-700', 'hover:bg-orange-700', 'hover:bg-red-700', 'bg-green-600', 'bg-orange-600', 'bg-red-600');
            registerBtn.innerHTML = `
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Registrar Impresi√≥n
            `;
        }
    }

    // #00ace2
    // MARK: Registrar impresi√≥n
    async function handleRegisterPrint() {
        if (!selectedUser) {
            showNotification('Selecciona un usuario primero', 'error');
            return;
        }

        const pagesInput = document.getElementById('pages-input');
        const sheetsInput = document.getElementById('sheets-input');
        const printTypeSelect = document.getElementById('print-type-select');
        const cdMemberSelect = document.getElementById('cd-member-select');
        let printerLocation = null;

        if (campusPrinter){
            printerLocation = 'ca';
        } else if (cityPrinter) {
            printerLocation = 'ci';
        }
        const printData = {
            user_id: selectedUser.id,
            pages: parseInt(pagesInput?.value || '0'),
            sheets: parseInt(sheetsInput?.value || '0'),
            print_type: printTypeSelect?.value || 'bw',
            cd_member: cdMemberSelect?.value || '',
            location: printerLocation || null
        };
        console.log('üñ®Ô∏è Datos de impresi√≥n a registrar:', printData);

        // Validar datos
        if (!printData.pages || !printData.sheets || !printData.cd_member) {
            showNotification('Completa todos los campos requeridos', 'error');
            return;
        }

        try {
            console.log('üìÑ Registrando impresi√≥n:', printData);
            
            const response = await fetch('/api/print-history', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(printData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || 'Error al registrar la impresi√≥n');
            }

            showNotification('Impresi√≥n registrada correctamente', 'success');
            //console.log('‚úÖ Impresi√≥n registrada correctamente:');

            // Reset completo del formulario incluyendo el usuario seleccionado
            resetPrintForm();
            
            // Recargar estad√≠sticas despu√©s de registrar impresi√≥n
            await loadPrintingStats();
            
        } catch (error) {
            console.error('‚ùå Error registrando impresi√≥n:', error);
            showNotification(error.message || 'Error al registrar la impresi√≥n', 'error');
        }
    }

    // #00ace2
    function resetPrintFormOnly() {
        // Limpiar solo los campos del formulario de impresi√≥n
        const pagesInput = document.getElementById('pages-input');
        const sheetsInput = document.getElementById('sheets-input');
        const printTypeSelect = document.getElementById('print-type-select');
        const cdMemberSelect = document.getElementById('cd-member-select');
        const limitWarning = document.getElementById('limit-warning');

        if (pagesInput) pagesInput.value = '';
        if (sheetsInput) sheetsInput.value = '';
        if (printTypeSelect) printTypeSelect.value = 'bw';
        if (cdMemberSelect) cdMemberSelect.value = '';
        
        // Ocultar aviso de l√≠mite
        if (limitWarning) limitWarning.classList.add('hidden');

        // NO resetear el usuario seleccionado ni sus estad√≠sticas
        updateRegisterButton();
    }

    // #00ace2
    function resetPrintForm() {
        // Limpiar formulario
        const pagesInput = document.getElementById('pages-input');
        const sheetsInput = document.getElementById('sheets-input');
        const printTypeSelect = document.getElementById('print-type-select');
        const cdMemberSelect = document.getElementById('cd-member-select');
        const limitWarning = document.getElementById('limit-warning');

        if (pagesInput) pagesInput.value = '';
        if (sheetsInput) sheetsInput.value = '';
        if (printTypeSelect) printTypeSelect.value = 'bw';
        if (cdMemberSelect) cdMemberSelect.value = '';
        
        // Ocultar aviso de l√≠mite
        if (limitWarning) limitWarning.classList.add('hidden');

        // Reset usuario seleccionado y sus estad√≠sticas
        selectedUser = null;
        currentUserStats = null;
        
        const noUserSelected = document.getElementById('no-user-selected');
        const userSelectedInfo = document.getElementById('user-selected-info');
        
        if (noUserSelected) noUserSelected.classList.remove('hidden');
        if (userSelectedInfo) userSelectedInfo.classList.add('hidden');

        updateRegisterButton();
    }

    // #00ace2
    function showNotification(message, type = 'info') {
        // Crear notificaci√≥n
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg text-white max-w-sm transform transition-all duration-300 translate-x-full opacity-0`;
        
        // A√±adir clases seg√∫n el tipo
        if (type === 'success') {
            notification.classList.add('bg-azul-oscuro', 'border-2', 'border-green-600');
        } else if (type === 'error') {
            notification.classList.add('bg-azul-oscuro', 'border-2', 'border-red-600');
        } else {
            notification.classList.add('bg-blue-600', 'border-2', 'border-blue-700');
        }

        notification.innerHTML = `
            <div class="flex items-center justify-between">
                <span class="text-sm">${message}</span>
                <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-300">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        `;

        document.body.appendChild(notification);

        // Animaci√≥n de entrada
        setTimeout(() => {
            notification.classList.remove('translate-x-full', 'opacity-0');
        }, 100);

        // Auto-eliminar despu√©s de 5 segundos
        setTimeout(() => {
            notification.classList.add('translate-x-full', 'opacity-0');
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 300);
        }, 5000);
    }

    // Limpiar recursos al salir de la p√°gina
    document.addEventListener('astro:before-swap', () => {
        allUsers = [];
        selectedUser = null;
        currentUserStats = null;
        cdMembers = [];
    });
</script>

<style>
    /* Estilos para iconos de advertencia */
    .warning-icon {
        filter: brightness(0) saturate(100%) invert(88%) sepia(25%) saturate(1081%) hue-rotate(316deg) brightness(95%) contrast(87%);
    }
    
    .warning-icon-small {
        filter: brightness(0) saturate(100%) invert(88%) sepia(25%) saturate(1081%) hue-rotate(316deg) brightness(95%) contrast(87%);
    }
</style>