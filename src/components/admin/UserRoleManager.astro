---
// Componente para administrar roles de usuarios

// Props del componente
const { userId, userName } = Astro.props;
---

<div class="bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl p-6 mb-6">
    <h3 class="text-lg font-semibold text-white mb-4">
        Gestionar Roles - {userName || 'Usuario'}
    </h3>
    
    <!-- Roles actuales -->
    <div class="mb-6">
        <h4 class="text-md font-medium text-white mb-3">Roles Actuales</h4>
        <div id="current-roles-container" class="space-y-2">
            <div class="text-white/60">Cargando...</div>
        </div>
    </div>
    
    <!-- Comisiones actuales -->
    <div class="mb-6">
        <h4 class="text-md font-medium text-white mb-3">Comisiones Actuales</h4>
        <div id="current-commissions-container" class="space-y-2">
            <div class="text-white/60">Cargando...</div>
        </div>
    </div>
    
    <!-- Formulario para Xunta de Alumnado -->
    <div class="border-t border-white/20 pt-6">
        <h4 class="text-md font-medium text-white mb-4">üéì Asignar Rol de Xunta de Alumnado</h4>
        <form id="add-student-council-form" class="space-y-4">
            <!-- Dropdown para roles de Xunta -->
            <div class="relative">
                <label class="block text-sm font-medium text-white/80 mb-2">
                    Rol en Xunta de Alumnado
                </label>
                <div class="custom-dropdown">
                    <button 
                        type="button"
                        id="student-council-dropdown-btn"
                        class="w-full px-4 py-3 bg-azul-oscuro border border-white/30 rounded-lg text-white text-left hover:bg-azul-oscuro/80 focus:outline-none focus:ring-2 focus:ring-azul-brillante transition-all duration-200 flex items-center justify-between"
                    >
                        <span id="student-council-selected-text" class="text-white/70">Seleccionar rol de Xunta...</span>
                        <svg id="student-council-arrow" class="w-5 h-5 text-white/60 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>
                    <ul 
                        id="student-council-dropdown-menu"
                        class="absolute z-50 w-full mt-2 bg-azul-oscuro border border-white/30 rounded-lg shadow-xl hidden max-h-60 overflow-y-auto"
                    >
                        <!-- Las opciones se cargar√°n din√°micamente -->
                    </ul>
                </div>
                <input type="hidden" id="student-council-select" required />
            </div>
            
            <!-- Informaci√≥n de clase (solo para delegados y subdelegados) -->
            <div id="student-class-info-container" class="hidden space-y-3">
                <label class="block text-sm font-medium text-white/80 mb-2">
                    Informaci√≥n de la Clase
                </label>
                <div class="grid grid-cols-2 gap-3">
                    <input 
                        type="text" 
                        id="student-class-curso" 
                        placeholder="Curso (ej: 3¬∫)" 
                        class="px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-azul-brillante placeholder-white/50"
                    />
                    <input 
                        type="text" 
                        id="student-class-especialidad" 
                        placeholder="Especialidad" 
                        class="px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-azul-brillante placeholder-white/50"
                    />
                </div>
            </div>
            
            <button 
                type="submit" 
                class="w-full px-4 py-3 bg-azul-brillante text-white rounded-lg hover:bg-azul-brillante/80 transition-colors font-medium"
            >
                Asignar Rol de Xunta
            </button>
        </form>
    </div>
    
    <!-- Formulario para Comisi√≥n Delegada -->
    <div class="border-t border-white/20 pt-6 mt-6">
        <h4 class="text-md font-medium text-white mb-4">üèõÔ∏è Asignar Rol de Comisi√≥n Delegada</h4>
        <form id="add-delegation-role-form" class="space-y-4">
            <!-- Dropdown para roles de Comisi√≥n Delegada -->
            <div class="relative">
                <label class="block text-sm font-medium text-white/80 mb-2">
                    Rol en Comisi√≥n Delegada
                </label>
                <div class="custom-dropdown">
                    <button 
                        type="button"
                        id="delegation-role-dropdown-btn"
                        class="w-full px-4 py-3 bg-azul-oscuro border border-white/30 rounded-lg text-white text-left hover:bg-azul-oscuro/80 focus:outline-none focus:ring-2 focus:ring-azul-brillante transition-all duration-200 flex items-center justify-between"
                    >
                        <span id="delegation-role-selected-text" class="text-white/70">Seleccionar rol de Comisi√≥n...</span>
                        <svg id="delegation-role-arrow" class="w-5 h-5 text-white/60 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>
                    <ul 
                        id="delegation-role-dropdown-menu"
                        class="absolute z-50 w-full mt-2 bg-azul-oscuro border border-white/30 rounded-lg shadow-xl hidden max-h-60 overflow-y-auto"
                    >
                        <!-- Las opciones se cargar√°n din√°micamente -->
                    </ul>
                </div>
                <input type="hidden" id="delegation-role-select" required />
            </div>
            
            <!-- Dropdown para posici√≥n en la delegaci√≥n -->
            <div id="delegation-position-container" class="relative hidden">
                <label class="block text-sm font-medium text-white/80 mb-2">
                    Posici√≥n en la Delegaci√≥n
                </label>
                <div class="custom-dropdown">
                    <button 
                        type="button"
                        id="delegation-position-dropdown-btn"
                        class="w-full px-4 py-3 bg-azul-oscuro border border-white/30 rounded-lg text-white text-left hover:bg-azul-oscuro/80 focus:outline-none focus:ring-2 focus:ring-azul-brillante transition-all duration-200 flex items-center justify-between"
                    >
                        <span id="delegation-position-selected-text" class="text-white/70">Seleccionar posici√≥n...</span>
                        <svg id="delegation-position-arrow" class="w-5 h-5 text-white/60 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>
                    <ul 
                        id="delegation-position-dropdown-menu"
                        class="absolute z-50 w-full mt-2 bg-azul-oscuro border border-white/30 rounded-lg shadow-xl hidden max-h-60 overflow-y-auto"
                    >
                        <!-- Las opciones se cargar√°n din√°micamente -->
                    </ul>
                </div>
                <input type="hidden" id="delegation-position-select" />
            </div>
            
            <!-- Fecha de fin de prueba (para tutorandos) -->
            <div id="delegation-probation-container" class="hidden">
                <label for="delegation-probation-date" class="block text-sm font-medium text-white/80 mb-2">
                    Fecha fin de prueba (para tutorandos)
                </label>
                <input 
                    type="date" 
                    id="delegation-probation-date" 
                    class="w-full px-3 py-2 bg-azul-oscuro border border-white/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-azul-brillante"
                />
            </div>
            
            <button 
                type="submit" 
                class="w-full px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-600/80 transition-colors font-medium"
            >
                Asignar Rol de Comisi√≥n
            </button>
        </form>
    </div>
    
    <!-- Formulario para a√±adir comisi√≥n -->
    <div class="border-t border-white/20 pt-6 mt-6">
        <h4 class="text-md font-medium text-white mb-4">üìã Asignar Comisi√≥n</h4>
        <form id="add-commission-form" class="space-y-4">
            <!-- Dropdown personalizado para comisiones -->
            <div class="relative">
                <label class="block text-sm font-medium text-white/80 mb-2">
                    Comisi√≥n
                </label>
                <div class="custom-dropdown">
                    <button 
                        type="button"
                        id="commission-dropdown-btn"
                        class="w-full px-4 py-3 bg-azul-oscuro border border-white/30 rounded-lg text-white text-left hover:bg-azul-oscuro/80 focus:outline-none focus:ring-2 focus:ring-azul-brillante transition-all duration-200 flex items-center justify-between"
                    >
                        <span id="commission-selected-text" class="text-white/70">Seleccionar comisi√≥n...</span>
                        <svg id="commission-arrow" class="w-5 h-5 text-white/60 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>
                    <ul 
                        id="commission-dropdown-menu"
                        class="absolute z-50 w-full mt-2 bg-azul-oscuro border border-white/30 rounded-lg shadow-xl hidden max-h-60 overflow-y-auto"
                    >
                        <!-- Las opciones se cargar√°n din√°micamente -->
                    </ul>
                </div>
                <input type="hidden" id="commission-select" required />
            </div>
            
            <button 
                type="submit" 
                class="w-full px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-600/80 transition-colors font-medium"
            >
                Asignar Comisi√≥n
            </button>
        </form>
    </div>
    
    <!-- Toast de notificaciones -->
    <div id="notification-toast" class="fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg hidden z-50">
        <span id="notification-message">Operaci√≥n completada</span>
    </div>
</div>

<style>
    /* Estilos para mejorar los dropdowns personalizados */
    .custom-dropdown {
        position: relative;
    }
    
    .custom-dropdown ul {
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.3) rgba(255, 255, 255, 0.1);
    }
    
    .custom-dropdown ul::-webkit-scrollbar {
        width: 6px;
    }
    
    .custom-dropdown ul::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }
    
    .custom-dropdown ul::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.3);
        border-radius: 3px;
    }
    
    .custom-dropdown ul::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.5);
    }
    
    /* Animaciones suaves para las flechas */
    .custom-dropdown svg {
        transition: transform 0.2s ease-in-out;
    }
    
    /* Efectos hover mejorados */
    .custom-dropdown button:hover {
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    
    /* Estilos para el men√∫ desplegable */
    .custom-dropdown ul {
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        animation: dropdown-fade-in 0.15s ease-out;
    }
    
    @keyframes dropdown-fade-in {
        from {
            opacity: 0;
            transform: translateY(-4px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* Estados de focus mejorados */
    .custom-dropdown button:focus-within {
        ring-color: rgba(59, 130, 246, 0.5);
        ring-width: 2px;
    }
</style>

<script is:inline define:vars={{ userId }}>
    let roleData = {};
    let currentUserRoles = [];
    let currentUserCommissions = [];
    
    // Cargar datos iniciales
    async function loadData() {
        try {
            // Cargar datos de roles disponibles
            const roleResponse = await fetch('/api/admin/role-data');
            const roleResult = await roleResponse.json();
            
            if (roleResult.success) {
                roleData = roleResult.data;
                populateDropdowns();
            }
            
            // Cargar roles actuales del usuario
            await loadUserRoles();
        } catch (error) {
            console.error('Error loading data:', error);
            showNotification('Error al cargar datos', 'error');
        }
    }
    
    // Poblar los dropdowns con datos disponibles
    function populateDropdowns() {
        // Separar roles por categor√≠a
        const studentCouncilRoles = roleData.roleTypes?.filter(role => 
            role.name === 'delegado_clase' || role.name === 'subdelegado_clase',
        ) || [];
        
        const delegationRoles = roleData.roleTypes?.filter(role => 
            role.name !== 'delegado_clase' && role.name !== 'subdelegado_clase',
        ) || [];
        
        // Poblar dropdown de Xunta de Alumnado
        const studentCouncilMenu = document.getElementById('student-council-dropdown-menu');
        studentCouncilMenu.innerHTML = '';
        studentCouncilRoles.forEach(roleType => {
            const li = document.createElement('li');
            li.innerHTML = `
                <button 
                    type="button"
                    class="w-full px-4 py-3 text-left text-white hover:bg-white/10 transition-colors duration-150 border-b border-white/5 last:border-b-0"
                    data-value="${roleType.id}"
                    data-role-name="${roleType.name}"
                >
                    ${roleType.description || roleType.name}
                </button>
            `;
            studentCouncilMenu.appendChild(li);
        });
        
        // Poblar dropdown de roles de Comisi√≥n Delegada
        const delegationRoleMenu = document.getElementById('delegation-role-dropdown-menu');
        delegationRoleMenu.innerHTML = '';
        delegationRoles.forEach(roleType => {
            const li = document.createElement('li');
            li.innerHTML = `
                <button 
                    type="button"
                    class="w-full px-4 py-3 text-left text-white hover:bg-white/10 transition-colors duration-150 border-b border-white/5 last:border-b-0"
                    data-value="${roleType.id}"
                    data-role-name="${roleType.name}"
                >
                    ${roleType.description || roleType.name}
                </button>
            `;
            delegationRoleMenu.appendChild(li);
        });
        
        // Poblar posiciones de delegaci√≥n
        const positionMenu = document.getElementById('delegation-position-dropdown-menu');
        positionMenu.innerHTML = '';
        roleData.positions?.forEach(position => {
            const li = document.createElement('li');
            li.innerHTML = `
                <button 
                    type="button"
                    class="w-full px-4 py-3 text-left text-white hover:bg-white/10 transition-colors duration-150 border-b border-white/5 last:border-b-0"
                    data-value="${position.id}"
                    data-category="${position.category}"
                >
                    ${position.name}
                </button>
            `;
            positionMenu.appendChild(li);
        });
        
        // Poblar comisiones
        const commissionMenu = document.getElementById('commission-dropdown-menu');
        commissionMenu.innerHTML = '';
        roleData.commissions?.forEach(commission => {
            const li = document.createElement('li');
            li.innerHTML = `
                <button 
                    type="button"
                    class="w-full px-4 py-3 text-left text-white hover:bg-white/10 transition-colors duration-150 border-b border-white/5 last:border-b-0"
                    data-value="${commission.id}"
                >
                    ${commission.name}
                </button>
            `;
            commissionMenu.appendChild(li);
        });
        
        // Configurar eventos de los dropdowns
        setupDropdownEvents();
    }
    
    // Cargar roles actuales del usuario
    async function loadUserRoles() {
        try {
            const response = await fetch(`/api/users/roles?user_id=${userId}`);
            const result = await response.json();
            
            if (result.success) {
                currentUserRoles = result.data.roles;
                currentUserCommissions = result.data.commissions;
                updateCurrentRolesDisplay();
                updateCurrentCommissionsDisplay();
            }
        } catch (error) {
            console.error('Error loading user roles:', error);
        }
    }
    
    // Actualizar display de roles actuales
    function updateCurrentRolesDisplay() {
        const container = document.getElementById('current-roles-container');
        
        if (currentUserRoles.length === 0) {
            container.innerHTML = '<div class="text-white/60">Sin roles asignados</div>';
            return;
        }
        
        container.innerHTML = currentUserRoles.map(userRole => {
            const roleType = userRole.role_types;
            const position = userRole.delegation_positions;
            const isProbation = userRole.probation_end_date && new Date(userRole.probation_end_date) > new Date();
            
            let displayName = roleType.description || roleType.name;
            if (position) {
                displayName += ` (${position.name})`;
            }
            if (isProbation) {
                displayName += ' - En prueba';
            }
            
            return `
                <div class="flex items-center justify-between bg-white/5 p-3 rounded-lg">
                    <span class="text-white">${displayName}</span>
                    <button 
                        onclick="removeUserRole(${userRole.id})"
                        class="text-red-400 hover:text-red-300 text-sm px-2 py-1 rounded"
                    >
                        Eliminar
                    </button>
                </div>
            `;
        }).join('');
    }
    
    // Actualizar display de comisiones actuales
    function updateCurrentCommissionsDisplay() {
        const container = document.getElementById('current-commissions-container');
        
        if (currentUserCommissions.length === 0) {
            container.innerHTML = '<div class="text-white/60">Sin comisiones asignadas</div>';
            return;
        }
        
        container.innerHTML = currentUserCommissions.map(userCommission => {
            const commission = userCommission.commissions;
            
            return `
                <div class="flex items-center justify-between bg-white/5 p-3 rounded-lg">
                    <span class="text-white">${commission.name}</span>
                    <button 
                        onclick="removeUserCommission(${userCommission.id})"
                        class="text-red-400 hover:text-red-300 text-sm px-2 py-1 rounded"
                    >
                        Eliminar
                    </button>
                </div>
            `;
        }).join('');
    }
    
    // Configurar eventos de dropdowns personalizados
    function setupDropdownEvents() {
        // Configurar dropdown de Xunta de Alumnado
        setupCustomDropdown('student-council', (value, text, data) => {
            const roleName = data.roleName;
            const classInfoContainer = document.getElementById('student-class-info-container');
            
            // Mostrar informaci√≥n de clase para delegados y subdelegados
            if (roleName === 'delegado_clase' || roleName === 'subdelegado_clase') {
                classInfoContainer.classList.remove('hidden');
            } else {
                classInfoContainer.classList.add('hidden');
            }
        });
        
        // Configurar dropdown de roles de Comisi√≥n Delegada
        setupCustomDropdown('delegation-role', (value, text, data) => {
            const roleName = data.roleName;
            const positionContainer = document.getElementById('delegation-position-container');
            const probationContainer = document.getElementById('delegation-probation-container');
            
            positionContainer.classList.add('hidden');
            probationContainer.classList.add('hidden');
            
            // Limpiar selecci√≥n de posici√≥n
            resetDropdown('delegation-position');
            
            if (roleName === 'directiva' || roleName === 'directiva_extendida' || roleName === 'miembro_delegacion') {
                positionContainer.classList.remove('hidden');
            }
            
            if (roleName === 'tutorando') {
                probationContainer.classList.remove('hidden');
            }
        });
        
        // Configurar dropdown de posici√≥n de delegaci√≥n
        setupCustomDropdown('delegation-position');
        
        // Configurar dropdown de comisi√≥n
        setupCustomDropdown('commission');
    }
    
    // Funci√≥n gen√©rica para configurar dropdowns personalizados
    function setupCustomDropdown(dropdownName, onSelectCallback = null) {
        const btn = document.getElementById(`${dropdownName}-dropdown-btn`);
        const menu = document.getElementById(`${dropdownName}-dropdown-menu`);
        const arrow = document.getElementById(`${dropdownName}-arrow`);
        const selectedText = document.getElementById(`${dropdownName}-selected-text`);
        const hiddenInput = document.getElementById(`${dropdownName}-select`);
        
        // Toggle dropdown
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            // Cerrar otros dropdowns
            closeAllDropdowns(dropdownName);
            
            const isOpen = !menu.classList.contains('hidden');
            
            if (isOpen) {
                menu.classList.add('hidden');
                arrow.classList.remove('rotate-180');
            } else {
                menu.classList.remove('hidden');
                arrow.classList.add('rotate-180');
            }
        });
        
        // Manejar selecci√≥n de opciones
        menu.addEventListener('click', (e) => {
            if (e.target.tagName === 'BUTTON') {
                e.preventDefault();
                e.stopPropagation();
                
                const value = e.target.dataset.value;
                const text = e.target.textContent.trim();
                const data = { ...e.target.dataset };
                
                // Actualizar UI
                selectedText.textContent = text;
                selectedText.classList.remove('text-white/70');
                selectedText.classList.add('text-white');
                hiddenInput.value = value;
                
                // Cerrar dropdown
                menu.classList.add('hidden');
                arrow.classList.remove('rotate-180');
                
                // Ejecutar callback si existe
                if (onSelectCallback) {
                    onSelectCallback(value, text, data);
                }
            }
        });
    }
    
    // Cerrar todos los dropdowns excepto el especificado
    function closeAllDropdowns(except = null) {
        const dropdowns = ['student-council', 'delegation-role', 'delegation-position', 'commission'];
        
        dropdowns.forEach(name => {
            if (name !== except) {
                const menu = document.getElementById(`${name}-dropdown-menu`);
                const arrow = document.getElementById(`${name}-arrow`);
                
                if (menu && arrow) {
                    menu.classList.add('hidden');
                    arrow.classList.remove('rotate-180');
                }
            }
        });
    }
    
    // Resetear dropdown a estado inicial
    function resetDropdown(dropdownName) {
        const selectedText = document.getElementById(`${dropdownName}-selected-text`);
        const hiddenInput = document.getElementById(`${dropdownName}-select`);
        const menu = document.getElementById(`${dropdownName}-dropdown-menu`);
        const arrow = document.getElementById(`${dropdownName}-arrow`);
        
        if (selectedText && hiddenInput) {
            const placeholders = {
                'student-council': 'Seleccionar rol de Xunta...',
                'delegation-role': 'Seleccionar rol de Comisi√≥n...',
                'delegation-position': 'Seleccionar posici√≥n...',
                'commission': 'Seleccionar comisi√≥n...',
            };
            
            selectedText.textContent = placeholders[dropdownName] || 'Seleccionar...';
            selectedText.classList.remove('text-white');
            selectedText.classList.add('text-white/70');
            hiddenInput.value = '';
            
            if (menu) menu.classList.add('hidden');
            if (arrow) arrow.classList.remove('rotate-180');
        }
    }
    
    // Cerrar dropdowns al hacer clic fuera
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.custom-dropdown')) {
            closeAllDropdowns();
        }
    });
    
    // Manejar env√≠o del formulario de Xunta de Alumnado
    document.getElementById('add-student-council-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const roleTypeId = document.getElementById('student-council-select').value;
        const curso = document.getElementById('student-class-curso').value;
        const especialidad = document.getElementById('student-class-especialidad').value;
        
        const classInfo = (curso || especialidad) ? { curso, especialidad } : null;
        
        try {
            const response = await fetch('/api/users/roles', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: userId,
                    role_type_id: parseInt(roleTypeId),
                    position_id: null,
                    class_info: classInfo,
                    probation_end_date: null,
                }),
            });
            
            const result = await response.json();
            
            if (result.success) {
                showNotification('Rol de Xunta asignado correctamente');
                // Resetear formulario y dropdowns
                document.getElementById('add-student-council-form').reset();
                resetDropdown('student-council');
                
                // Ocultar campos condicionales
                document.getElementById('student-class-info-container').classList.add('hidden');
                
                await loadUserRoles();
            } else {
                showNotification(result.error, 'error');
            }
        } catch (error) {
            console.error('Error adding student council role:', error);
            showNotification('Error al asignar rol de Xunta', 'error');
        }
    });
    
    // Manejar env√≠o del formulario de Comisi√≥n Delegada
    document.getElementById('add-delegation-role-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const roleTypeId = document.getElementById('delegation-role-select').value;
        const positionId = document.getElementById('delegation-position-select').value || null;
        const probationDate = document.getElementById('delegation-probation-date').value || null;
        
        try {
            const response = await fetch('/api/users/roles', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: userId,
                    role_type_id: parseInt(roleTypeId),
                    position_id: positionId ? parseInt(positionId) : null,
                    class_info: null,
                    probation_end_date: probationDate,
                }),
            });
            
            const result = await response.json();
            
            if (result.success) {
                showNotification('Rol de Comisi√≥n asignado correctamente');
                // Resetear formulario y dropdowns
                document.getElementById('add-delegation-role-form').reset();
                resetDropdown('delegation-role');
                resetDropdown('delegation-position');
                
                // Ocultar campos condicionales
                document.getElementById('delegation-position-container').classList.add('hidden');
                document.getElementById('delegation-probation-container').classList.add('hidden');
                
                await loadUserRoles();
            } else {
                showNotification(result.error, 'error');
            }
        } catch (error) {
            console.error('Error adding delegation role:', error);
            showNotification('Error al asignar rol de Comisi√≥n', 'error');
        }
    });
    
    // Manejar env√≠o del formulario de comisi√≥n
    document.getElementById('add-commission-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const commissionId = document.getElementById('commission-select').value;
        
        try {
            const response = await fetch('/api/users/commissions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: userId,
                    commission_id: parseInt(commissionId),
            }),
        });
            
            const result = await response.json();
            
            if (result.success) {
                showNotification('Comisi√≥n asignada correctamente');
                document.getElementById('add-commission-form').reset();
                resetDropdown('commission');
                await loadUserRoles();
            } else {
                showNotification(result.error, 'error');
            }
        } catch (error) {
            console.error('Error adding commission:', error);
            showNotification('Error al asignar comisi√≥n', 'error');
        }
    });
    
    // Eliminar rol de usuario
    async function removeUserRole(userRoleId) {
        if (!confirm('¬øEst√°s seguro de que quieres eliminar este rol?')) {
            return;
        }
        
        try {
            const response = await fetch(`/api/users/roles?user_role_id=${userRoleId}`, {
                method: 'DELETE',
        });
            
            const result = await response.json();
            
            if (result.success) {
                showNotification('Rol eliminado correctamente');
                await loadUserRoles();
            } else {
                showNotification(result.error, 'error');
            }
        } catch (error) {
            console.error('Error removing role:', error);
            showNotification('Error al eliminar rol', 'error');
        }
    }
    
    // Eliminar comisi√≥n de usuario
    async function removeUserCommission(userCommissionId) {
        if (!confirm('¬øEst√°s seguro de que quieres eliminar esta comisi√≥n?')) {
            return;
        }
        
        try {
            const response = await fetch(`/api/users/commissions?user_commission_id=${userCommissionId}`, {
                method: 'DELETE',
        });
            
            const result = await response.json();
            
            if (result.success) {
                showNotification('Comisi√≥n eliminada correctamente');
                await loadUserRoles();
            } else {
                showNotification(result.error, 'error');
            }
        } catch (error) {
            console.error('Error removing commission:', error);
            showNotification('Error al eliminar comisi√≥n', 'error');
        }
    }
    
    // Mostrar notificaci√≥n
    function showNotification(message, type = 'success') {
        const toast = document.getElementById('notification-toast');
        const messageEl = document.getElementById('notification-message');
        
        messageEl.textContent = message;
        toast.className = `fixed top-4 right-4 px-4 py-2 rounded-lg z-50 ${
            type === 'error' ? 'bg-red-600' : 'bg-green-600'
        } text-white`;
        
        toast.classList.remove('hidden');
        
        setTimeout(() => {
            toast.classList.add('hidden');
        }, 3000);
    }
    
    // Hacer funciones globales
    window.removeUserRole = removeUserRole;
    window.removeUserCommission = removeUserCommission;
    
    // Cargar datos al inicializar
    loadData();
</script>
